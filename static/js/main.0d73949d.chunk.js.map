{"version":3,"sources":["AlgoContest/sortAlgorithms/InsertionSort.js","AlgoContest/sortAlgorithms/MergeSort.js","AlgoContest/sortAlgorithms/Quicksort.js","AlgoContest/sortAlgorithms/BubbleSort.js","AlgoContest/sortAlgorithms/HeapSort.js","AlgoContest/sortAlgorithms/ShellSort.js","AlgoContest/sortAlgorithms/SelectionSort.js","AlgoContest/SortVisualizer.jsx","AlgoContest/SortContest.jsx","AlgoContest/PathfindingContest.jsx","AlgoContest/AlgoContest.jsx","App.js","reportWebVitals.js","index.js"],"names":["getInsertionSortAnimations","array","animations","length","i","push","j","swap","insertionSort","index1","index2","temp","getMergeSortAnimations","auxiliaryArray","slice","mergeSort","mainArray","startIndex","endIndex","middleIndex","Math","floor","k","merge","getQuicksortAnimations","quicksort","lowIndex","highIndex","lowEndIndex","pivotIndex","min","max","random","pivot","done","quicksortPartition","getBubbleSortAnimations","isSwapped","bubbleSort","getHeapSortAnimations","maxHeapify","buildMaxHeap","lastElementIndex","heapSort","maxIndex","index","leftChild","rightChild","getShellSortAnimations","gap","first","shellSort","getSelectionSortAnimations","minIndex","selectionSort","PRIMARY_COLOR","SECONDARY_COLOR","SortVisualizer","props","state","animationSpeedMS","algorithmType","allAlgorithmTypes","algorithmTypes","contestantNumber","numOfAnimationSteps","numOfSwapsOrOverwrites","numOfComparisons","arrayCopy","this","map","value","console","log","animationStepInfo","currentStepNumber","doNextMergeSortAnimationStep","doNextQuicksortAnimationStep","doNextShellSortAnimationStep","doNextInsertionSortAnimationStep","doNextHeapSortAnimationStep","doNextSelectionSortAnimationStep","doNextBubbleSortAnimationStep","animationCode","arrayBars","document","getElementsByClassName","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","ANIMATION_DELAY_MS","height","pivotLine","createElement","arrayContainer","getElementById","setAttribute","width","bottom","left","appendChild","remove","barOneIndex","barTwoIndex","lastAnimationStepNumber","algorithmPlace","handleAlgorithmIsNowFinished","createAlgorithmPlacelabel","placeLabelText","sortVisualizer","placeLabel","createTextNode","statsLabel","statsLabelText","swapsOrOverwrites","placeLabelColor","borderColor","window","innerWidth","setState","display","destructAlgorithmPlaceLabel","destructAlgorithmStatsLabel","resetVisualizationStyling","updateAlgorithmType","className","id","onClick","algorithmDropDownButtonOnClick","removeMe","React","Component","ARRAY_MAX_VALUE","COUNTDOWN_DURATION_MS","ALGORITHM_TYPES","SortContest","setRef","ref","algoContestantRefs","handlePageResize","isPreContest","isRandomArray","randomizeArray","generateNearlySortedArray","windowWidthSize","querySelector","textContent","setAnimationSpeed","addOrRemoveStickyEffectOnSortContestHeader","header","sticky","pageYOffset","classList","add","numOfContestants","removeContestant","bind","removeExtraContestants","disableDuringContestControlButtons","addEventListener","removeEventListener","newNumOfContestants","addComponent","randomIntFromInterval","resetSortContestPage","enableRemoveContestantButtons","disabled","innerText","contestantNum","getAlgorithmType","removeComponent","animationStandIn","sortVisualizers","nextSortVisualizer","insertBefore","disableRemoveContestantButtons","disablePreContestButtons","enableDuringContestControlButtons","startCountdown","allContestantAnimationData","getAllContestantAnimationDataAndSetAlgorithmStatInfo","runContestAnimations","scheduleContestFinishedCommands","getSortAnimations","setAllAlgorithmStatInfo","stepCounter","numOfFinishedContestants","placeNumber","hasContestantFinishedThisStep","doAnimationNextStep","scheduleAlgorithmIsNowFinishedCommands","allContestantMaxAnimationSteps","maxNumberOfAnimationSteps","handleContestIsNowFinished","getAnimationSpeed","enablePreContestSetupButtons","sortedArray","sort","a","b","createAlgorithmStatsLabel","numOfCountdownSeconds","innerHTML","fullPageWidthArraySize","getFullPageWidthArraySize","numOfRepeatNumbers","numOfElements","ceil","clearAllAlgorithmStatsAndPlaceLabels","algorithmDropDownButtons","algorithmDropDownArrows","visibility","removeAlgorithmButtons","clearAllTimeouts","clearAllQuicksortPivotBars","allContestantPlaceInfo","findAllPlaceInformation","resetArrayBarsToCorrectHeights","numOfSteps","getNumOfAnimationsSteps","clearTimeout","startContest","addContestant","ContestantNumbers","genearateRandomArrayButtonOnClick","genearateNearySortedArrayButtonOnClick","addContestantOnClick","startContestButtonOnClick","skipToFinishButtonOnClick","PathfindingContest","AlgoContest","changePageContentToSortContest","ReactDOM","render","href","changePageContentToPathfindingContest","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.0d73949d.chunk.js","sourcesContent":["export function getInsertionSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    insertionSort(array, animations);\n    return animations;\n}\n\nfunction insertionSort(array, animations) {\n\n    // Animation codes:\n    //  'c' denotes comparison between two indexes,\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes,\n    //  'sf' denotes a swap is finished\n    for(let i = 1; i < array.length; ++i) {\n        animations.push(['c',i, i-1]);\n        animations.push(['cf',i, i-1]);\n\n        if(array[i] < array[i-1]) {\n            let j = i;\n            for(j; array[j] < array[j-1]; --j) {\n                animations.push(['c', j, j-1]);\n                animations.push(['cf', j, j-1]);\n                animations.push(['s', j, j-1, array[j], array[j-1]]);\n                animations.push(['sf']);\n                swap(array, j, j-1);\n            }\n            if(j-1 >= 0) {\n                animations.push(['c',j, j-1]);\n                animations.push(['cf',j, j-1]);\n            }\n        }\n    }\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n  \nfunction mergeSort(mainArray, startIndex, endIndex, auxiliaryArray, animations) {\n    if (startIndex >= endIndex) return;\n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\n    mergeSort(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\n    mergeSort(auxiliaryArray, middleIndex + 1, endIndex, mainArray, animations);\n    merge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\n}\n  \nfunction merge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\n\n    // Animation codes:\n    //  'c' denotes comparison between two indexes,\n    //  'cf' denotes that a comparison is finished\n    //  'o' denotes a value in the main array is overwritten by a value in the auxiliary array\n    //  'of' denates that a value has finished being overwritten\n    let k = startIndex;\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while(i <= middleIndex && j <= endIndex) {\n        animations.push(['c', i, j]);\n        animations.push(['cf', i, j]);\n        if(auxiliaryArray[i] <= auxiliaryArray[j]) {\n            animations.push(['o', k]);\n            animations.push(['of', k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        } else {\n            animations.push(['o', k]);\n            animations.push(['of', k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while(i <= middleIndex) {\n        animations.push(['c', i, i]);\n        animations.push(['cf', i, i]);\n        animations.push(['o', k]);\n        animations.push(['of', k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIndex) {\n        animations.push(['c', j, j]);\n        animations.push(['cf', j, j]);\n        animations.push(['o', k]);\n        animations.push(['of', k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n        }\n  }","export function getQuicksortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    quicksort(array, 0, array.length - 1, animations);\n    return animations;\n}\n\nfunction quicksort(array, lowIndex, highIndex, animations) {\n    if (lowIndex >= highIndex) {\n        return;\n    }\n    \n    let lowEndIndex = quicksortPartition(array, lowIndex, highIndex, animations);\n\n    quicksort(array, lowIndex, lowEndIndex, animations);\n    quicksort(array, lowEndIndex + 1, highIndex, animations);\n}\n\nfunction quicksortPartition(array, lowIndex, highIndex, animations) {\n    // Animation codes:\n    //  'p' denotes that a pivot was chosen\n    //  'c' denotes a comparison between the pivot\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes\n    //  'sf' denotes a swap is finished\n    //  'pf' denotes that we are finished using the last pivot\n\n    // I choose a value at a valid random index to serve as our pivot value\n    let pivotIndex = randomIntFromInterval(lowIndex, highIndex);\n    let pivot = array[pivotIndex];\n    animations.push(['p', lowIndex, highIndex, pivot]);\n    \n    let done = false;\n    while(!done) {\n\n        while (array[lowIndex] < pivot) {\n            animations.push(['c', lowIndex]);\n            animations.push(['cf', lowIndex]);\n            lowIndex++;\n        }\n    \n        while (pivot < array[highIndex]) {\n            animations.push(['c', highIndex]);\n            animations.push(['cf', highIndex]);\n            highIndex--;\n        }\n\n        if (lowIndex >= highIndex) {\n            done = true;\n            animations.push(['c']);\n            animations.push(['cf']);\n        }\n\n        else {\n            animations.push(['s', lowIndex, highIndex]);\n            animations.push(['sf', lowIndex, highIndex, array[lowIndex], array[highIndex]]);\n            swap(array, lowIndex, highIndex);\n            lowIndex++;\n            highIndex--;\n        }\n    }\n\n    animations.push(['pf']);\n    \n    return highIndex;\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","export function getBubbleSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    bubbleSort(array, animations);\n    return animations;\n}\n  \nfunction bubbleSort(array, animations){\n \n    // Animation codes:\n    //  'c' denotes comparison between two indexes,\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes,\n    //  'sf' denotes a swap is finished\n    let isSwapped = false;\n    for(let i = 0; i < array.length; ++i){\n        \n        isSwapped = false;\n        for(let j = 0; j < (array.length - i -1); ++j){\n            if(array[j] > array[j+1]){\n                animations.push(['c',j, j+1]);\n                animations.push(['cf',j, j+1]);\n                animations.push(['s', j, j+1, array[j], array[j+1]]);\n                animations.push(['sf', j, j+1]);\n                swap(array, j, j+1);\n                isSwapped = true;\n            }\n            if(j+1 < array.length) {\n                animations.push(['c',j, j+1]);\n                animations.push(['cf',j, j+1]);\n            }\n\n        }\n        \n        if(!isSwapped){\n            break;\n        }\n    } \n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","export function getHeapSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    heapSort(array, animations);\n    return animations;\n}\n\nfunction heapSort(array, animations) {\n    buildMaxHeap(array, animations);\n\n    let lastElementIndex = array.length - 1;\n\n    while(lastElementIndex > 0) {\n        animations.push(['s', 0, lastElementIndex]);\n        animations.push(['sf', 0, lastElementIndex, array[0], array[lastElementIndex]]);\n        swap(array, 0, lastElementIndex);\n        maxHeapify(array, 0, lastElementIndex, animations);\n        lastElementIndex--;\n    }\n}\n\nfunction buildMaxHeap(array, animations) {\n    let length = array.length;\n    let middle = Math.floor(array.length / 2 - 1);\n    let i = middle;\n\n    while(i >= 0) {\n        maxHeapify(array, i, length, animations);\n        i--;\n    }\n}\n\nfunction maxHeapify(array, i, maxIndex, animations) {\n    // Animation codes:\n    //  'c' denotes a comparison between the pivot\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes\n    //  'sf' denotes a swap is finished\n\n    let index;\n    let leftChild;\n    let rightChild;\n\n    while(i < maxIndex) {\n        index = i;\n\n        leftChild = i * 2 + 1;\n        rightChild = leftChild + 1;\n\n        if(leftChild < maxIndex) {\n            animations.push(['c', leftChild, index]);\n            animations.push(['cf', leftChild, index]);\n        }\n        if(leftChild < maxIndex && array[leftChild] > array[index]) {\n            index = leftChild;\n        }\n        \n        if(rightChild < maxIndex) {\n            animations.push(['c', leftChild, index]);\n            animations.push(['cf', leftChild, index]);\n        }\n        if(rightChild < maxIndex && array[rightChild] > array[index]) {\n            animations.push(['c', rightChild, index]);\n            animations.push(['cf', rightChild, index]);\n            index = rightChild;\n        }\n\n        if(index === i) {\n            return;\n        }\n        else {\n            animations.push(['s', i, index]);\n            animations.push(['sf', i, index, array[i], array[index]]);\n            swap(array, i, index);\n            i = index;\n        }\n\n    }\n\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","export function getShellSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    shellSort(array, animations);\n    return animations;\n}\n\nfunction shellSort(array, animations) {\n\n    // Animation codes:\n    //  'c' denotes comparison between two indexes,\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes,\n    //  'sf' denotes a swap is finished\n\n\tfor (let gap = Math.floor(array.length/2); gap > 0; gap = Math.floor(gap/2))\n\t{\n\t\t//insetion sort on each section\n\t\tfor (let i = gap; i < array.length; ++i)\n\t\t{\n            let first = array[i];\n            let j = i;\n            for (j = i; j >= gap && array[j - gap] > first; j -= gap) {\n                animations.push(['c', j, j-gap]);\n                animations.push(['cf', j, j-gap]);\n                animations.push(['s', j, j-gap]);\n                animations.push(['sf', j, j-gap, array[j], array[j-gap]]);\n                swap(array, j, j-gap);\n            }\n            if(j-gap >= 0) {\n                animations.push(['c',j, j-gap]);\n                animations.push(['cf',j, j-gap]);\n            }\n\t\t}\n\t}\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","export function getSelectionSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    selectionSort(array, animations);\n    return animations;\n}\n\nfunction selectionSort(array, animations) {\n\n    // Animation codes:\n    //  'c' denotes comparison between two indexes,\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes,\n    //  'sf' denotes a swap is finished\n    //  'm' denotes that we are finished with our minumun index\n    for (let i = 0; i < array.length - 1; ++i) {\n\n        let minIndex = i;\n        for (let j = i + 1; j < array.length; ++j) {\n            animations.push(['c', j, minIndex]);\n            animations.push(['cf', j]);\n            if (array[j] < array[minIndex]) {\n                animations.push(['m', minIndex]);\n                minIndex = j;\n            }     \n        }\n        animations.push(['m', minIndex]);\n        \n        animations.push(['s', i, minIndex]);\n        animations.push(['sf', i, minIndex, array[i], array[minIndex]]);\n        swap(array, i , minIndex);\n    }\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","import React from 'react';\nimport { getInsertionSortAnimations } from './sortAlgorithms/InsertionSort.js';\nimport { getMergeSortAnimations } from './sortAlgorithms/MergeSort.js';\nimport { getQuicksortAnimations } from './sortAlgorithms/Quicksort.js';\nimport { getBubbleSortAnimations } from './sortAlgorithms/BubbleSort.js';\nimport { getHeapSortAnimations } from './sortAlgorithms/HeapSort.js';\nimport { getShellSortAnimations } from './sortAlgorithms/ShellSort.js';\nimport { getSelectionSortAnimations } from './sortAlgorithms/SelectionSort.js';\nimport './css/SortVisualizer.css';\n\n// main color of the array bars: dark blue\nconst PRIMARY_COLOR = '#292cff';\n// color of array bars that are being compared or swapped\nconst SECONDARY_COLOR = 'red';\n// color of all the array bars once sorting has finished\nconst FINISHED_SORTING_COLOR = '#007bff';\n\nconst DEFAULT_BACKGROUND_COLOR = '#f7f7f7'; // light grey\nconst FINISHED_SORTING_BACKGROUND_COLOR = '#edfff2'; // light green\n\nexport default class SortVisualizer extends React.Component {\n\n    static ANIMATION_DELAY_MS = 3000;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            animationSpeedMS: 2,\n            array: this.props.array,\n            algorithmType: this.props.algorithmType,\n            allAlgorithmTypes: this.props.algorithmTypes,\n            contestantNumber: this.props.contestantNumber,\n            numOfAnimationSteps: -1,\n            numOfSwapsOrOverwrites: -1,\n            numOfComparisons: -1\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if(props.array !== state.array){\n            return{ array: props.array };\n        }\n        return null;\n    }\n\n    getSortAnimations() {\n        let arrayCopy = this.state.array.map((value) => value);\n\n        switch(this.state.algorithmType) {\n            case 'merge':\n                return getMergeSortAnimations(arrayCopy);\n            case 'quick':\n                return getQuicksortAnimations(arrayCopy);\n            case 'shell':\n                return getShellSortAnimations(arrayCopy);\n            case 'insertion':\n                return getInsertionSortAnimations(arrayCopy);\n            case 'heap':\n                return getHeapSortAnimations(arrayCopy);\n            case 'selection':\n                return getSelectionSortAnimations(arrayCopy);\n            case 'bubble':\n                return getBubbleSortAnimations(arrayCopy);\n            default:\n                console.log(\"Error: Unexpected Algorithm Type\");\n        }\n    }\n\n    doAnimationNextStep(animationStepInfo, currentStepNumber) {\n        switch(this.state.algorithmType) {\n            case 'merge':\n                this.doNextMergeSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'quick':\n                this.doNextQuicksortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'shell':\n                this.doNextShellSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'insertion':\n                this.doNextInsertionSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'heap':\n                this.doNextHeapSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'selection':\n                this.doNextSelectionSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'bubble':\n                this.doNextBubbleSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            default:\n                console.log(\"Error: Unexpected Algorithm Type\",);\n        }\n    }\n\n    doNextMergeSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n\n        const barOneIndex = animationStepInfo[1];\n        const barOneStyle = arrayBars[barOneIndex].style;\n\n        //comparison cases\n        if (animationCode === 'c' || animationCode === 'cf') {\n            const barTwoIndex = animationStepInfo[2];\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n\n            if(animationCode === 'c') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n                return;\n            }\n            else if(animationCode === 'cf') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\n                    barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n                return;\n            }\n        }\n        //overwrite cases\n        else {\n            if(animationCode === 'o') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n            }\n            else if(animationCode === 'of') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\n                    barOneStyle.height = `${animationStepInfo[2]}px`;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n            }\n            return;\n        }\n\n    }\n\n    doNextQuicksortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n\n        // swap cases\n        if (animationCode === 's' || animationCode === 'sf') {\n            const barOneIndex = animationStepInfo[1];\n            const barOneStyle = arrayBars[barOneIndex].style;\n            const barTwoIndex = animationStepInfo[2];\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n\n            if(animationCode === 's') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n            }\n            else if(animationCode === 'sf') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\n                    barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                    barOneStyle.height = `${animationStepInfo[4]}px`;\n                    barTwoStyle.height = `${animationStepInfo[3]}px`;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n            }\n        }\n        // comparison cases\n        else if(animationCode === 'c' || animationCode === 'cf'){\n            if(animationStepInfo.length === 1) {\n                return;\n            }\n            const barOneIndex = animationStepInfo[1];\n            const barOneStyle = arrayBars[barOneIndex].style;\n\n            if(animationCode === 'c') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n            }\n            else if(animationCode === 'cf') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n            }\n        }\n        // pivot cases\n        else {\n            if(animationCode === 'p') {\n                setTimeout(() => {\n                    let pivotLine = document.createElement(\"HR\");\n                    let arrayContainer = document.getElementById(`array-container-${this.state.contestantNumber}`);\n                    pivotLine.setAttribute(\"id\", `pivot-line-${this.state.contestantNumber}`);\n                    pivotLine.setAttribute(\"class\", `pivot-line`);\n                    pivotLine.style.width = `${((animationStepInfo[2] - animationStepInfo[1] + 1) * 4)-2}px`;\n                    pivotLine.style.bottom = `${animationStepInfo[3] + 4}px`;\n                    pivotLine.style.left = `${((animationStepInfo[1] + 1) * 4) + 2}px`;\n                    arrayContainer.appendChild(pivotLine);\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n                return;\n            }\n            else if(animationCode === 'pf') {\n                setTimeout(() => {\n                    let pivotLine = document.getElementById(`pivot-line-${this.state.contestantNumber}`);\n                    pivotLine.remove();\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n            }\n        }\n    }\n\n    doNextShellSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        const barOneIndex = animationStepInfo[1];\n        const barTwoIndex = animationStepInfo[2];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        //comparison cases\n        if(animationCode === 'c') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'cf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n        //swap cases\n        else if(animationCode === 's') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'sf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                barOneStyle.height = `${animationStepInfo[4]}px`;\n                barTwoStyle.height = `${animationStepInfo[3]}px`;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n    }\n\n    doNextInsertionSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        if(animationCode === 'sf') {\n            return;\n        }\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        const barOneIndex = animationStepInfo[1];\n        const barTwoIndex = animationStepInfo[2];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        // comparison cases\n        if(animationCode === 'c') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'cf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n        // swap case\n        else if(animationCode === 's') {\n            setTimeout(() => {\n                barOneStyle.height = `${animationStepInfo[4]}px`;\n                barTwoStyle.height = `${animationStepInfo[3]}px`;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n    }\n\n    doNextHeapSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        const barOneIndex = animationStepInfo[1];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoIndex = animationStepInfo[2];\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        // comparison cases\n        if(animationCode === 'c') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'cf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n        // swap cases\n        else if(animationCode === 's') {\n        setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'sf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                barOneStyle.height = `${animationStepInfo[4]}px`;\n                barTwoStyle.height = `${animationStepInfo[3]}px`;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n    }\n\n    doNextSelectionSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        const barOneIndex = animationStepInfo[1];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        //comparison cases\n        if(animationCode === 'c') {\n            const barTwoIndex = animationStepInfo[2];\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'cf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n        // swap case\n        else if(animationCode === 's') {\n            const barTwoIndex = animationStepInfo[2];\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'sf') {\n            const barTwoIndex = animationStepInfo[2];\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                barOneStyle.height = `${animationStepInfo[4]}px`;\n                barTwoStyle.height = `${animationStepInfo[3]}px`;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n        // finished with min case\n        else if(animationCode === 'm') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n    }\n\n    doNextBubbleSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        if(animationCode === 'sf') {\n            return;\n        }\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        const barOneIndex = animationStepInfo[1];\n        const barTwoIndex = animationStepInfo[2];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        // comparison cases\n        if(animationCode === 'c') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'cf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n        //swap case\n        else if(animationCode === 's') {\n            setTimeout(() => {\n                barOneStyle.height = `${animationStepInfo[4]}px`;\n                barTwoStyle.height = `${animationStepInfo[3]}px`;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n        }\n    }\n\n    resetVisualizationStyling() {\n        document.getElementById(`sort-visualizer-${this.state.contestantNumber}`).style.backgroundColor = DEFAULT_BACKGROUND_COLOR;\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        if(arrayBars[0].style.backgroundColor !== PRIMARY_COLOR) {\n            for (var i = 0; i < arrayBars.length; i++) {\n                arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n            }\n        }\n    }\n\n    scheduleAlgorithmIsNowFinishedCommands(lastAnimationStepNumber, algorithmPlace) {\n        setTimeout(() => {\n            this.handleAlgorithmIsNowFinished(algorithmPlace);\n        }, lastAnimationStepNumber * this.state.animationSpeedMS + SortVisualizer.ANIMATION_DELAY_MS);\n    }\n\n    handleAlgorithmIsNowFinished(algorithmPlace) {\n        this.createAlgorithmPlacelabel(algorithmPlace);\n        document.getElementById(`sort-visualizer-${this.state.contestantNumber}`).style.backgroundColor = FINISHED_SORTING_BACKGROUND_COLOR;\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        for (var i = 0; i < arrayBars.length; i++) {\n            arrayBars[i].style.backgroundColor = FINISHED_SORTING_COLOR;\n        }  \n    }\n\n    createAlgorithmPlacelabel(algorithmPlace) {\n        let sortVisualizer = document.getElementById(`sort-visualizer-${this.state.contestantNumber}`);\n        let placeLabel = document.createElement(\"DIV\");\n        placeLabel.setAttribute(\"id\", `place-label-${this.state.contestantNumber}`);\n        placeLabel.setAttribute(\"class\", 'place-label');\n\n        let placeLabelText;\n        if(algorithmPlace === 1) {\n            const GOLD = '#c7b620';\n            placeLabel.style.backgroundColor = GOLD;\n            placeLabelText = document.createTextNode('1st Place');\n        }\n        else if(algorithmPlace === 2) {\n            const SILVER = '#929292';\n            placeLabel.style.backgroundColor = SILVER;\n            placeLabelText = document.createTextNode('2nd Place');\n        }\n        else if(algorithmPlace === 3) {\n            const BRONZE = '#ab7627';\n            placeLabel.style.backgroundColor = BRONZE;\n            placeLabelText = document.createTextNode('3rd Place');\n        }\n        else {\n            const DEFAULT = '#636363';\n            placeLabel.style.backgroundColor = DEFAULT;\n            placeLabelText = document.createTextNode(`${algorithmPlace}th Place`);\n        }\n\n        placeLabel.appendChild(placeLabelText);\n        sortVisualizer.appendChild(placeLabel);\n    }\n\n    createAlgorithmStatsLabel() {\n        let sortVisualizer = document.getElementById(`sort-visualizer-${this.state.contestantNumber}`);\n        let statsLabel = document.createElement(\"DIV\");\n        statsLabel.setAttribute(\"id\", `stats-label-${this.state.contestantNumber}`);\n        statsLabel.setAttribute(\"class\", 'stats-label');\n\n        let placeLabelColor = document.getElementById(`place-label-${this.state.contestantNumber}`).style.backgroundColor;\n        statsLabel.style.borderColor = placeLabelColor;\n\n        let statsLabelText;\n        let swapsOrOverwrites;\n        if(this.state.algorithmType !== 'merge') {\n            swapsOrOverwrites = 'swaps';\n        }\n        else {\n            swapsOrOverwrites = 'overwrites';\n        }\n        if(window.innerWidth >= 700) {\n            statsLabelText = document.createTextNode(\n                `Final Stats: ${this.state.numOfComparisons} comparisons and ${this.state.numOfSwapsOrOverwrites} ${swapsOrOverwrites}`);\n        }\n        else {\n            statsLabelText = document.createTextNode(\n                `${this.state.numOfComparisons} comparisons and ${this.state.numOfSwapsOrOverwrites} ${swapsOrOverwrites}`);\n        }\n        \n        statsLabel.appendChild(statsLabelText);\n        sortVisualizer.appendChild(statsLabel);\n    }\n\n    destructAlgorithmPlaceLabel() {\n        let placeLabel = document.getElementById(`place-label-${this.state.contestantNumber}`);\n        if(placeLabel !== null) {\n            placeLabel.remove();\n        }\n    }\n\n    destructAlgorithmStatsLabel() {\n        let statsLabel = document.getElementById(`stats-label-${this.state.contestantNumber}`);\n        if(statsLabel !== null) {\n            statsLabel.remove();\n        }\n    }\n\n    setAnimationSpeed(animationSpeedMS) {\n        if(animationSpeedMS !== this.state.animationSpeedMS) {\n            this.setState({...this.state, animationSpeedMS: animationSpeedMS});\n        }\n    }\n\n    getAnimationSpeed() {\n        return this.state.animationSpeedMS;\n    }\n\n    updateAlgorithmType(algorithmType) {\n        this.setState({...this.state, algorithmType: algorithmType});\n    }\n\n    getAlgorithmType() {\n        return this.state.algorithmType;\n    }\n\n    setAllAlgorithmStatInfo(numOfAnimationSteps, numOfComparisons, numOfSwapsOrOverwrites) {\n        this.setState({\n            ...this.state,\n            numOfAnimationSteps: numOfAnimationSteps,\n            numOfComparisons: numOfComparisons,\n            numOfSwapsOrOverwrites: numOfSwapsOrOverwrites\n        });\n    }\n\n    getNumOfAnimationsSteps() {\n        return this.state.numOfAnimationSteps;  \n    }\n\n    getNumOfComparisons() {\n        return this.state.numOfComparisons;  \n    }\n\n    getNumOfSwapsOrOverwrites() {\n        return this.state.numOfSwapsOrOverwrites;\n    }\n\n    resetArrayBarsToCorrectHeights() {\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        for (var i = 0; i < arrayBars.length; i++) {\n            arrayBars[i].style.height = `${this.state.array[i]}px`;\n        }\n    }\n\n    removeComponent() {\n        document.getElementById(`sort-visualizer-${this.state.contestantNumber}`).style.display = 'none';\n    }\n\n    addComponent() {\n        document.getElementById(`sort-visualizer-${this.state.contestantNumber}`).style.display = 'block';\n    }\n\n    algorithmDropDownButtonOnClick(algorithmType) {\n        this.destructAlgorithmPlaceLabel();\n        this.destructAlgorithmStatsLabel();\n        this.resetVisualizationStyling();\n        this.updateAlgorithmType(algorithmType);\n    }\n\n    render() {\n        return (\n            <div className='sort-visualizer' id={`sort-visualizer-${this.state.contestantNumber}`}>\n                <div className=\"dropdown\">\n                    <div id='algorithm-dropdown-label'>{this.state.algorithmType}<div className='dropdown-arrow'>▼</div></div>\n                    <div className=\"dropdown-content\">\n                        {this.state.allAlgorithmTypes.map((algorithmType) => (\n                        (algorithmType !== this.state.algorithmType) ?\n                            <button\n                                key={algorithmType}\n                                className='algorithm-dropdown-button'\n                                onClick={() => this.algorithmDropDownButtonOnClick(algorithmType)}\n                            >{algorithmType}</button>\n                            : null\n                        ))}\n                    </div>\n                </div>\n                    <div className='array-container' id={`array-container-${this.state.contestantNumber}`}>\n                        {this.state.array.map((value, index) => (\n                        <div className={`array-bar-${this.state.contestantNumber}`}\n                            key={`${index}-${this.contestantNumber}`}\n                            style={{\n                                backgroundColor: PRIMARY_COLOR,\n                                height: `${value}px`,\n                            }}></div>\n                        ))}\n                    </div>\n                    <button id='remove-button' className='remove' onClick={() => this.props.removeMe(this.state.contestantNumber)}>-</button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport SortVisualizer from './SortVisualizer.jsx';\nimport './css/SortContest.css';\n\nconst ARRAY_MIN_VALUE = 5;\nconst ARRAY_MAX_VALUE = 130;\nconst INITIAL_NUM_OF_CONTESTANTS = 7;\nconst MAX_NUM_OF_CONTESTANTS = 10;\nconst COUNTDOWN_DURATION_MS = SortVisualizer.ANIMATION_DELAY_MS;\n\nconst ALGORITHM_TYPES = [\n    'merge',\n    'quick',\n    'heap',\n    'shell',\n    'insertion',\n    'bubble',\n    'selection'\n]\n\nexport default class SortContest extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            numOfContestants: INITIAL_NUM_OF_CONTESTANTS,\n            isPreContest: true,\n            isRandomArray: true,\n        };\n        this.algoContestantRefs = [];\n        this.removeContestant = this.removeContestant.bind(this);\n    }\n\n    setRef = (ref) => {\n        this.algoContestantRefs.push(ref);\n    };\n\n    componentDidMount() {\n        this.removeExtraContestants();\n        this.handlePageResize();\n        this.disableDuringContestControlButtons();\n        this.randomizeArray();\n        window.addEventListener('resize', this.handlePageResize);\n        window.addEventListener('scroll', this.addOrRemoveStickyEffectOnSortContestHeader);\n    }\n    \n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handlePageResize);\n        window.removeEventListener('scroll', this.addOrRemoveStickyEffectOnSortContestHeader);\n    }\n\n    addContestant() {\n        const newNumOfContestants = this.state.numOfContestants + 1;\n        this.algoContestantRefs[this.state.numOfContestants].addComponent();\n        this.algoContestantRefs[this.state.numOfContestants].updateAlgorithmType(ALGORITHM_TYPES[randomIntFromInterval(0,4)]);\n        this.setState({...this.state, numOfContestants: newNumOfContestants}, () => {\n            this.resetSortContestPage();\n            this.enableRemoveContestantButtons();\n        });\n        if(newNumOfContestants === MAX_NUM_OF_CONTESTANTS) {\n            document.getElementById('add-contestant-button').disabled = true;\n            document.getElementById('add-contestant-button').innerText = 'MAX';\n        }\n        else {\n            document.getElementById('add-contestant-button').disabled = false;\n            if(window.innerWidth <= 1195) {\n                document.getElementById('add-contestant-button').innerText = 'Add';\n            }\n            else {\n                document.getElementById('add-contestant-button').innerText = 'Add Contestant';\n            }\n        }\n    }\n\n    removeContestant(contestantNum) {\n        //shift all algorithm types over then removes the last one\n        for(let i = contestantNum - 1; i < this.state.numOfContestants - 1; ++i) {\n            this.algoContestantRefs[i].updateAlgorithmType(this.algoContestantRefs[i+1].getAlgorithmType());\n        }\n        const newNumOfContestants = this.state.numOfContestants - 1;\n        this.algoContestantRefs[this.state.numOfContestants - 1].removeComponent();\n        this.setState({...this.state, numOfContestants: newNumOfContestants}, this.resetSortContestPage());\n        // do remove animation\n        let animationStandIn = document.createElement(\"DIV\");\n        animationStandIn.setAttribute(\"class\", 'remove-element-animation-stand-in');\n        let sortVisualizers = document.getElementById('sort-visualizers');\n        let nextSortVisualizer = document.getElementById(`sort-visualizer-${contestantNum}`);\n        sortVisualizers.insertBefore(animationStandIn, nextSortVisualizer);\n        setTimeout(() => {\n            animationStandIn.remove();\n        }, 800);\n        if(newNumOfContestants === 2) {\n            this.disableRemoveContestantButtons();\n        }\n        //renable the remove contestant since we know we no longer have the maximum number of contestants\n        document.getElementById('add-contestant-button').disabled = false;\n        if(window.innerWidth <= 1195) {\n            document.getElementById('add-contestant-button').innerText = 'Add';\n        }\n        else {\n            document.getElementById('add-contestant-button').innerText = 'Add Contestant';\n        }\n        \n    }\n\n    startContest() {\n        this.disablePreContestButtons();\n        this.enableDuringContestControlButtons()\n        this.startCountdown();\n        const allContestantAnimationData = this.getAllContestantAnimationDataAndSetAlgorithmStatInfo();\n        this.runContestAnimations(allContestantAnimationData);\n        this.scheduleContestFinishedCommands(allContestantAnimationData);\n    }\n\n    getAllContestantAnimationDataAndSetAlgorithmStatInfo() {\n        const allContestantAnimationData = [];\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            allContestantAnimationData[i] = this.algoContestantRefs[i].getSortAnimations();\n            let numOfComparisons = 0;\n            let numOfSwapsOrOverwrites = 0;\n            for(let j = 0; j < allContestantAnimationData[i].length; ++j){\n                let animationCode = allContestantAnimationData[i][j][0];\n                if(animationCode === 'c') {\n                    numOfComparisons++;\n                }\n                else if(animationCode === 's' || animationCode === 'o') {\n                    numOfSwapsOrOverwrites++;\n                }\n            }\n            this.algoContestantRefs[i].setAllAlgorithmStatInfo(allContestantAnimationData[i].length / 2, numOfComparisons, numOfSwapsOrOverwrites);\n        }\n\n        return allContestantAnimationData;\n    }\n\n    runContestAnimations(allContestantAnimationData) {\n        let stepCounter = 0;\n        let numOfFinishedContestants = 0;\n        let placeNumber = 0;\n        while(numOfFinishedContestants < this.state.numOfContestants) {\n            let hasContestantFinishedThisStep = false;\n            for(let i = 0; i < this.state.numOfContestants; ++i) {\n                if(stepCounter > allContestantAnimationData[i].length) {\n                    continue;\n                }\n                else if(stepCounter === allContestantAnimationData[i].length) {\n                    numOfFinishedContestants++;\n                    if(hasContestantFinishedThisStep === false) {\n                        placeNumber++;\n                        hasContestantFinishedThisStep = true;\n                        this.algoContestantRefs[i].scheduleAlgorithmIsNowFinishedCommands(stepCounter, placeNumber);\n                    }\n                    else {\n                        this.algoContestantRefs[i].scheduleAlgorithmIsNowFinishedCommands(stepCounter, placeNumber);\n                    }\n                    continue;\n                }\n                else {\n                    this.algoContestantRefs[i].doAnimationNextStep(\n                        allContestantAnimationData[i][stepCounter],\n                        stepCounter\n                    );\n                }\n            }\n            stepCounter++;\n        }\n    }\n\n    scheduleContestFinishedCommands(allContestantAnimationData) {\n        const allContestantMaxAnimationSteps = [];\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            allContestantMaxAnimationSteps.push(allContestantAnimationData[i].length);\n        }\n\n        const maxNumberOfAnimationSteps = Math.max(...allContestantMaxAnimationSteps);\n        setTimeout(() => {\n            this.handleContestIsNowFinished();\n        }, maxNumberOfAnimationSteps * this.algoContestantRefs[0].getAnimationSpeed() + SortVisualizer.ANIMATION_DELAY_MS);\n    }\n\n    handleContestIsNowFinished() {\n        this.enablePreContestSetupButtons();\n        this.disableDuringContestControlButtons();\n        const sortedArray = this.state.array.sort(function(a, b){return a - b});\n        this.setState({ ...this.state, array: sortedArray });\n\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            this.algoContestantRefs[i].createAlgorithmStatsLabel();\n            this.algoContestantRefs[i].setAllAlgorithmStatInfo(-1, -1, -1);\n        }\n    }\n\n    startCountdown() {\n        let numOfCountdownSeconds = COUNTDOWN_DURATION_MS / 1000;\n        for(let i = 0; i < numOfCountdownSeconds; ++i) {\n            setTimeout(() => {\n                document.getElementById(\"start-contest-button\").innerHTML = `${numOfCountdownSeconds - i}`;\n            }, i * 1000);\n        }\n\n        setTimeout(() => {\n            document.getElementById(\"start-contest-button\").innerHTML = 'GO!';\n        }, COUNTDOWN_DURATION_MS); \n    }\n\n    randomizeArray() {\n        let array = [];\n        let fullPageWidthArraySize = this.getFullPageWidthArraySize();\n        for (let i = 0; i < fullPageWidthArraySize; ++i) {\n            array.push(randomIntFromInterval(ARRAY_MIN_VALUE, ARRAY_MAX_VALUE));\n        }\n        this.setState({ ...this.state, array: array });\n    }\n\n    generateNearlySortedArray() {\n        let numOfElements = 0;\n        let array = [];\n        let fullPageWidthArraySize = this.getFullPageWidthArraySize();\n        let numOfRepeatNumbers;\n        if(fullPageWidthArraySize < ARRAY_MAX_VALUE) {\n            numOfRepeatNumbers = 1;\n        }\n        else if(fullPageWidthArraySize < ARRAY_MAX_VALUE*2) {\n            numOfRepeatNumbers = 2;\n        }\n        else {\n            numOfRepeatNumbers = 3;\n        }\n\n        for (let i = ARRAY_MIN_VALUE; i < ARRAY_MAX_VALUE; ++i) {\n            for(let j = 0; j < numOfRepeatNumbers; ++j) {\n                array.push(i);\n                numOfElements++;\n                if(numOfElements >= fullPageWidthArraySize - 1) {\n                    break;\n                }\n            }\n            if(numOfElements >= fullPageWidthArraySize - 1) {\n                break;\n            }\n        }\n        for (let i = numOfElements; i < fullPageWidthArraySize; ++i) {\n            array.push(ARRAY_MAX_VALUE);\n        }\n        for(let i = 0; i < 5; ++i) {\n            let randomIndex1 = Math.ceil(Math.random() * array.length - 1);\n            let randomIndex2 = Math.ceil(Math.random() * array.length - 1);\n            swap(array, randomIndex1, randomIndex2);\n        }\n\n        this.setState({ ...this.state, array: array });\n    }\n\n    resetSortContestPage() {\n        this.enablePreContestSetupButtons();\n        this.clearAllAlgorithmStatsAndPlaceLabels();\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            this.algoContestantRefs[i].resetVisualizationStyling();\n        }\n    }\n\n    disablePreContestButtons() {\n        document.getElementById(\"start-contest-button\").disabled = true;\n        document.getElementById(\"randomize-button\").disabled = true;\n        document.getElementById(\"nearly-sorted-button\").disabled = true;\n        document.getElementById('add-contestant-button').disabled = true;\n\n        const algorithmDropDownButtons = document.getElementsByClassName('algorithm-dropdown-button');\n        for(let i = 0; i < algorithmDropDownButtons.length; ++i) {\n            algorithmDropDownButtons[i].disabled = true;\n        }\n        const algorithmDropDownArrows = document.getElementsByClassName('dropdown-arrow');\n        for(let i = 0; i < algorithmDropDownArrows.length; ++i) {\n            algorithmDropDownArrows[i].style.visibility = 'hidden';\n        }\n        this.disableRemoveContestantButtons();\n    }\n\n    enablePreContestSetupButtons() {\n        document.getElementById(\"start-contest-button\").innerHTML = 'Start';\n        document.getElementById(\"start-contest-button\").disabled = false;\n        document.getElementById(\"randomize-button\").disabled = false;\n        document.getElementById(\"nearly-sorted-button\").disabled = false;\n        if(this.state.numOfContestants < MAX_NUM_OF_CONTESTANTS) {\n            document.getElementById('add-contestant-button').disabled = false;\n        }\n\n        const algorithmDropDownButtons = document.getElementsByClassName('algorithm-dropdown-button');\n        for(let i = 0; i < algorithmDropDownButtons.length; ++i) {\n            algorithmDropDownButtons[i].disabled = false;\n        }\n        const algorithmDropDownArrows = document.getElementsByClassName('dropdown-arrow');\n        for(let i = 0; i < algorithmDropDownArrows.length; ++i) {\n            algorithmDropDownArrows[i].style.visibility = 'visible';\n        }\n    }\n\n    disableDuringContestControlButtons() {\n        document.getElementById('skip-to-finish-button').disabled = true;\n    }\n\n    enableDuringContestControlButtons() {\n        document.getElementById('skip-to-finish-button').disabled = false\n    }\n\n    disableRemoveContestantButtons() {\n        const removeAlgorithmButtons = document.getElementsByClassName('remove');\n        for(let i = 0; i < removeAlgorithmButtons.length; ++i) {\n            removeAlgorithmButtons[i].disabled = true;\n        }\n    }\n\n    enableRemoveContestantButtons() {\n        if(this.state.numOfContestants > 2) {\n            const removeAlgorithmButtons = document.getElementsByClassName('remove');\n            for(let i = 0; i < removeAlgorithmButtons.length; ++i) {\n                removeAlgorithmButtons[i].disabled = false;\n            }\n        }\n    }\n\n    skipToFinishButtonOnClick() {\n        this.clearAllTimeouts();\n        this.clearAllQuicksortPivotBars();\n        this.disableDuringContestControlButtons();\n        this.clearAllAlgorithmStatsAndPlaceLabels();\n\n        let allContestantPlaceInfo = this.findAllPlaceInformation();\n\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            const algorithmPlace = allContestantPlaceInfo[i][2];\n            this.algoContestantRefs[i].handleAlgorithmIsNowFinished(algorithmPlace);\n            this.algoContestantRefs[i].resetArrayBarsToCorrectHeights();\n        }\n        this.handleContestIsNowFinished();\n    }\n\n    removeExtraContestants() {\n        for(let i = INITIAL_NUM_OF_CONTESTANTS; i < MAX_NUM_OF_CONTESTANTS; ++i) {\n            this.algoContestantRefs[i].removeComponent();\n        }\n    }\n\n    findAllPlaceInformation() {\n\n        const allContestantPlaceInfo = [];\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            const contestantNum = i+1;\n            const numOfSteps = this.algoContestantRefs[i].getNumOfAnimationsSteps();\n            allContestantPlaceInfo.push([contestantNum, numOfSteps]);\n        }\n\n        //sort by number of animation steps to get the list in order of place\n        allContestantPlaceInfo.sort(function(a,b) {\n            return a[1]-b[1]\n        });\n\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            if(i > 0) {\n                if(allContestantPlaceInfo[i][1] === allContestantPlaceInfo[i-1][1]) {\n                    let placeNumber = allContestantPlaceInfo[i-1][2];\n                    allContestantPlaceInfo[i][2] = placeNumber;\n                }\n                else {\n                    let placeNumber = allContestantPlaceInfo[i-1][2] + 1;\n                    allContestantPlaceInfo[i][2] = placeNumber;\n                }\n            }\n            else {\n                let placeNumber = 1;\n                allContestantPlaceInfo[i][2] = placeNumber;\n            }\n        }\n\n        //sort by contestant number to get the list in the correct order\n        allContestantPlaceInfo.sort(function(a,b) {\n            return a[0]-b[0]\n        });\n        \n        //final format [contestant number, number of animation steps, place achieved]\n        return allContestantPlaceInfo;\n    }\n\n    clearAllAlgorithmStatsAndPlaceLabels() {\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            this.algoContestantRefs[i].destructAlgorithmPlaceLabel();\n            this.algoContestantRefs[i].destructAlgorithmStatsLabel();\n        }\n    }\n\n    clearAllTimeouts() {\n        // from https://stackoverflow.com/questions/8860188/javascript-clear-all-timeouts\n        // all timeout ids are consecutive integers, so this will clear all of the pending animation timeouts\n        var id = setTimeout(function() {}, 0);\n        while (id--) {\n            clearTimeout(id);\n        }\n    }\n\n    clearAllQuicksortPivotBars() {\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            let pivotLine = document.getElementById(`pivot-line-${i+1}`);\n            if(pivotLine !== null) {\n                pivotLine.remove();\n            }\n        }\n    }\n\n    genearateRandomArrayButtonOnClick() {\n        this.setState({ ...this.state,\n            isPreContest: true,\n            isRandomArray: true }, () => {\n            this.enablePreContestSetupButtons();\n            this.resetSortContestPage();\n            this.randomizeArray();\n            this.enableRemoveContestantButtons();\n        });\n    }\n\n    genearateNearySortedArrayButtonOnClick() {\n        this.setState({ ...this.state,\n            isPreContest: true,\n            isRandomArray: false }, () => {\n            this.enablePreContestSetupButtons();\n            this.resetSortContestPage();\n            this.generateNearlySortedArray();\n            this.enableRemoveContestantButtons();\n        });\n    }\n\n    startContestButtonOnClick() {\n        this.resetSortContestPage();\n        this.startContest();\n        this.setState({ ...this.state, isPreContest: false });\n    }\n\n    addContestantOnClick() {\n        this.addContestant();\n    }\n\n    getFullPageWidthArraySize() {\n        const initialArraySize = Math.floor((window.innerWidth - 25) / 4);\n        return initialArraySize;\n    }\n\n    handlePageResize = () => {\n        if(this.state.isPreContest === true) {\n            if(this.state.isRandomArray === true) {\n                this.randomizeArray();\n            }\n            else {\n                this.generateNearlySortedArray();\n            }\n        }\n\n        let windowWidthSize = window.innerWidth;\n        if(windowWidthSize <= 1195) {\n            document.querySelector('#algo-contest-header-link').textContent = 'AlgoContest';\n            document.querySelector('#randomize-button').textContent = 'Randomize';\n            document.querySelector('#nearly-sorted-button').textContent = 'Nearly Sorted';\n            document.querySelector('#add-contestant-button').textContent = 'Add';\n        }\n        if(windowWidthSize > 1195) {\n            document.querySelector('#algo-contest-header-link').textContent = 'AlgorithmContest';\n            document.querySelector('#randomize-button').textContent = 'Generate Random Array';\n            document.querySelector('#nearly-sorted-button').textContent = 'Generate Nearly Sorted Array';\n            document.querySelector('#add-contestant-button').textContent = 'Add Contestant';\n        }\n\n        let animationSpeedMS;\n        if(windowWidthSize < 420) {\n            animationSpeedMS = 5;\n        }\n        else if(windowWidthSize < 600) {\n            animationSpeedMS = 4;\n        }\n        else if(windowWidthSize < 800) {\n            animationSpeedMS = 3;\n        }\n        else if(windowWidthSize < 1200) {\n            animationSpeedMS = 1.5;\n        }\n        else {\n            animationSpeedMS = 1;\n        }\n        for(let i = 0; i < MAX_NUM_OF_CONTESTANTS; ++i) {\n            this.algoContestantRefs[i].setAnimationSpeed(animationSpeedMS);\n        }\n    }\n\n    // Referenced https://www.w3schools.com/howto/howto_js_sticky_header.asp\n    addOrRemoveStickyEffectOnSortContestHeader = () => {\n        let header = document.getElementById(\"sort-contest-header\");\n        let sticky = 45; //initial header.offsetTop();\n        if(window.innerWidth <= 480) {\n            sticky = 40; //initial header.offsetTop()\n        }\n\n        if (window.pageYOffset > sticky) {\n            header.classList.add(\"sticky\");\n        } else {\n            header.classList.remove(\"sticky\");\n        }\n    }\n\n    render() {\n        const ContestantNumbers = [];\n        for(let i = 0; i < MAX_NUM_OF_CONTESTANTS; ++i) {\n            ContestantNumbers.push(i+1);\n        }\n\n        return (\n            <div className='sort-contest'>\n                <div id=\"sort-contest-header\">\n                    <button id=\"randomize-button\" onClick={() => this.genearateRandomArrayButtonOnClick()}>\n                        Generate Random Array\n                    </button>\n                    <button id=\"nearly-sorted-button\" onClick={() => this.genearateNearySortedArrayButtonOnClick()}>\n                        Generate Nearly Sorted Array\n                    </button>\n                    <button id='add-contestant-button' onClick={() => this.addContestantOnClick()}>Add Contestant</button>\n                    <div id=\"num-of-contestants-label\">\n                        {this.state.numOfContestants} Contestants\n                    </div>\n                    <button id=\"start-contest-button\" onClick={() => this.startContestButtonOnClick()}>Start</button>\n                    <button id=\"skip-to-finish-button\" onClick={() => this.skipToFinishButtonOnClick()}>Skip To Finish</button>\n                </div>\n                <div className='sort-visualizers' id='sort-visualizers'>\n                    {ContestantNumbers.map(contestantNum => (\n                        <SortVisualizer \n                            key={contestantNum}\n                            ref={this.setRef}\n                            array={this.state.array}\n                            algorithmType={ALGORITHM_TYPES[(contestantNum - 1) % ALGORITHM_TYPES.length]}\n                            algorithmTypes={ALGORITHM_TYPES}\n                            contestantNumber={contestantNum}\n                            removeMe={this.removeContestant}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","import React from 'react';\nimport './css/PathfindingContest.css';\n\nexport default class PathfindingContest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: []\n        };\n    }\n\n    render() {\n        return (\n            <div id='pathfinding-contest'>\n                <p className=\"placeholder-text\">Pathfinding Contest (Placeholder)</p>\n                <p className=\"placeholder-text\">Future Project</p>\n                <p className=\"placeholder-text\">Not Implemented Yet</p>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SortContest from './SortContest.jsx';\nimport PathfindingContest from './PathfindingContest.jsx';\nimport './css/AlgoContest.css';\n\nexport default class AlgoContest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            algorithmType: ''\n        };\n    }\n\n    componentDidMount() {\n        this.changePageContentToSortContest();\n    }\n\n    changePageContentToSortContest() {\n        this.setState({ algorithmType: 'sort' });\n\n        document.querySelector('#sort-contest-button').style.backgroundColor = '#6c757d';\n        document.querySelector('#pathfinding-contest-button').style.backgroundColor = 'transparent';\n\n        ReactDOM.render(<SortContest />, document.getElementById('main-content'));\n    }\n\n    changePageContentToPathfindingContest() {\n        this.setState({ algorithmType: 'pathfinding' });\n\n        document.querySelector('#sort-contest-button').style.backgroundColor = 'transparent';\n        document.querySelector('#pathfinding-contest-button').style.backgroundColor = '#6c757d';\n        \n        ReactDOM.render(<PathfindingContest />, document.getElementById('main-content'));\n    }\n\n    render() {\n        return (\n            <div id='algo-contest'>\n                <div id='algo-contest-header'>\n                    <a href=\"http://benshinnick.github.io/algorithm-contest\" id='algo-contest-header-link'>AlgorithmContest</a>\n                    <button id='sort-contest-button' onClick={() => this.changePageContentToSortContest()}>Sorting</button>\n                    <button id='pathfinding-contest-button' onClick={() => this.changePageContentToPathfindingContest()}>Pathfinding</button>\n                </div>\n                <div id='main-content'></div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport AlgoContest from './AlgoContest/AlgoContest.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AlgoContest></AlgoContest>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}