{"version":3,"sources":["AlgoContest/SortContest/sortAlgorithms/InsertionSort.js","AlgoContest/SortContest/sortAlgorithms/MergeSort.js","AlgoContest/SortContest/sortAlgorithms/Quicksort.js","AlgoContest/SortContest/sortAlgorithms/BubbleSort.js","AlgoContest/SortContest/sortAlgorithms/HeapSort.js","AlgoContest/SortContest/sortAlgorithms/ShellSort.js","AlgoContest/SortContest/sortAlgorithms/SelectionSort.js","AlgoContest/SortContest/SortVisualizerContestant.jsx","AlgoContest/SortContest/SortContest.jsx","AlgoContest/PathfindingContest/Node/Node.jsx","AlgoContest/PathfindingContest/dataStructures/TieBreakingMinPriorityQueue.js","AlgoContest/PathfindingContest/dataStructures/DijkstraNode.js","AlgoContest/PathfindingContest/pathfindingAlgorithms/Dijkstra.js","AlgoContest/PathfindingContest/dataStructures/AStarNode.js","AlgoContest/PathfindingContest/pathfindingAlgorithms/AStar.js","AlgoContest/PathfindingContest/dataStructures/GreedyBestFirstNode.js","AlgoContest/PathfindingContest/pathfindingAlgorithms/GreedyBestFirst.js","AlgoContest/PathfindingContest/dataStructures/MinPriorityQueue.js","AlgoContest/PathfindingContest/dataStructures/BreadthFirstSeachNode.js","AlgoContest/PathfindingContest/pathfindingAlgorithms/BreadthFirst.js","AlgoContest/PathfindingContest/dataStructures/DepthFirstNode.js","AlgoContest/PathfindingContest/pathfindingAlgorithms/DepthFirst.js","AlgoContest/PathfindingContest/gridAlgorithms/BresenhamLineDrawAlgo.js","AlgoContest/PathfindingContest/PathfindingVisualizerContestant.jsx","AlgoContest/PathfindingContest/gridAlgorithms/RecursiveDivisionMaze.js","AlgoContest/PathfindingContest/gridAlgorithms/RandomWallsGeneration.js","AlgoContest/PathfindingContest/gridAlgorithms/PremadeMaps.js","AlgoContest/PathfindingContest/PathfindingContest.jsx","AlgoContest/AlgoContest.jsx","App.js","reportWebVitals.js","index.js"],"names":["getInsertionSortAnimations","array","animations","length","i","push","j","swap","insertionSort","index1","index2","temp","getMergeSortAnimations","auxiliaryArray","slice","mergeSort","mainArray","startIndex","endIndex","middleIndex","Math","floor","k","merge","getQuicksortAnimations","quicksort","lowIndex","highIndex","lowEndIndex","pivotIndex","min","max","random","pivot","done","quicksortPartition","getBubbleSortAnimations","isSwapped","bubbleSort","getHeapSortAnimations","maxHeapify","buildMaxHeap","lastElementIndex","heapSort","maxIndex","index","leftChild","rightChild","getShellSortAnimations","gap","first","shellSort","getSelectionSortAnimations","minIndex","selectionSort","PRIMARY_COLOR","SECONDARY_COLOR","SortVisualizerContestant","props","state","animationSpeedMS","algorithmType","allAlgorithmTypes","algorithmTypes","contestantNumber","numOfSwapsOrOverwrites","numOfComparisons","numOfAnimationSteps","arrayCopy","this","map","value","console","log","animationStepInfo","currentStepNumber","doNextMergeSortAnimationStep","doNextQuicksortAnimationStep","doNextShellSortAnimationStep","doNextInsertionSortAnimationStep","doNextHeapSortAnimationStep","doNextSelectionSortAnimationStep","doNextBubbleSortAnimationStep","animationCode","arrayBars","document","getElementsByClassName","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","ANIMATION_DELAY_MS","height","pivotLine","createElement","arrayContainer","getElementById","setAttribute","width","bottom","left","appendChild","remove","barOneIndex","barTwoIndex","lastAnimationStepNumber","algorithmPlace","handleAlgorithmIsNowFinished","createAlgorithmPlacelabel","placeLabelText","sortVisualizerContestant","placeLabel","createTextNode","statsLabel","statsLabelText","swapsOrOverwrites","placeLabelColor","borderColor","window","innerWidth","setState","display","destructAlgorithmPlaceLabel","destructAlgorithmStatsLabel","resetVisualizationStyling","updateAlgorithmType","className","id","onClick","algorithmDropDownButtonOnClick","removeMe","React","Component","ARRAY_MAX_VALUE","MAX_NUM_OF_CONTESTANTS","COUNTDOWN_DURATION_MS","ALGORITHM_TYPES","SortContest","setRef","ref","algoContestantRefs","handlePageResize","getFullPageWidthArraySize","isPreContest","isRandomArray","randomizeArray","generateNearlySortedArray","windowWidthSize","querySelector","textContent","numOfContestants","setAnimationSpeed","addOrRemoveStickyEffectOnSortContestHeader","header","sticky","pageYOffset","classList","add","removeContestant","bind","title","removeExtraContestants","disableDuringContestControlButtons","addEventListener","removeEventListener","newNumOfContestants","addComponent","randomIntFromInterval","resetSortContestPage","enableRemoveContestantButtons","disabled","innerText","contestantNum","getAlgorithmType","removeComponent","animationStandIn","sortVisualizerContestants","nextSortVisualizerContestant","insertBefore","disableRemoveContestantButtons","disablePreContestButtons","enableDuringContestControlButtons","startCountdown","allContestantAnimationData","getAllContestantAnimationDataAndSetAlgorithmStatInfo","runContestAnimations","scheduleContestFinishedCommands","getSortAnimations","setAllAlgorithmStatInfo","stepCounter","numOfFinishedContestants","placeNumber","hasContestantFinishedThisStep","doAnimationNextStep","scheduleAlgorithmIsNowFinishedCommands","allContestantMaxAnimationSteps","maxNumberOfAnimationSteps","handleContestIsNowFinished","getAnimationSpeed","enablePreContestSetupButtons","sortedArray","sort","a","b","createAlgorithmStatsLabel","numOfCountdownSeconds","innerHTML","fullPageWidthArraySize","numOfRepeatNumbers","numOfElements","ceil","clearAllAlgorithmStatsAndPlaceLabels","algorithmDropDownButtons","algorithmDropDownArrows","visibility","removeAlgorithmButtons","clearAllTimeouts","clearAllQuicksortPivotBars","allContestantPlaceInfo","findAllPlaceInformation","resetArrayBarsToCorrectHeights","numOfSteps","getNumOfAnimationsSteps","clearTimeout","startContest","addContestant","ContestantNumbers","genearateRandomArrayButtonOnClick","genearateNearySortedArrayButtonOnClick","addContestantOnClick","startContestButtonOnClick","skipToFinishButtonOnClick","Node","col","row","weight","isFinish","isStart","isLastRow","isLastColumn","onMouseDown","onMouseEnter","onMouseUp","extraClassName","parseFloat","Infinity","isLastRowClassName","isLastColumnClassName","PriorityQueue","values","val","priority","secondaryPriority","newNode","current","parentIndex","parent","enquePrioritize","pop","end","leftChildIndex","rightChildIndex","dequePrioritize","val1","val2","DijkstraNode","distance","previousNode","isVisited","prevNode","getDijkstraAnimations","grid","startNode","finishNode","dijkstraGrid","numRows","numCols","nodes","getDijkstraGrid","count","Counter","priorityQueue","setDistance","enqueue","isEmpty","closestNode","dequeue","getValue","getRow","getCol","setIsVisited","updateClosestNodeNeighbors","dijkstra","nextNode","currentNode","getPreviousNode","reconstructShortestPath","node","unvisitedNeighbors","neighbors","filter","neighbor","isNodeVisited","getUnvisitedNeighbors","altDistance","parseInt","getDistance","getWeight","increment","setPreviousNode","getCount","AStarNode","fScore","gScore","hScore","aStar","openSet","openSetHash","Set","setGScore","setFScore","startFScore","calculateHeuristic","delete","updateCurrentNodeNeighbors","nodeNeighbors","isWall","getNodeNeighbors","altGScore","getGScore","has","getFScore","node1","node2","abs","getAStarGrid","GreedyBestFirstNode","getGreedyBestFirstAnimations","aStarGrid","getGreedyBestFirstGrid","greedyBestFirst","BreadthFirstNode","isExplored","getBreadthFirstAnimations","breadthFirstGrid","getBreadthFirstGrid","setIsExplored","breadthFirstSearch","unexploredNeighbors","isNodeExplored","isNodeWall","getUnexploredNeighbors","DepthFirstNode","isDiscovered","getDepthFirstAnimations","depthFirstGrid","getDepthFirstGrid","stack","setIsDiscovered","undiscoveredNeighbors","getUndiscoveredNeighbors","depthFirstSearch","isNodeDiscovered","PathfindingVisualizerContestant","selectedNodeWeight","isMousePressed","isStartNodeSelected","isFinishNodeSelected","lastUpdatedNode","numOfNodesVisisted","lengthOfPath","lengthOfShortestPath","endNode","gridCopy","getAStarAnimations","prevRow","prevCol","addShortestPathLineToNode","nextRow","nextCol","allAnimationData","doNextAnimationStepInstantly","adjacentPathRow","adjacentPathCol","visitedMarker","pathfindingVisualizerContestant","shortestPathLabelText","shortestPathLabel","isStartOrFinishNode","placeStartNode","selectStartNode","placeFinishNode","selectFinishNode","updateGridNodeWithSelectedWeight","addHoverStylingToAllGridNodes","isLastUpdatedNodeAdjacentToCurrentNode","fillInSkippedNodes","finNodeCol","updateFinishNode","updateStartNode","allStartNodes","removeHoverStylingFromLastUpdatedNode","startNodeCol","allFinishNodes","currentRow","currentCol","updateGridNodeWeight","currRow","currCol","updatedNodesCoordinates","lineCoordinates","x1","y1","x2","y2","x","y","dx","dy","dx1","dy1","px","py","xe","ye","pixelLinePairs","getLinePixelCoordinates","updateMultipleNodeWeights","setStartNodeAtLastUpdatedNode","setFinishNodeAtLastUpdatedNode","resetMouseEvents","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","hoverType","allStartSelectedNodes","prevNodeRow","prevNodeCol","allPrevStartSelectedNodes","getRecursiveDivisionMazeWallCoordinates","mazeWallPoints","passagePoints","addInnerWalls","minRow","maxRow","minCol","maxCol","bisection","Bisect","passage","Passage","point","doesArrayIncludePair","pair","randomNumber","getRandomWallsCoordinates","wallCoordinates","r","c","doesWallAppearAtCurrentPosition","generateRandomWalls","getPremadeMap","mapType","fullMapGrid","lastFullMapColIndex","selectedMapGrid","GRID_NUM_ROWS","NODE_TYPES","PathfindingContest","getFullPageWidthGridNumCols","isEmptyGrid","resetPathfindingContestPage","setEmptyGrid","setResizedGridWithUpdatedNodesCopied","gridNumRows","gridNumCols","selectedNodeType","startNodeRow","startNodeColumn","finishNodeRow","finishNodeColumn","setNewGridWithNodeWeightUpdated","setNewGridWithStartNodeUpdated","setNewGridWithFinishNodeUpdated","setNewGridWithMultipleWeightNodesUpdated","newAlgoContestantRefs","disableGrids","clearPathAndVisitedNodes","enableGrids","shortestPathLength","pathLength","findShortestPathLength","getShortestPathLength","getPathfindingAnimations","emptyGrid","getEmptyGrid","totCols","finCol","totRows","startRow","startCol","finRow","resizedGrid","getResizedGridWithUpdatedNodesCopied","lastResizedGridIndex","moveStartNodeToBeInGrid","moveFinishNodeToBeInGrid","lastResizedGridCol","newStartNode","newFinishNode","newWeight","newGrid","getNewGridWithNodeWeightUpdated","getNewGridWithMultipleNodeWeightsUpdated","prevStartNodeRow","prevStartNodeCol","getNewGridWithStartNodeUpdated","prevFinishNodeRow","prevFinishNodeCol","getNewGridWithFinishNodeUpdated","visitedNodes","querySelectorAll","visitedNodesNoAnimation","shortestPathLines","removeLastAlgoContestantRef","pathVisualizerContestants","nextPathVisualizerContestant","toggleResetGridDropdownButtons","contestantAnimationData","doAllAnimationStepsAtOnce","toggleSelectNodeTypeDropdownButtons","nodeType","nodeTypeWeight","split","toggleSelectMazesAndMapsDropdownButtons","recursiveMazeWallCoordinates","mazeGrid","prmadeMapGridWeights","prmadeMapGrid","getNewGridWithAllNodeWeightsUpdated","randomWallsCoordinates","randomWallGrid","gridWeightString","contestantNumbers","resetButtonOnClick","resetGridButtonOnClick","clearPathButtonOnClick","mazesAndMapsButtonOnClick","recursiveMazeButtonOnClick","randomWallsButtonOnClick","setGridToPremadeMap","selectNodeTypeDropdownOnClick","nodeSelectionDropdownButtonOnClick","shortestPathLabels","notShortestPathLabels","gridContainers","pointerEvents","selectNodeTypeDropdownButtonContainer","mazesAndMapsDropdownButtonContainer","createInitialNode","createNode","gridWeights","prevStartNode","prevFinishNode","prevLastColIndex","updatedNode","AlgoContest","changePageContentToPathfindingContest","ReactDOM","render","href","changePageContentToSortContest","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC9xB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,GAAIA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAUA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAIA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACxvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAIA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAG,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAIA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7sB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAUA,IAAU,EAAG,EAAG,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAIA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,IACnxB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,IACvsB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,IACvvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrxB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KArCr0B,MACJ,KAAK,EACD4N,EAujmB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG5N,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7xB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,IACxmB,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtqB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAUA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/oB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtphpB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAGA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3ktjlplkvmpD7mB,MACJ,KAAK,EACD4N,EAsDD,CAAC,CAAC5N,IAAUA,IAAU,EAAG,EAAG,EAAG,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,KACnmD,CAACA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAUA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,KAC1zB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAU,GAAIA,IAAUA,IAAU,GAAIA,IAAUA,IAAUA,IAAU,GAAIA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAIA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAG,GAC1nC,CAACA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,GAAI,GAAI,EAAG,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,GAAI,EAAG,GAAI,GAAI,GAAIA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,KACj9B,CAACA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,GAAI,GAAI,EAAG,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAU,GAAIA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,EAAG,GAAI,GAAI,GAAIA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,KACvrC,CAACA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,KACj8B,CAACA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,KACztC,CAACA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAUA,IAAU,GAAIA,IAAUA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAGA,IAAU,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,KAC5gC,CAACA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,KACjsC,CAACA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAGA,IAAU,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,KACj8B,CAACA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAU,GAAI,GAAI,EAAG,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAU,GAAIA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAI,GAAI,EAAG,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,KAC5qC,CAACA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAG,EAAGA,IAAU,GAAI,GAAI,EAAG,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,EAAG,GAAI,GAAI,GAAIA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,KACr6B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAUA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAU,GAAIA,IAAUA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAIA,IAAUA,IAAU,GAAIA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAU,GAAIA,IAAU,GAAIA,IAAU,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAIA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAUA,IAAUA,IAAUA,IAAU,EAAGA,IAAU,EAAGA,IAAU,EAAG,GAC1tC,CAACA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,IAAU,EAAGA,IAAU,EAAG,EAAGA,IAAU,EAAGA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIA,IAAU,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGA,IAAU,EAAG,EAAG,EAAGA,KAC5xB,CAACA,IAAUA,IAAU,EAAG,EAAG,EAAG,EAAGA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAU,GAAI,GAAI,GAAI,GAAIA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,IAAUA,MA7D3mD,IAHA,IAAM6N,EAAsBD,EAAY,GAAG/c,OAAS,EAC9Cid,EAAkB,GAEhBR,EAAI,EAAGA,EAAIxL,IAAWwL,EAAG,CAC7BQ,EAAgB/c,KAAK,IACrB,IAAI,IAAIwc,EAAI,EAAGA,EAAIxL,IAAWwL,EAC1BO,EAAgBR,GAAGC,GAAKK,EAAYN,GAAGC,EAAIM,GAInD,OAAOC,E,UChBLC,GAAgB,GAChB7U,GAAwBoO,GAAgChR,mBAQxD6C,GAAkB,CACpB,WACA,YACA,2BACA,qBACA,wBAGE6U,GAAa,CACf,CAAC,QAAQ,YACT,CAAC,OAAO,YACR,CAAC,QAAQ,YACT,CAAC,OAAO,aACR,CAAC,QAAQ,aACT,CAAC,OAAO,eAGSC,G,kDACjB,WAAY7Z,GAAQ,IAAD,8BACf,cAAMA,IAuBViF,OAAS,SAACC,GACN,EAAKC,mBAAmBxI,KAAKuI,IAzBd,EA4SnBE,iBAAmB,WACZ0U,OAAkC,EAAK7Z,MAAM0N,SACzC,EAAK1N,MAAMqF,eACP,EAAKrF,MAAM8Z,aACV,EAAKC,8BACL,EAAKC,iBAGL,EAAKD,8BACL,EAAKE,yCAKjB,IAAIxU,EAAkB7B,OAAOC,WAEzBnC,SAASgE,cAAc,6BAA6BC,YADrDF,GAAmB,IACgD,cAGA,mBAIlE/D,SAASgE,cAAc,iCAAiCC,YADzDF,GAAmB,IACoD,cAGA,mBAGvE,EAAKzF,MAAM4F,iBAhWS,IAkWflE,SAASgE,cAAc,+BAA+BC,YADvDF,GAAmB,IACkD,MAGA,mBA9U7D,EAosBnBK,2CAA6C,WACzC,IAAIC,EAASrE,SAASY,eAAe,8BACjC0D,EAAS,GACVpC,OAAOC,YAAc,MACpBmC,EAAS,IAGTpC,OAAOqC,YAAcD,EACrBD,EAAOG,UAAUC,IAAI,UAErBJ,EAAOG,UAAUtD,OAAO,WA5sB5B,EAAK5C,MAAQ,CACTqN,KAAM,GACN6M,YAAaR,GACbS,aAAc,EACdvU,iBA9BuB,EA+BvBP,cAAc,EACdyU,aAAa,EACbM,iBAAkB,aAClBlH,mBAAoBvH,IACpB0O,cAAe,EACfC,iBAAkB,EAClBC,eAAgB,EAChBC,kBAAmB,GAEvB,EAAKC,gCAAkC,EAAKA,gCAAgCpU,KAArC,gBACvC,EAAKqU,+BAAiC,EAAKA,+BAA+BrU,KAApC,gBACtC,EAAKsU,gCAAkC,EAAKA,gCAAgCtU,KAArC,gBACvC,EAAKuU,yCAA2C,EAAKA,yCAAyCvU,KAA9C,gBAChD,EAAKD,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKnB,mBAAqB,GArBX,E,+DA4BnB,WAEI,IADA,IAAM2V,EAAwB,GACtBpe,EAAI,EAAGA,EAAIiE,KAAKV,MAAM4F,mBAAoBnJ,EAC9Coe,EAAsBne,KAAKgE,KAAKwE,mBAAmBzI,IAEvDiE,KAAKwE,mBAAqB2V,I,+BAG9B,WACInZ,SAAS4E,MAAQ,sBACjB5F,KAAKsZ,eACLtZ,KAAKqZ,8BACLrZ,KAAKyE,mBACLvB,OAAO6C,iBAAiB,SAAU/F,KAAKyE,kBACvCvB,OAAO6C,iBAAiB,SAAU/F,KAAKoF,8C,kCAG3C,WACIlC,OAAO8C,oBAAoB,SAAUhG,KAAKyE,kBAC1CvB,OAAO8C,oBAAoB,SAAUhG,KAAKoF,8C,0BAG9C,WACIpF,KAAKoD,SAAL,2BAAkBpD,KAAKV,OAAvB,IAA8BqF,cAAc,KAC5C3E,KAAKgH,2BACLhH,KAAKoa,eACLpa,KAAKiH,oCACLjH,KAAKqa,2BACLra,KAAKkH,iBACL,IAAMC,EAA6BnH,KAAKoH,uDACxCpH,KAAKqH,qBAAqBF,GAC1BnH,KAAKsH,gCAAgCH,K,6CAGzC,SAAgCA,GAG5B,IAHyD,IAAD,OAElDY,EAAiC,GAC/BhM,EAAI,EAAGA,EAAIiE,KAAKV,MAAM4F,mBAAoBnJ,EAC9CgM,EAA+B/L,KAAKmL,EAA2BpL,GAAGD,QAGtE,IAAMkM,EAA4BjL,KAAKW,IAAL,MAAAX,KAAYgL,GAC9C1G,YAAW,WACP,EAAK4G,+BACND,EAA4BhI,KAAKwE,mBAAmB,GAAG0D,oBAAsBqK,GAAgChR,sB,wCAGpH,WACIvB,KAAKmI,+BACLnI,KAAK8F,qCACL9F,KAAKsa,cACL,IAAI,IAAIve,EAAI,EAAGA,EAAIiE,KAAKV,MAAM4F,mBAAoBnJ,EAC9CiE,KAAKwE,mBAAmBzI,GAAGyM,4BAC3BxI,KAAKwE,mBAAmBzI,GAAGyL,yBAAyB,GAAI,GAAI,GAAI,GAEpExH,KAAKoD,SAAL,2BAAkBpD,KAAKV,OAAvB,IAA8BqF,cAAc,O,4BAGhD,WAEI,IADA,IAAI8D,EAAwBtE,GAAwB,IADvC,WAELpI,GACJsF,YAAW,WACPL,SAASY,eAAe,6BAA6B8G,UAArD,UAAoED,EAAwB1M,KACzF,IAAJA,IAHCA,EAAI,EAAGA,EAAI0M,IAAyB1M,EAAI,EAAxCA,GAMRsF,YAAW,WACPL,SAASY,eAAe,6BAA6B8G,UAAY,QAClEvE,M,kEAGP,WAQI,IAPA,IAAMgD,EAA6B,GAC7BoT,Eb7HP,SAA+B5N,EAAMC,EAAWC,GACnD,IAAMiE,EAAYH,EAAahE,GAG/B,OAFA4C,EAAMuB,EAAWlE,EAAWC,EAAY,IA4F5C,SAAgCF,EAAME,GAIlC,IAHA,IAAIqB,EAAcvB,EAAKE,EAAWvC,KAAKuC,EAAWxC,KAC9CmQ,EAAa,EAEM,OAAhBtM,GACHsM,GAActM,EAAYa,YAC1Bb,EAAcA,EAAYC,kBAG9B,OAAOqM,EAnGAC,CAAuB3J,EAAWjE,GADjB,Ea0HO6N,CACvB1a,KAAKV,MAAMqN,KACX3M,KAAKV,MAAMqN,KAAK3M,KAAKV,MAAMqa,cAAc3Z,KAAKV,MAAMsa,iBACpD5Z,KAAKV,MAAMqN,KAAK3M,KAAKV,MAAMua,eAAe7Z,KAAKV,MAAMwa,mBAGjD/d,EAAI,EAAGA,EAAIiE,KAAKV,MAAM4F,mBAAoBnJ,EAAG,CACjDoL,EAA2BpL,GAAKiE,KAAKwE,mBAAmBzI,GAAG4e,yBACvD3a,KAAKV,MAAMqN,KAAK3M,KAAKV,MAAMqa,cAAc3Z,KAAKV,MAAMsa,iBACpD5Z,KAAKV,MAAMqN,KAAK3M,KAAKV,MAAMua,eAAe7Z,KAAKV,MAAMwa,mBAMzD,IAHA,IAAIjH,EAAqB,EACrBC,EAAe,EACfhT,EAAsB,EAClB7D,EAAI,EAAGA,EAAIkL,EAA2BpL,GAAGD,SAAUG,EAAE,CACzD,IAAM6E,EAAgBqG,EAA2BpL,GAAGE,GAAG,GACvD,GAAqB,MAAlB6E,EACC+R,IACA/S,SAEC,GAAqB,QAAlBgB,EAAyB,CAC7B,IAAMwJ,EAAMnD,EAA2BpL,GAAGE,GAAG,GACvCoO,EAAMlD,EAA2BpL,GAAGE,GAAG,GAC7C6W,GAAgBjE,SAAS7O,KAAKV,MAAMqN,KAAKrC,GAAKD,GAAKE,QACnDzK,KAGRE,KAAKwE,mBAAmBzI,GAAGyL,wBAAwBqL,EAAoBC,EAAcyH,EAAoBza,GAG7G,OAAOqH,I,kCAGX,SAAqBA,GAIjB,IAHA,IAAIM,EAAc,EACdC,EAA2B,EAC3BC,EAAc,EACZD,EAA2B1H,KAAKV,MAAM4F,kBAAkB,CAE1D,IADA,IAAI0C,GAAgC,EAC5B7L,EAAI,EAAGA,EAAIiE,KAAKV,MAAM4F,mBAAoBnJ,EAC3C0L,EAAcN,EAA2BpL,GAAGD,SAGvC2L,IAAgBN,EAA2BpL,GAAGD,OAalDkE,KAAKwE,mBAAmBzI,GAAG8L,oBACvBV,EAA2BpL,GAAG0L,GAAcA,IAbhDC,KACqC,IAAlCE,GACCD,IACAC,GAAgC,EAChC5H,KAAKwE,mBAAmBzI,GAAG+L,uCAAuCL,EAAaE,IAG/E3H,KAAKwE,mBAAmBzI,GAAG+L,uCAAuCL,EAAaE,KAU3FF,O,0BAIR,WACI,IAAMmT,EAAYC,KACZC,EAAU3B,KAKV4B,EAASD,EAAU,EACzB9a,KAAKoD,SAAL,2BACOpD,KAAKV,OADZ,IAEIqN,KAAMiO,EACNnB,YAAaqB,EACbnB,aAxMsB,EAyMtBC,gBAxMsB,EAyMtBC,cARWmB,EASXlB,iBAAkBiB,EAClB3B,aAAa,O,kDAIrB,WACI,IAAMzM,EAAO3M,KAAKV,MAAMqN,KAClBsO,EAAWjb,KAAKV,MAAMqa,aACtBuB,EAAWlb,KAAKV,MAAMsa,gBACtBuB,EAASnb,KAAKV,MAAMua,cACpBkB,EAAS/a,KAAKV,MAAMwa,iBACpBgB,EAAU3B,KACZiC,EAAcC,GAAqC1O,GAGjD2O,EAAuBF,EAAY,GAAGtf,OAAS,EAClDof,EAAWI,IACVF,EAAcpb,KAAKub,wBAAwBH,EAAaH,IAEzDF,EAASO,IACRF,EAAcpb,KAAKwb,yBAAyBJ,EAAaD,IAG7Dnb,KAAKoD,SAAL,2BACOpD,KAAKV,OADZ,IAEIqN,KAAMyO,EACN3B,YAAaqB,EACb1B,aAAa,O,qCAIrB,SAAwBgC,EAAaH,GACjC,IAAItO,EAAOyO,EAAY3e,QACnBgf,EAAqBL,EAAY,GAAGtf,OAAS,EAC3CuS,EAAO1B,EAAKsO,GAAUQ,GACtBC,EAAY,2BACXrN,GADW,IAEd9D,OAAQ,EACRE,SAAS,IAUb,OARAkC,EAAKsO,GAAUQ,GAAsBC,EAErC1b,KAAKoD,SAAL,2BACOpD,KAAKV,OADZ,IAEIqa,aAAcsB,EACdrB,gBAAiB6B,KAGd9O,I,sCAGX,SAAyByO,EAAaD,GAClC,IAAIxO,EAAOyO,EAAY3e,QACnBgf,EAAqBL,EAAY,GAAGtf,OAAS,EAC3CuS,EAAO1B,EAAKwO,GAAQM,GACpBE,EAAa,2BACZtN,GADY,IAEf9D,OAAQ,EACRC,UAAU,IAUd,OARAmC,EAAKwO,GAAQM,GAAsBE,EAEnC3b,KAAKoD,SAAL,2BACOpD,KAAKV,OADZ,IAEIua,cAAesB,EACfrB,iBAAkB2B,KAGf9O,I,6CAGX,SAAgCrC,EAAKD,EAAKuR,GACtC,IAAMC,EAAUC,GAAgC9b,KAAKV,MAAMqN,KAAMrC,EAAKD,EAAKuR,GAC3E5b,KAAKoD,SAAL,2BACOpD,KAAKV,OADZ,IAEIqN,KAAMkP,EACNzC,aAAa,IACdpZ,KAAKqZ,iC,sDAGZ,SAAyChE,EAAyBuG,GAC9D,IAAMC,EAAUE,GAAyC/b,KAAKV,MAAMqN,KAAM0I,EAAyBuG,GACnG5b,KAAKoD,SAAL,2BACOpD,KAAKV,OADZ,IAEIqN,KAAMkP,EACNzC,aAAa,O,4CAKrB,SAA+B9O,EAAKD,GAChCrK,KAAKqZ,8BACL,IAAM2C,EAAmBhc,KAAKV,MAAMqa,aAC9BsC,EAAmBjc,KAAKV,MAAMsa,gBAC9BiC,EAAUK,GAA+Blc,KAAKV,MAAMqN,KAAMrC,EAAKD,EAAK2R,EAAkBC,GAC5Fjc,KAAKoD,SAAL,2BACOpD,KAAKV,OADZ,IAEIqN,KAAMkP,EACNzC,aAAa,EACbO,aAAcrP,EACdsP,gBAAiBvP,O,6CAIzB,SAAgCC,EAAKD,GACjCrK,KAAKqZ,8BACL,IAAM8C,EAAoBnc,KAAKV,MAAMua,cAC/BuC,EAAoBpc,KAAKV,MAAMwa,iBAC/B+B,EAAUQ,GAAgCrc,KAAKV,MAAMqN,KAAMrC,EAAKD,EAAK8R,EAAmBC,GAC9Fpc,KAAKoD,SAAL,2BACOpD,KAAKV,OADZ,IAEIqN,KAAMkP,EACNzC,aAAa,EACbS,cAAevP,EACfwP,iBAAkBzP,O,sCA2C1B,WAEI,IADA,IAAMiS,EAAetb,SAASub,iBAAiB,YACvCxgB,EAAI,EAAGA,EAAIugB,EAAaxgB,SAAUC,EACtCugB,EAAavgB,GAAGyJ,UAAUtD,OAAO,WAGrC,IADA,IAAMsa,EAA0Bxb,SAASub,iBAAiB,yBAClDxgB,EAAI,EAAGA,EAAIygB,EAAwB1gB,SAAUC,EACjDygB,EAAwBzgB,GAAGyJ,UAAUtD,OAAO,wBAGhD,IADA,IAAMua,EAAoBzb,SAASub,iBAAiB,kBAC5CxgB,EAAI,EAAGA,EAAI0gB,EAAkB3gB,SAAUC,EAC3C0gB,EAAkB1gB,GAAGmG,W,8BAI7B,SAAiBsE,GAEb,IAF6B,IAAD,OAEpBzK,EAAIyK,EAAgB,EAAGzK,EAAIiE,KAAKV,MAAM4F,iBAAmB,IAAKnJ,EAClEiE,KAAKwE,mBAAmBzI,GAAG0H,oBAAoBzD,KAAKwE,mBAAmBzI,EAAE,GAAG0K,oBAEhF,IAAMR,EAAsBjG,KAAKV,MAAM4F,iBAAmB,EAE1DlF,KAAKoD,SAAL,2BAAkBpD,KAAKV,OAAvB,IAA8B4F,iBAAkBe,KAAsB,WAClE,EAAKoT,8BACL,EAAKqD,iCAGT,IAAI/V,EAAmB3F,SAASU,cAAc,OAC9CiF,EAAiB9E,aAAa,QAAS,0CACvC,IAAI8a,EAA4B3b,SAASY,eAAe,2BACpDgb,EAA+B5b,SAASY,eAAT,iCAAkD4E,IACrFmW,EAA0B7V,aAAaH,EAAkBiW,GACzDvb,YAAW,WACPsF,EAAiBzE,WAClB,KAEwB,IAAxB+D,GACCjG,KAAK+G,iCAIT/F,SAASY,eAAe,8BAA8B0E,UAAW,EAC9DpD,OAAOC,YAAa,IACnBnC,SAASY,eAAe,8BAA8B2E,UAAY,MAGlEvF,SAASY,eAAe,8BAA8B2E,UAAY,mB,uCAI1E,WACIvG,KAAKqZ,8BACLrZ,KAAK4J,iB,gCAGT,YACiE,IAA1D5I,SAASY,eAAe,qBAAqB0E,UAC5CuW,O,oCAIR,WACIA,KACA7c,KAAKqZ,8BACLrZ,KAAKoD,SAAL,2BAAkBpD,KAAKV,OAAvB,IAA8BqF,cAAc,O,oCAGhD,WACIkY,KACA7c,KAAKqZ,8BACLrZ,KAAKsZ,iB,uCAIT,WACItZ,KAAKoJ,mBACLpJ,KAAKqa,2BACLra,KAAK+I,uCAGL,IADA,IAAIO,EAAyBtJ,KAAKuJ,0BAC1BxN,EAAI,EAAGA,EAAIiE,KAAKV,MAAM4F,mBAAoBnJ,EAAG,CACjD,IAAM+gB,EAA0B9c,KAAKwE,mBAAmBzI,GAAG4e,yBACvD3a,KAAKV,MAAMqN,KAAK3M,KAAKV,MAAMqa,cAAc3Z,KAAKV,MAAMsa,iBACpD5Z,KAAKV,MAAMqN,KAAK3M,KAAKV,MAAMua,eAAe7Z,KAAKV,MAAMwa,mBAEzD9Z,KAAKwE,mBAAmBzI,GAAGghB,0BAA0BD,GACrD,IAAMxa,EAAiBgH,EAAuBvN,GAAG,GACjDiE,KAAKwE,mBAAmBzI,GAAGwG,6BAA6BD,GAG5DtC,KAAKiI,+B,8BAGT,WAII,IADA,IAAItE,EAAKtC,YAAW,cAAe,GAC5BsC,KACHgG,aAAahG,K,qCAIrB,WAGI,IADA,IAAM2F,EAAyB,GACvBvN,EAAI,EAAGA,EAAIiE,KAAKV,MAAM4F,mBAAoBnJ,EAAG,CACjD,IAAMyK,EAAgBzK,EAAE,EAClB0N,EAAazJ,KAAKwE,mBAAmBzI,GAAG2N,0BAC9CJ,EAAuBtN,KAAK,CAACwK,EAAeiD,IAIhDH,EAAuBjB,MAAK,SAASC,EAAEC,GACnC,OAAOD,EAAE,GAAGC,EAAE,MAGlB,IAAI,IAAIxM,EAAI,EAAGA,EAAIiE,KAAKV,MAAM4F,mBAAoBnJ,EAC9C,GAAGA,EAAI,EACH,GAAGuN,EAAuBvN,GAAG,KAAOuN,EAAuBvN,EAAE,GAAG,GAAI,CAChE,IAAI4L,EAAc2B,EAAuBvN,EAAE,GAAG,GAC9CuN,EAAuBvN,GAAG,GAAK4L,MAE9B,CACD,IAAIA,EAAc2B,EAAuBvN,EAAE,GAAG,GAAK,EACnDuN,EAAuBvN,GAAG,GAAK4L,MAGlC,CAED2B,EAAuBvN,GAAG,GADR,EAY1B,OALAuN,EAAuBjB,MAAK,SAASC,EAAEC,GACnC,OAAOD,EAAE,GAAGC,EAAE,MAIXe,I,2CAGX,YACgF,IAAzEtI,SAASY,eAAe,oCAAoC0E,UAC3D0W,O,gDAIR,SAAmCC,GAC/B,IACIC,EADiBD,EAASE,MAAM,KACF,GACZ,QAAnBD,IACCA,EAAiB,YAErBld,KAAKoD,SAAL,2BAAkBpD,KAAKV,OAAvB,IAA8Boa,iBAAkBuD,EAAUzK,mBAAoB0K,KAC9EF,O,uCAGJ,YACqE,IAA9Dhc,SAASY,eAAe,yBAAyB0E,UAChD8W,O,wCAIR,WAA8B,IAAD,OACzBA,KACApd,KAAKqZ,8BACL,IAAMuB,EAAYC,KACZC,EAAU3B,KAChBnZ,KAAKoD,SAAL,2BAAkBpD,KAAKV,OAAvB,IAA8BqN,KAAMiO,EAAWnB,YAAaqB,KAAU,WAClE,IAAMuC,EAA+BhG,GACjC,EAAK/X,MAAMka,YACXsB,EACA,EAAKxb,MAAMqN,KAthBO,GACA,GAshBlB,EAAKrN,MAAMqN,KAAKqM,GAAmB8B,EAAU,IAE3CwC,EAAWvB,GAAyCnB,EAAWyC,EAA8BpS,KACnG,EAAK7H,SAAL,2BACO,EAAK9D,OADZ,IAEIqN,KAAM2Q,EACN3D,aA7hBkB,EA8hBlBC,gBA7hBkB,EA8hBlBC,cAAeb,EACfc,iBAAkBgB,EAAU,U,iCAKxC,SAAoBlC,GAAU,IAAD,OACzBwE,KACApd,KAAKqZ,8BACL,IAAMuB,EAAYC,KACZC,EAAU3B,KACVoE,EAAuB5E,GAAc3Y,KAAKV,MAAMka,YAAasB,EAASlC,GAC5E5Y,KAAKoD,SAAL,2BAAkBpD,KAAKV,OAAvB,IAA8BqN,KAAMiO,EAAWnB,YAAaqB,KAAU,WAClE,IAAM0C,EAAgBC,GAClB7C,EACA2C,EACA,EAAKje,MAAMqN,KA/iBO,GACA,GA+iBlB,EAAKrN,MAAMqN,KAAKqM,GAAmB8B,EAAU,IAEjD,EAAK1X,SAAL,2BACO,EAAK9D,OADZ,IAEIqN,KAAM6Q,EACN7D,aArjBkB,EAsjBlBC,gBArjBkB,EAsjBlBC,cAAeb,EACfc,iBAAkBgB,EAAU,U,sCAKxC,WAA4B,IAAD,OACvBsC,KACApd,KAAKqZ,8BACL,IAAMuB,EAAYC,KACZC,EAAU3B,KAChBnZ,KAAKoD,SAAL,2BAAkBpD,KAAKV,OAAvB,IAA8BqN,KAAMiO,EAAWnB,YAAaqB,KAAU,WAClE,IAAM4C,EAAyBrF,GAC3B,EAAK/Y,MAAMka,YACXsB,EACA,EAAKxb,MAAMqN,KAtkBO,GACA,GAskBlB,EAAKrN,MAAMqN,KAAKqM,GAAmB8B,EAAU,IAE3C6C,EAAiB5B,GAAyCnB,EAAW8C,EAAwBzS,KACnG,EAAK7H,SAAL,2BACO,EAAK9D,OADZ,IAEIqN,KAAMgR,EACNhE,aA7kBkB,EA8kBlBC,gBA7kBkB,EA8kBlBC,cAAeb,EACfc,iBAAkBgB,EAAU,U,kCAKxC,WACI9a,KAAKqZ,8BACLrZ,KAAK6J,kB,2BAGT,WAAiB,IAAD,OACN5D,EAAsBjG,KAAKV,MAAM4F,iBAAmB,EAC1DlF,KAAKoD,SAAL,2BAAkBpD,KAAKV,OAAvB,IAA8B4F,iBAAkBe,KAAsB,WAClE,EAAKoT,8BACL,EAAKhT,mCAhmBc,IAkmBpBJ,GACCjF,SAASY,eAAe,8BAA8B2E,UAAY,MAClEvF,SAASY,eAAe,8BAA8B0E,UAAW,IAGjEtF,SAASY,eAAe,8BAA8B0E,UAAW,EAC9DpD,OAAOC,YAAc,IACpBnC,SAASY,eAAe,8BAA8B2E,UAAY,MAGlEvF,SAASY,eAAe,8BAA8B2E,UAAY,oB,8BAO9E,WAGI,IAFA,IAAIqX,EAAmB,IAEfrF,EAAI,EAAGA,EAAIvY,KAAKV,MAAMka,cAAejB,EACzC,IAAI,IAAIC,EAAI,EAAGA,EAAIxY,KAAKV,MAAMma,cAAejB,EAChC,IAANA,EACCoF,GAAgB,WAAQ5S,WAAWhL,KAAKV,MAAMqN,KAAK4L,GAAGC,GAAGjO,QAAzC,MAEZiO,IAAMxY,KAAKV,MAAMma,YAAc,EACnCmE,GAAgB,UAAO5S,WAAWhL,KAAKV,MAAMqN,KAAK4L,GAAGC,GAAGjO,QAAxC,MAEfqT,GAAgB,UAAO5S,WAAWhL,KAAKV,MAAMqN,KAAK4L,GAAGC,GAAGjO,QAAxC,QAI7BqT,GAAoB,IACpBzd,QAAQC,IAAIwd,K,oBAGhB,WAEI,IAFM,IAAD,OACCC,EAAoB,GAClB9hB,EAAI,EAAGA,EAAIiE,KAAKV,MAAM4F,mBAAoBnJ,EAC9C8hB,EAAkB7hB,KAAKD,EAAE,GAI7B,OAFAoE,QAAQC,IAAIyd,GAGR,sBAAKna,UAAU,sBAAf,UACI,sBAAKC,GAAG,6BAAR,UACI,wBAAQA,GAAG,4BAA4BC,QAAS,kBAAM,EAAKsG,6BAA3D,mBACA,sBAAKvG,GAAG,sBAAR,UACI,yBAAQA,GAAG,oBAAoBC,QAAS,kBAAM,EAAKka,sBAAnD,UACI,qBAAKna,GAAG,yBAAR,mBACA,qBAAKA,GAAG,4BAAR,uBAEJ,sBAAKA,GAAG,8BAAR,UACI,wBAAQD,UAAU,6BAA6BE,QAAS,kBAAM,EAAKma,0BAAnE,wBACA,wBAAQra,UAAU,6BAA6BE,QAAS,kBAAM,EAAKoa,0BAAnE,8BAGR,sBAAKra,GAAG,0BAAR,UACI,yBAAQA,GAAG,wBAAwBC,QAAS,kBAAM,EAAKqa,6BAAvD,UACI,qBAAKta,GAAG,6BAAR,0BACA,qBAAKA,GAAG,gCAAR,uBAEJ,sBAAKA,GAAG,kCAAR,UACI,wBAAQD,UAAU,iCAAiCE,QAAS,kBAAM,EAAKsa,8BAAvE,4BACA,wBAAQxa,UAAU,iCAAiCE,QAAS,kBAAM,EAAKua,4BAAvE,0BACA,wBAAQza,UAAU,iCAAiCE,QAAS,kBAAM,EAAKwa,oBAAoB,IAA3F,gCACA,wBAAQ1a,UAAU,iCAAiCE,QAAS,kBAAM,EAAKwa,oBAAoB,IAA3F,+BACA,wBAAQ1a,UAAU,iCAAiCE,QAAS,kBAAM,EAAKwa,oBAAoB,IAA3F,oCAIR,sBAAKza,GAAG,4BAAR,UACI,yBAAQA,GAAG,mCAAmCC,QAAS,kBAAM,EAAKya,iCAAlE,UACI,qBAAK1a,GAAG,kCAAR,SACI,qBAAKA,GAAG,wBAAwBD,UAAS,uBAAkB1D,KAAKV,MAAMoa,sBAE1E,qBAAK/V,GAAG,+BAAR,8BACA,qBAAKA,GAAG,gCAAR,uBAEA,qBAAKA,GAAG,kCAAR,SACKsV,GAAWhZ,KAAI,SAACgd,GAAD,OACfA,EAAS,KAAO,EAAK3d,MAAMoa,iBACxB,yBAEI/V,GAAG,iCACHC,QAAS,kBAAM,EAAK0a,mCAAmCrB,EAAS,KAHpE,UAIC,qBAAKtZ,GAAG,wBAAwBD,UAAS,uBAAkBuZ,EAAS,MACrE,qBAAKtZ,GAAG,gDAAR,SAAyDsZ,EAAS,KAClE,qBAAKtZ,GAAG,kDAAR,SAA2DsZ,EAAS,OAL3DA,EAAS,IAOhB,aAIlB,wBAAQtZ,GAAG,6BAA6BC,QAAS,kBAAM,EAAKqG,wBAA5D,4BACA,qBAAKtG,GAAG,gCAAR,SAAyC3D,KAAKV,MAAM4F,mBACpD,wBAAQvB,GAAG,6BAA6BC,QAAS,kBAAM,EAAKuG,6BAA5D,+BAEJ,qBAAKxG,GAAI,0BAAT,SACKka,EAAkB5d,KAAI,SAAAN,GAAgB,OACnC,cAAC,GAAD,CAEI4E,IAAK,EAAKD,OACVqI,KAAM,EAAKrN,MAAMqN,KACjB6F,mBAAoB,EAAKlT,MAAMkT,mBAC/BhT,cAAe4E,IAAiBzE,EAAmB,GAAKyE,GAAgBtI,QACxE4D,eAAgB0E,GAChBzE,iBAAkBA,EAClBuV,qBAAsB,EAAK6E,gCAC3BxD,0BAA2B,EAAK2D,yCAChCvF,gBAAiB,EAAKqF,+BACtBtF,iBAAkB,EAAKuF,gCACvBnW,SAAU,EAAK4B,kBAXV/F,EAAmB,a,yCAkChD,WACIK,KAAKmI,+BACLnI,KAAKqG,gCACLrG,KAAK8F,qCACL9F,KAAK+I,uCACL/I,KAAKqa,2BACLrZ,SAASY,eAAe,mCAAmCT,MAAMkC,QAAU,OAC3ErC,SAASY,eAAe,mCAAmCT,MAAMkC,QAAU,OAC3ErC,SAASY,eAAe,+BAA+BT,MAAMkC,QAAU,OACvE,IAAI,IAAItH,EAAI,EAAGA,EAAIiE,KAAKV,MAAM4F,mBAAoBnJ,EAC9CiE,KAAKwE,mBAAmBzI,GAAGyH,8B,kDAInC,WACI,IAAI,IAAIzH,EAAI,EAAGA,EAAIiE,KAAKV,MAAM4F,mBAAoBnJ,EAC9CiE,KAAKwE,mBAAmBzI,GAAGuH,8BAC3BtD,KAAKwE,mBAAmBzI,GAAGwH,8BAG/B,IADA,IAAIgb,EAAqBvd,SAASub,iBAAiB,8BAC3CxgB,EAAI,EAAGA,EAAIwiB,EAAmBziB,SAAUC,EAC5CwiB,EAAmBxiB,GAAGmG,SAG1B,IADA,IAAIsc,EAAwBxd,SAASub,iBAAiB,kCAC9CxgB,EAAI,EAAGA,EAAIyiB,EAAsB1iB,SAAUC,EAC/CyiB,EAAsBziB,GAAGmG,W,0BAIjC,WAEI,IADA,IAAMuc,EAAiBzd,SAASC,uBAAuB,kBAC/ClF,EAAI,EAAGA,EAAIiE,KAAKV,MAAM4F,mBAAoBnJ,EAC9C0iB,EAAe1iB,GAAGoF,MAAMud,cAAgB,S,yBAIhD,WAEI,IADA,IAAMD,EAAiBzd,SAASC,uBAAuB,kBAC/ClF,EAAI,EAAGA,EAAIiE,KAAKV,MAAM4F,mBAAoBnJ,EAC9C0iB,EAAe1iB,GAAGoF,MAAMud,cAAgB,Q,sCAIhD,WACI1d,SAASY,eAAe,6BAA6B0E,UAAW,EAChEtF,SAASY,eAAe,qBAAqB0E,UAAW,EACxDtF,SAASY,eAAe,yBAAyB0E,UAAW,EAC5DtF,SAASY,eAAe,oCAAoC0E,UAAW,EACvEtF,SAASY,eAAe,8BAA8B0E,UAAW,EACjEtG,KAAK+G,iCAGL,IADA,IAAMiC,EAA2BhI,SAASC,uBAAuB,kCACzDlF,EAAI,EAAGA,EAAIiN,EAAyBlN,SAAUC,EAClDiN,EAAyBjN,GAAGuK,UAAW,EAG3C,IADA,IAAM2C,EAA0BjI,SAASC,uBAAuB,kBACxDlF,EAAI,EAAGA,EAAIkN,EAAwBnN,SAAUC,EACjDkN,EAAwBlN,GAAGoF,MAAM+H,WAAa,W,0CAItD,WACIlI,SAASY,eAAe,6BAA6B8G,UAAY,QACjE1H,SAASY,eAAe,6BAA6B0E,UAAW,EAChEtF,SAASY,eAAe,qBAAqB0E,UAAW,EACxDtF,SAASY,eAAe,yBAAyB0E,UAAW,EAC5DtF,SAASY,eAAe,oCAAoC0E,UAAW,EAEpEtG,KAAKV,MAAM4F,iBA7yBS,EA8yBnBlE,SAASY,eAAe,8BAA8B0E,UAAW,GAGjEtF,SAASY,eAAe,8BAA8B0E,UAAW,EACjEtF,SAASY,eAAe,8BAA8B2E,UAAY,OAItE,IADA,IAAMyC,EAA2BhI,SAASC,uBAAuB,kCACzDlF,EAAI,EAAGA,EAAIiN,EAAyBlN,SAAUC,EAClDiN,EAAyBjN,GAAGuK,UAAW,EAG3C,IADA,IAAM2C,EAA0BjI,SAASC,uBAAuB,kBACxDlF,EAAI,EAAGA,EAAIkN,EAAwBnN,SAAUC,EACjDkN,EAAwBlN,GAAGoF,MAAM+H,WAAa,Y,gDAItD,WACIlI,SAASY,eAAe,8BAA8B0E,UAAW,I,+CAGrE,WACItF,SAASY,eAAe,8BAA8B0E,UAAW,I,4CAGrE,WAEI,IADA,IAAM6C,EAAyBnI,SAASC,uBAAuB,sBACvDlF,EAAI,EAAGA,EAAIoN,EAAuBrN,SAAUC,EAChDoN,EAAuBpN,GAAGuK,UAAW,I,2CAI7C,WACI,GAAGtG,KAAKV,MAAM4F,iBAAmB,EAE7B,IADA,IAAMiE,EAAyBnI,SAASC,uBAAuB,sBACvDlF,EAAI,EAAGA,EAAIoN,EAAuBrN,SAAUC,EAChDoN,EAAuBpN,GAAGuK,UAAW,M,GA5zBLvC,IAAMC,WAk0BhDgZ,GAAsC,WACxC,IAAM2B,EAAwC3d,SAASY,eAAe,mCACX,SAAxD+c,EAAsCxd,MAAMkC,QAC3Csb,EAAsCxd,MAAMkC,QAAU,QAGtDsb,EAAsCxd,MAAMkC,QAAU,QAIxD+Z,GAA0C,WAC5C,IAAMwB,EAAsC5d,SAASY,eAAe,mCACX,SAAtDgd,EAAoCzd,MAAMkC,QACzCub,EAAoCzd,MAAMkC,QAAU,QAGpDub,EAAoCzd,MAAMkC,QAAU,QAItDwZ,GAAiC,WACnC,IAAM+B,EAAsC5d,SAASY,eAAe,+BACX,SAAtDgd,EAAoCzd,MAAMkC,QACzCub,EAAoCzd,MAAMkC,QAAU,QAGpDub,EAAoCzd,MAAMkC,QAAU,QAItD8V,GAA8B,WAChC,OAAOpc,KAAKC,OAAOkG,OAAOC,WAAa,IAAM,KAG3C0X,GAAe,WAYjB,IAXA,IAAMlO,EAAO,GACPmO,EAAU3B,KAKV4B,EAASD,EAAU,EAKhBxQ,EAAM,EAAGA,EATF0O,GASiB1O,IAAO,CAEpC,IADA,IAAM0K,EAAa,GACV3K,EAAM,EAAGA,EAAMyQ,EAASzQ,IAC7B2K,EAAWhZ,KAAK6iB,GAAkBvU,EAAKD,EAZ/B2O,GAY6C8B,EAv4B/B,EACA,EA63BfE,EASmFD,EALxE,IAOtBpO,EAAK3Q,KAAKgZ,GAEd,OAAOrI,GAGLkS,GAAoB,SAACvU,EAAKD,EAAK2Q,EAASF,EAASG,EAAUC,EAAUC,EAAQJ,EAAQxQ,GACvF,MAAO,CACHD,MACAD,MACAE,SACAE,QAASH,IAAQ2Q,GAAY5Q,IAAQ6Q,EACrC1Q,SAAUF,IAAQ6Q,GAAU9Q,IAAQ0Q,EACpCrQ,UAAWJ,IAAQ0Q,EAAU,EAC7BrQ,aAAcN,IAAQyQ,EAAU,IAIlCgE,GAAa,SAACxU,EAAKD,EAAK2Q,EAASF,EAASvQ,GAC5C,MAAO,CACHD,MACAD,MACAE,SACAE,SAAS,EACTD,UAAU,EACVE,UAAWJ,IAAQ0Q,EAAU,EAC7BrQ,aAAcN,IAAQyQ,EAAU,IAIlCgB,GAAkC,SAACnP,EAAMrC,EAAKD,EAAKuR,GACrD,IAAMC,EAAUlP,EAAKlQ,QACf4R,EAAOwN,EAAQvR,GAAKD,GACpBoB,EAAO,2BACR4C,GADQ,IAEX/D,IAAKA,EACLD,IAAKA,EACLI,SAAS,EACTD,UAAU,EACVD,OAAQqR,IAGV,OADAC,EAAQvR,GAAKD,GAAOoB,EACboQ,GAGLE,GAA2C,SAACpP,EAAM0I,EAAyBuG,GAE7E,IADA,IAAMC,EAAUlP,EAAKlQ,QACbV,EAAI,EAAGA,EAAIsZ,EAAwBvZ,SAAUC,EAAG,CACpD,IAAMuO,EAAMuE,SAASwG,EAAwBtZ,GAAG,IAC1CsO,EAAMwE,SAASwG,EAAwBtZ,GAAG,IAC1CwO,EAASS,WAAW4Q,GACpBvN,EAAOwN,EAAQvR,GAAKD,GACpBoB,EAAO,2BACR4C,GADQ,IAEX/D,IAAKA,EACLD,IAAKA,EACLI,SAAS,EACTD,UAAU,EACVD,OAAQA,IAEVsR,EAAQvR,GAAKD,GAAOoB,EAExB,OAAOoQ,GAGL4B,GAAsC,SAAC9Q,EAAMoS,EAAanS,EAAWC,GAEvE,IADA,IAAMgP,EAAUlP,EAAKlQ,QACb8b,EAAI,EAAGA,EAAI5L,EAAK7Q,SAAUyc,EAC9B,IAAI,IAAIC,EAAI,EAAGA,EAAI7L,EAAK,GAAG7Q,SAAU0c,EAAG,CACpC,IAAIjO,EAASwU,EAAYxG,GAAGC,IACzBD,IAAM3L,EAAUtC,KAAOkO,IAAM5L,EAAUvC,KAClCkO,IAAM1L,EAAWvC,KAAOkO,IAAM3L,EAAWxC,OADFE,EAAS,GAExD,IAAM8D,EAAOwN,EAAQtD,GAAGC,GAClB/M,EAAO,2BACN4C,GADM,IAET/D,IAAKiO,EACLlO,IAAKmO,EACLjO,OAAQA,IAEZsR,EAAQtD,GAAGC,GAAK/M,EAGxB,OAAOoQ,GAGLK,GAAiC,SAACvP,EAAMrC,EAAKD,EAAK8I,EAASC,GAC7D,IAAMyI,EAAUlP,EAAKlQ,QACfue,EAAUrO,EAAK7Q,OACfgf,EAAUnO,EAAK,GAAG7Q,OAGlB2Q,EAAWoP,EAAQ1I,GAASC,GAC5B/E,EAAOwN,EAAQvR,GAAKD,GACpB2U,EAAa,2BACZvS,GADY,IAEfnC,IAAK6I,EACL9I,IAAK+I,EACL7I,OAPoB,EAQpBE,SAAS,EACTD,UAAU,EACVE,UAAWyI,IAAY6H,EAAU,EACjCrQ,aAAcyI,IAAY0H,EAAU,IAElCY,EAAY,2BACXrN,GADW,IAEd/D,IAAKA,EACLD,IAAKA,EACLE,OAlBoB,EAmBpBE,SAAS,EACTD,UAAU,EACVE,UAAWJ,IAAQ0Q,EAAU,EAC7BrQ,aAAcN,IAAQyQ,EAAU,IAIpC,OAFAe,EAAQ1I,GAASC,GAAW4L,EAC5BnD,EAAQvR,GAAKD,GAAOqR,EACbG,GAGLQ,GAAkC,SAAC1P,EAAMrC,EAAKD,EAAK8I,EAASC,GAC9D,IAAMyI,EAAUlP,EAAKlQ,QACfue,EAAUrO,EAAK7Q,OACfgf,EAAUnO,EAAK,GAAG7Q,OAGlB2Q,EAAWoP,EAAQ1I,GAASC,GAC5B/E,EAAOwN,EAAQvR,GAAKD,GACpB4U,EAAc,2BACbxS,GADa,IAEhBnC,IAAK6I,EACL9I,IAAK+I,EACL7I,OAPoB,EAQpBE,SAAS,EACTD,UAAU,EACVE,UAAWyI,IAAY6H,EAAU,EACjCrQ,aAAcyI,IAAY0H,EAAU,IAElCa,EAAa,2BACZtN,GADY,IAEf/D,IAAKA,EACLD,IAAKA,EACLE,OAlBqB,EAmBrBE,SAAS,EACTD,UAAU,EACVE,UAAWJ,IAAQ0Q,EAAU,EAC7BrQ,aAAcN,IAAQyQ,EAAU,IAIpC,OAFAe,EAAQ1I,GAASC,GAAW6L,EAC5BpD,EAAQvR,GAAKD,GAAOsR,EACbE,GAGLR,GAAuC,SAAC1O,GAO1C,IANA,IAAMyO,EAAc,GACdN,EAAU3B,KAEV+F,EAAmBvS,EAAK,GAAG7Q,OAAS,EAGjCwO,EAAM,EAAGA,EAJF0O,GAIiB1O,IAAO,CAEpC,IADA,IAAM0K,EAAa,GACV3K,EAAM,EAAGA,EAAMyQ,EAASzQ,IAC7B,GAAGA,EAAMsC,EAAKrC,GAAKxO,OACf,GAAGuO,IAAQ6U,EAAkB,CACzB,IAAM7Q,EAAO1B,EAAKrC,GAAKD,GACjB8U,EAAW,2BACZ9Q,GADY,IAEf1D,cAAc,IAEhBqK,EAAWhZ,KAAKmjB,QAGhBnK,EAAWhZ,KAAK2Q,EAAKrC,GAAKD,SAI9B2K,EAAWhZ,KAAK8iB,GAAWxU,EAAKD,EArB5B2O,GAqB0C8B,EAnBhC,IAsBtBM,EAAYpf,KAAKgZ,GAGrB,OAAOoG,GCrkCUgE,I,wDACjB,WAAY/f,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTE,cAAe,IAJJ,E,qDAQnB,WACIQ,KAAKqf,0C,4CAGT,WACIrf,KAAKoD,SAAS,CAAE5D,cAAe,SAE/BwB,SAASgE,cAAc,wBAAwB7D,MAAMG,gBAAkB,UACvEN,SAASgE,cAAc,+BAA+B7D,MAAMG,gBAAkB,cAE9Ege,IAASC,OAAO,cAAC,EAAD,IAAiBve,SAASY,eAAe,mB,mDAG7D,WACI5B,KAAKoD,SAAS,CAAE5D,cAAe,gBAE/BwB,SAASgE,cAAc,wBAAwB7D,MAAMG,gBAAkB,cACvEN,SAASgE,cAAc,+BAA+B7D,MAAMG,gBAAkB,UAE9Ege,IAASC,OAAO,cAAC,GAAD,IAAwBve,SAASY,eAAe,mB,oBAGpE,WAAU,IAAD,OACL,OACI,sBAAK+B,GAAG,eAAR,UACI,sBAAKA,GAAG,sBAAR,UACI,mBAAG6b,KAAK,iDAAiD7b,GAAG,2BAA5D,8BACA,wBAAQA,GAAG,sBAAsBC,QAAS,kBAAM,EAAK6b,kCAArD,qBACA,wBAAQ9b,GAAG,6BAA6BC,QAAS,kBAAM,EAAKyb,yCAA5D,4BAEJ,qBAAK1b,GAAG,wB,GAvCiBI,IAAMC,YCKhC0b,OARf,WACE,OACE,qBAAKhc,UAAU,MAAf,SACE,cAAC,GAAD,OCMSic,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdN,IAASC,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,GAAD,MAEFpf,SAASY,eAAe,SAM1B+d,O","file":"static/js/main.1b932206.chunk.js","sourcesContent":["export function getInsertionSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    insertionSort(array, animations);\n    return animations;\n}\n\nfunction insertionSort(array, animations) {\n\n    // Animation codes:\n    //  'c' denotes comparison between two indexes,\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes,\n    //  'sf' denotes a swap is finished\n    for(let i = 1; i < array.length; ++i) {\n        animations.push(['c',i, i-1]);\n        animations.push(['cf',i, i-1]);\n\n        if(array[i] < array[i-1]) {\n            let j = i;\n            for(j; array[j] < array[j-1]; --j) {\n                animations.push(['c', j, j-1]);\n                animations.push(['cf', j, j-1]);\n                animations.push(['s', j, j-1, array[j], array[j-1]]);\n                animations.push(['sf']);\n                swap(array, j, j-1);\n            }\n            if(j-1 >= 0) {\n                animations.push(['c',j, j-1]);\n                animations.push(['cf',j, j-1]);\n            }\n        }\n    }\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n  \nfunction mergeSort(mainArray, startIndex, endIndex, auxiliaryArray, animations) {\n    if (startIndex >= endIndex) return;\n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\n    mergeSort(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\n    mergeSort(auxiliaryArray, middleIndex + 1, endIndex, mainArray, animations);\n    merge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\n}\n  \nfunction merge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\n\n    // Animation codes:\n    //  'c' denotes comparison between two indexes,\n    //  'cf' denotes that a comparison is finished\n    //  'o' denotes a value in the main array is overwritten by a value in the auxiliary array\n    //  'of' denates that a value has finished being overwritten\n    let k = startIndex;\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while(i <= middleIndex && j <= endIndex) {\n        animations.push(['c', i, j]);\n        animations.push(['cf', i, j]);\n        if(auxiliaryArray[i] <= auxiliaryArray[j]) {\n            animations.push(['o', k]);\n            animations.push(['of', k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        } else {\n            animations.push(['o', k]);\n            animations.push(['of', k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while(i <= middleIndex) {\n        animations.push(['c', i, i]);\n        animations.push(['cf', i, i]);\n        animations.push(['o', k]);\n        animations.push(['of', k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIndex) {\n        animations.push(['c', j, j]);\n        animations.push(['cf', j, j]);\n        animations.push(['o', k]);\n        animations.push(['of', k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n        }\n  }","export function getQuicksortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    quicksort(array, 0, array.length - 1, animations);\n    return animations;\n}\n\nfunction quicksort(array, lowIndex, highIndex, animations) {\n    if (lowIndex >= highIndex) {\n        return;\n    }\n    \n    let lowEndIndex = quicksortPartition(array, lowIndex, highIndex, animations);\n\n    quicksort(array, lowIndex, lowEndIndex, animations);\n    quicksort(array, lowEndIndex + 1, highIndex, animations);\n}\n\nfunction quicksortPartition(array, lowIndex, highIndex, animations) {\n    // Animation codes:\n    //  'c' denotes a comparison between the pivot\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes\n    //  'sf' denotes a swap is finished\n    //  'p' denotes that a pivot was chosen\n    //  'pf' denotes that we are finished using the last pivot\n\n    // I choose a value at a valid random index to serve as our pivot value\n    let pivotIndex = randomIntFromInterval(lowIndex, highIndex);\n    let pivot = array[pivotIndex];\n    animations.push(['p', lowIndex, highIndex, pivot]);\n    \n    let done = false;\n    while(!done) {\n\n        while (array[lowIndex] < pivot) {\n            animations.push(['c', lowIndex]);\n            animations.push(['cf', lowIndex]);\n            lowIndex++;\n        }\n    \n        while (pivot < array[highIndex]) {\n            animations.push(['c', highIndex]);\n            animations.push(['cf', highIndex]);\n            highIndex--;\n        }\n\n        if (lowIndex >= highIndex) {\n            done = true;\n            animations.push(['c']);\n            animations.push(['cf']);\n        }\n\n        else {\n            animations.push(['s', lowIndex, highIndex]);\n            animations.push(['sf', lowIndex, highIndex, array[lowIndex], array[highIndex]]);\n            swap(array, lowIndex, highIndex);\n            lowIndex++;\n            highIndex--;\n        }\n    }\n\n    animations.push(['pf']);\n    \n    return highIndex;\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","export function getBubbleSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    bubbleSort(array, animations);\n    return animations;\n}\n  \nfunction bubbleSort(array, animations){\n \n    // Animation codes:\n    //  'c' denotes comparison between two indexes,\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes,\n    //  'sf' denotes a swap is finished\n    let isSwapped = false;\n    for(let i = 0; i < array.length; ++i){\n        \n        isSwapped = false;\n        for(let j = 0; j < (array.length - i -1); ++j){\n            if(array[j] > array[j+1]){\n                animations.push(['c',j, j+1]);\n                animations.push(['cf',j, j+1]);\n                animations.push(['s', j, j+1, array[j], array[j+1]]);\n                animations.push(['sf', j, j+1]);\n                swap(array, j, j+1);\n                isSwapped = true;\n            }\n            if(j+1 < array.length) {\n                animations.push(['c',j, j+1]);\n                animations.push(['cf',j, j+1]);\n            }\n\n        }\n        \n        if(!isSwapped){\n            break;\n        }\n    } \n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","export function getHeapSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    heapSort(array, animations);\n    return animations;\n}\n\nfunction heapSort(array, animations) {\n    buildMaxHeap(array, animations);\n\n    let lastElementIndex = array.length - 1;\n\n    while(lastElementIndex > 0) {\n        animations.push(['s', 0, lastElementIndex]);\n        animations.push(['sf', 0, lastElementIndex, array[0], array[lastElementIndex]]);\n        swap(array, 0, lastElementIndex);\n        maxHeapify(array, 0, lastElementIndex, animations);\n        lastElementIndex--;\n    }\n}\n\nfunction buildMaxHeap(array, animations) {\n    let length = array.length;\n    let middle = Math.floor(array.length / 2 - 1);\n    let i = middle;\n\n    while(i >= 0) {\n        maxHeapify(array, i, length, animations);\n        i--;\n    }\n}\n\nfunction maxHeapify(array, i, maxIndex, animations) {\n    // Animation codes:\n    //  'c' denotes a comparison between the pivot\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes\n    //  'sf' denotes a swap is finished\n\n    let index;\n    let leftChild;\n    let rightChild;\n\n    while(i < maxIndex) {\n        index = i;\n\n        leftChild = i * 2 + 1;\n        rightChild = leftChild + 1;\n\n        if(leftChild < maxIndex) {\n            animations.push(['c', leftChild, index]);\n            animations.push(['cf', leftChild, index]);\n        }\n        if(leftChild < maxIndex && array[leftChild] > array[index]) {\n            index = leftChild;\n        }\n        \n        if(rightChild < maxIndex) {\n            animations.push(['c', leftChild, index]);\n            animations.push(['cf', leftChild, index]);\n        }\n        if(rightChild < maxIndex && array[rightChild] > array[index]) {\n            animations.push(['c', rightChild, index]);\n            animations.push(['cf', rightChild, index]);\n            index = rightChild;\n        }\n\n        if(index === i) {\n            return;\n        }\n        else {\n            animations.push(['s', i, index]);\n            animations.push(['sf', i, index, array[i], array[index]]);\n            swap(array, i, index);\n            i = index;\n        }\n\n    }\n\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","export function getShellSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    shellSort(array, animations);\n    return animations;\n}\n\nfunction shellSort(array, animations) {\n\n    // Animation codes:\n    //  'c' denotes comparison between two indexes,\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes,\n    //  'sf' denotes a swap is finished\n\n\tfor (let gap = Math.floor(array.length/2); gap > 0; gap = Math.floor(gap/2))\n\t{\n\t\t//insetion sort on each section\n\t\tfor (let i = gap; i < array.length; ++i)\n\t\t{\n            let first = array[i];\n            let j = i;\n            for (j = i; j >= gap && array[j - gap] > first; j -= gap) {\n                animations.push(['c', j, j-gap]);\n                animations.push(['cf', j, j-gap]);\n                animations.push(['s', j, j-gap]);\n                animations.push(['sf', j, j-gap, array[j], array[j-gap]]);\n                swap(array, j, j-gap);\n            }\n            if(j-gap >= 0) {\n                animations.push(['c',j, j-gap]);\n                animations.push(['cf',j, j-gap]);\n            }\n\t\t}\n\t}\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","export function getSelectionSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    selectionSort(array, animations);\n    return animations;\n}\n\nfunction selectionSort(array, animations) {\n\n    // Animation codes:\n    //  'c' denotes comparison between two indexes,\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes,\n    //  'sf' denotes a swap is finished\n    //  'm' denotes that we are finished with our minumun index\n    for (let i = 0; i < array.length - 1; ++i) {\n\n        let minIndex = i;\n        for (let j = i + 1; j < array.length; ++j) {\n            animations.push(['c', j, minIndex]);\n            animations.push(['cf', j]);\n            if (array[j] < array[minIndex]) {\n                animations.push(['m', minIndex]);\n                minIndex = j;\n            }     \n        }\n        animations.push(['m', minIndex]);\n        \n        animations.push(['s', i, minIndex]);\n        animations.push(['sf', i, minIndex, array[i], array[minIndex]]);\n        swap(array, i , minIndex);\n    }\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","import React from 'react';\nimport { getInsertionSortAnimations } from './sortAlgorithms/InsertionSort.js';\nimport { getMergeSortAnimations } from './sortAlgorithms/MergeSort.js';\nimport { getQuicksortAnimations } from './sortAlgorithms/Quicksort.js';\nimport { getBubbleSortAnimations } from './sortAlgorithms/BubbleSort.js';\nimport { getHeapSortAnimations } from './sortAlgorithms/HeapSort.js';\nimport { getShellSortAnimations } from './sortAlgorithms/ShellSort.js';\nimport { getSelectionSortAnimations } from './sortAlgorithms/SelectionSort.js';\nimport './css/SortVisualizerContestant.css';\n\n// main color of the array bars: dark blue\nconst PRIMARY_COLOR = '#5457ff';\n// color of array bars that are being compared or swapped\nconst SECONDARY_COLOR = 'red';\n// color of all the array bars once sorting has finished\nconst FINISHED_SORTING_COLOR = '#007bff';\n\nconst DEFAULT_BACKGROUND_COLOR = '#f7f7f7'; // light grey\nconst FINISHED_SORTING_BACKGROUND_COLOR = '#edfff2'; // light green\n\nexport default class SortVisualizerContestant extends React.Component {\n\n    static ANIMATION_DELAY_MS = 3000;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            animationSpeedMS: 2,\n            array: this.props.array,\n            algorithmType: this.props.algorithmType,\n            allAlgorithmTypes: this.props.algorithmTypes,\n            contestantNumber: this.props.contestantNumber,\n            numOfSwapsOrOverwrites: -1,\n            numOfComparisons: -1,\n            numOfAnimationSteps: -1\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if(props.array !== state.array){\n            return{ array: props.array };\n        }\n        return null;\n    }\n\n    getSortAnimations() {\n        let arrayCopy = this.state.array.map((value) => value);\n\n        switch(this.state.algorithmType) {\n            case 'merge':\n                return getMergeSortAnimations(arrayCopy);\n            case 'quick':\n                return getQuicksortAnimations(arrayCopy);\n            case 'shell':\n                return getShellSortAnimations(arrayCopy);\n            case 'insertion':\n                return getInsertionSortAnimations(arrayCopy);\n            case 'heap':\n                return getHeapSortAnimations(arrayCopy);\n            case 'selection':\n                return getSelectionSortAnimations(arrayCopy);\n            case 'bubble':\n                return getBubbleSortAnimations(arrayCopy);\n            default:\n                console.log(\"Error: Unexpected Algorithm Type\");\n                return null;\n        }\n    }\n\n    doAnimationNextStep(animationStepInfo, currentStepNumber) {\n        switch(this.state.algorithmType) {\n            case 'merge':\n                this.doNextMergeSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'quick':\n                this.doNextQuicksortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'shell':\n                this.doNextShellSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'insertion':\n                this.doNextInsertionSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'heap':\n                this.doNextHeapSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'selection':\n                this.doNextSelectionSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'bubble':\n                this.doNextBubbleSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            default:\n                console.log(\"Error: Unexpected Algorithm Type\",);\n        }\n    }\n\n    doNextMergeSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n\n        const barOneIndex = animationStepInfo[1];\n        const barOneStyle = arrayBars[barOneIndex].style;\n\n        //comparison cases\n        if (animationCode === 'c' || animationCode === 'cf') {\n            const barTwoIndex = animationStepInfo[2];\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n\n            if(animationCode === 'c') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n                return;\n            }\n            else if(animationCode === 'cf') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\n                    barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n                return;\n            }\n        }\n        //overwrite cases\n        else {\n            if(animationCode === 'o') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n            }\n            else if(animationCode === 'of') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\n                    barOneStyle.height = `${animationStepInfo[2]}px`;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n            }\n            return;\n        }\n\n    }\n\n    doNextQuicksortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n\n        // swap cases\n        if (animationCode === 's' || animationCode === 'sf') {\n            const barOneIndex = animationStepInfo[1];\n            const barOneStyle = arrayBars[barOneIndex].style;\n            const barTwoIndex = animationStepInfo[2];\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n\n            if(animationCode === 's') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n            }\n            else if(animationCode === 'sf') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\n                    barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                    barOneStyle.height = `${animationStepInfo[4]}px`;\n                    barTwoStyle.height = `${animationStepInfo[3]}px`;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n            }\n        }\n        // comparison cases\n        else if(animationCode === 'c' || animationCode === 'cf'){\n            if(animationStepInfo.length === 1) {\n                return;\n            }\n            const barOneIndex = animationStepInfo[1];\n            const barOneStyle = arrayBars[barOneIndex].style;\n\n            if(animationCode === 'c') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n            }\n            else if(animationCode === 'cf') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n            }\n        }\n        // pivot cases\n        else {\n            if(animationCode === 'p') {\n                setTimeout(() => {\n                    let pivotLine = document.createElement(\"HR\");\n                    let arrayContainer = document.getElementById(`array-container-${this.state.contestantNumber}`);\n                    pivotLine.setAttribute(\"id\", `pivot-line-${this.state.contestantNumber}`);\n                    pivotLine.setAttribute(\"class\", `pivot-line`);\n                    pivotLine.style.width = `${((animationStepInfo[2] - animationStepInfo[1] + 1) * 4)-2}px`;\n                    pivotLine.style.bottom = `${animationStepInfo[3] + 5}px`;\n                    pivotLine.style.left = `${((animationStepInfo[1] + 1) * 4) + 2}px`;\n                    arrayContainer.appendChild(pivotLine);\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n                return;\n            }\n            else if(animationCode === 'pf') {\n                setTimeout(() => {\n                    let pivotLine = document.getElementById(`pivot-line-${this.state.contestantNumber}`);\n                    pivotLine.remove();\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n            }\n        }\n    }\n\n    doNextShellSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        const barOneIndex = animationStepInfo[1];\n        const barTwoIndex = animationStepInfo[2];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        //comparison cases\n        if(animationCode === 'c') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'cf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        //swap cases\n        else if(animationCode === 's') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'sf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                barOneStyle.height = `${animationStepInfo[4]}px`;\n                barTwoStyle.height = `${animationStepInfo[3]}px`;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n    }\n\n    doNextInsertionSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        if(animationCode === 'sf') {\n            return;\n        }\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        const barOneIndex = animationStepInfo[1];\n        const barTwoIndex = animationStepInfo[2];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        // comparison cases\n        if(animationCode === 'c') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'cf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        // swap case\n        else if(animationCode === 's') {\n            setTimeout(() => {\n                barOneStyle.height = `${animationStepInfo[4]}px`;\n                barTwoStyle.height = `${animationStepInfo[3]}px`;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n    }\n\n    doNextHeapSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        const barOneIndex = animationStepInfo[1];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoIndex = animationStepInfo[2];\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        // comparison cases\n        if(animationCode === 'c') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'cf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        // swap cases\n        else if(animationCode === 's') {\n        setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'sf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                barOneStyle.height = `${animationStepInfo[4]}px`;\n                barTwoStyle.height = `${animationStepInfo[3]}px`;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n    }\n\n    doNextSelectionSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        const barOneIndex = animationStepInfo[1];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        //comparison cases\n        if(animationCode === 'c') {\n            const barTwoIndex = animationStepInfo[2];\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'cf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        // swap case\n        else if(animationCode === 's') {\n            const barTwoIndex = animationStepInfo[2];\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'sf') {\n            const barTwoIndex = animationStepInfo[2];\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                barOneStyle.height = `${animationStepInfo[4]}px`;\n                barTwoStyle.height = `${animationStepInfo[3]}px`;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        // finished with min case\n        else if(animationCode === 'm') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n    }\n\n    doNextBubbleSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        if(animationCode === 'sf') {\n            return;\n        }\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        const barOneIndex = animationStepInfo[1];\n        const barTwoIndex = animationStepInfo[2];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        // comparison cases\n        if(animationCode === 'c') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'cf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        //swap case\n        else if(animationCode === 's') {\n            setTimeout(() => {\n                barOneStyle.height = `${animationStepInfo[4]}px`;\n                barTwoStyle.height = `${animationStepInfo[3]}px`;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n    }\n\n    resetVisualizationStyling() {\n        document.getElementById(`sort-visualizer-${this.state.contestantNumber}`).style.backgroundColor = DEFAULT_BACKGROUND_COLOR;\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        if(arrayBars[0].style.backgroundColor !== PRIMARY_COLOR) {\n            for (var i = 0; i < arrayBars.length; i++) {\n                arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n            }\n        }\n    }\n\n    scheduleAlgorithmIsNowFinishedCommands(lastAnimationStepNumber, algorithmPlace) {\n        setTimeout(() => {\n            this.handleAlgorithmIsNowFinished(algorithmPlace);\n        }, lastAnimationStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n    }\n\n    handleAlgorithmIsNowFinished(algorithmPlace) {\n        this.createAlgorithmPlacelabel(algorithmPlace);\n        document.getElementById(`sort-visualizer-${this.state.contestantNumber}`).style.backgroundColor = FINISHED_SORTING_BACKGROUND_COLOR;\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        for (var i = 0; i < arrayBars.length; i++) {\n            arrayBars[i].style.backgroundColor = FINISHED_SORTING_COLOR;\n        }  \n    }\n\n    createAlgorithmPlacelabel(algorithmPlace) {\n        let sortVisualizerContestant = document.getElementById(`sort-visualizer-${this.state.contestantNumber}`);\n        let placeLabel = document.createElement(\"DIV\");\n        placeLabel.setAttribute(\"id\", `place-label-${this.state.contestantNumber}`);\n        placeLabel.setAttribute(\"class\", 'place-label');\n\n        let placeLabelText;\n        if(algorithmPlace === 1) {\n            const GOLD = '#c7b620';\n            placeLabel.style.backgroundColor = GOLD;\n            placeLabelText = document.createTextNode('1st Place');\n        }\n        else if(algorithmPlace === 2) {\n            const SILVER = '#929292';\n            placeLabel.style.backgroundColor = SILVER;\n            placeLabelText = document.createTextNode('2nd Place');\n        }\n        else if(algorithmPlace === 3) {\n            const BRONZE = '#ab7627';\n            placeLabel.style.backgroundColor = BRONZE;\n            placeLabelText = document.createTextNode('3rd Place');\n        }\n        else {\n            const DEFAULT = '#636363';\n            placeLabel.style.backgroundColor = DEFAULT;\n            placeLabelText = document.createTextNode(`${algorithmPlace}th Place`);\n        }\n\n        placeLabel.appendChild(placeLabelText);\n        sortVisualizerContestant.appendChild(placeLabel);\n    }\n\n    createAlgorithmStatsLabel() {\n        let sortVisualizerContestant = document.getElementById(`sort-visualizer-${this.state.contestantNumber}`);\n        let statsLabel = document.createElement(\"DIV\");\n        statsLabel.setAttribute(\"id\", `stats-label-${this.state.contestantNumber}`);\n        statsLabel.setAttribute(\"class\", 'stats-label');\n\n        let placeLabelColor = document.getElementById(`place-label-${this.state.contestantNumber}`).style.backgroundColor;\n        statsLabel.style.borderColor = placeLabelColor;\n\n        let statsLabelText;\n        let swapsOrOverwrites;\n        if(this.state.algorithmType !== 'merge') {\n            swapsOrOverwrites = 'swaps';\n        }\n        else {\n            swapsOrOverwrites = 'overwrites';\n        }\n        if(window.innerWidth >= 700) {\n            statsLabelText = document.createTextNode(\n                `Final Stats: ${this.state.numOfComparisons} comparisons and ${this.state.numOfSwapsOrOverwrites} ${swapsOrOverwrites}`);\n        }\n        else {\n            statsLabelText = document.createTextNode(\n                `${this.state.numOfComparisons} comparisons and ${this.state.numOfSwapsOrOverwrites} ${swapsOrOverwrites}`);\n        }\n        \n        statsLabel.appendChild(statsLabelText);\n        sortVisualizerContestant.appendChild(statsLabel);\n    }\n\n    destructAlgorithmPlaceLabel() {\n        let placeLabel = document.getElementById(`place-label-${this.state.contestantNumber}`);\n        if(placeLabel !== null) {\n            placeLabel.remove();\n        }\n    }\n\n    destructAlgorithmStatsLabel() {\n        let statsLabel = document.getElementById(`stats-label-${this.state.contestantNumber}`);\n        if(statsLabel !== null) {\n            statsLabel.remove();\n        }\n    }\n\n    setAnimationSpeed(animationSpeedMS) {\n        if(animationSpeedMS !== this.state.animationSpeedMS) {\n            this.setState({...this.state, animationSpeedMS: animationSpeedMS});\n        }\n    }\n\n    getAnimationSpeed() {\n        return this.state.animationSpeedMS;\n    }\n\n    updateAlgorithmType(algorithmType) {\n        this.setState({...this.state, algorithmType: algorithmType});\n    }\n\n    getAlgorithmType() {\n        return this.state.algorithmType;\n    }\n\n    setAllAlgorithmStatInfo(numOfAnimationSteps, numOfComparisons, numOfSwapsOrOverwrites) {\n        this.setState({\n            ...this.state,\n            numOfAnimationSteps: numOfAnimationSteps,\n            numOfComparisons: numOfComparisons,\n            numOfSwapsOrOverwrites: numOfSwapsOrOverwrites\n        });\n    }\n\n    getNumOfAnimationsSteps() {\n        return this.state.numOfAnimationSteps;  \n    }\n\n    getNumOfComparisons() {\n        return this.state.numOfComparisons;  \n    }\n\n    getNumOfSwapsOrOverwrites() {\n        return this.state.numOfSwapsOrOverwrites;\n    }\n\n    resetArrayBarsToCorrectHeights() {\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        for (var i = 0; i < arrayBars.length; i++) {\n            arrayBars[i].style.height = `${this.state.array[i]}px`;\n        }\n    }\n\n    removeComponent() {\n        document.getElementById(`sort-visualizer-${this.state.contestantNumber}`).style.display = 'none';\n    }\n\n    addComponent() {\n        document.getElementById(`sort-visualizer-${this.state.contestantNumber}`).style.display = 'block';\n    }\n\n    algorithmDropDownButtonOnClick(algorithmType) {\n        this.destructAlgorithmPlaceLabel();\n        this.destructAlgorithmStatsLabel();\n        this.resetVisualizationStyling();\n        this.updateAlgorithmType(algorithmType);\n    }\n\n    render() {\n        return (\n            <div className='sort-visualizer' id={`sort-visualizer-${this.state.contestantNumber}`}>\n                <div className=\"dropdown\">\n                    <div id='algorithm-dropdown-label'>{this.state.algorithmType}<div className='dropdown-arrow'>▼</div></div>\n                    <div className=\"dropdown-content\">\n                        {this.state.allAlgorithmTypes.map((algorithmType) => (\n                        (algorithmType !== this.state.algorithmType) ?\n                            <button\n                                key={algorithmType}\n                                className='algorithm-dropdown-button'\n                                onClick={() => this.algorithmDropDownButtonOnClick(algorithmType)}\n                            >{algorithmType}</button>\n                            : null\n                        ))}\n                    </div>\n                </div>\n                    <div className='array-container' id={`array-container-${this.state.contestantNumber}`}>\n                        {this.state.array.map((value, index) => (\n                        <div className={`array-bar-${this.state.contestantNumber}`}\n                            key={`${index}-${this.contestantNumber}`}\n                            style={{\n                                backgroundColor: PRIMARY_COLOR,\n                                height: `${value}px`,\n                            }}></div>\n                        ))}\n                    </div>\n                    <button className='sort-remove-button' onClick={() => this.props.removeMe(this.state.contestantNumber)}>-</button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport SortVisualizerContestant from './SortVisualizerContestant.jsx';\nimport './css/SortContest.css';\n\nconst ARRAY_MIN_VALUE = 5;\nconst ARRAY_MAX_VALUE = 130;\nconst INITIAL_NUM_OF_CONTESTANTS = 7;\nconst MAX_NUM_OF_CONTESTANTS = 10;\nconst COUNTDOWN_DURATION_MS = SortVisualizerContestant.ANIMATION_DELAY_MS;\n\nconst ALGORITHM_TYPES = [\n    'merge',\n    'quick',\n    'heap',\n    'shell',\n    'insertion',\n    'bubble',\n    'selection'\n]\n\nexport default class SortContest extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            numOfContestants: INITIAL_NUM_OF_CONTESTANTS,\n            isPreContest: true,\n            isRandomArray: true,\n        };\n        this.algoContestantRefs = [];\n        this.removeContestant = this.removeContestant.bind(this);\n    }\n\n    setRef = (ref) => {\n        this.algoContestantRefs.push(ref);\n    };\n\n    componentDidMount() {\n        document.title = \"Sorting Contest\";\n        this.removeExtraContestants();\n        this.handlePageResize();\n        this.disableDuringContestControlButtons();\n        this.randomizeArray();\n        window.addEventListener('resize', this.handlePageResize);\n        window.addEventListener('scroll', this.addOrRemoveStickyEffectOnSortContestHeader);\n    }\n    \n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handlePageResize);\n        window.removeEventListener('scroll', this.addOrRemoveStickyEffectOnSortContestHeader);\n    }\n\n    addContestant() {\n        const newNumOfContestants = this.state.numOfContestants + 1;\n        this.algoContestantRefs[this.state.numOfContestants].addComponent();\n        this.algoContestantRefs[this.state.numOfContestants].updateAlgorithmType(ALGORITHM_TYPES[randomIntFromInterval(0,4)]);\n        this.setState({...this.state, numOfContestants: newNumOfContestants}, () => {\n            this.resetSortContestPage();\n            this.enableRemoveContestantButtons();\n        });\n        if(newNumOfContestants === MAX_NUM_OF_CONTESTANTS) {\n            document.getElementById('sort-add-contestant-button').disabled = true;\n            document.getElementById('sort-add-contestant-button').innerText = 'MAX';\n        }\n        else {\n            document.getElementById('sort-add-contestant-button').disabled = false;\n            if(window.innerWidth <= 1195) {\n                document.getElementById('sort-add-contestant-button').innerText = 'Add';\n            }\n            else {\n                document.getElementById('sort-add-contestant-button').innerText = 'Add Contestant';\n            }\n        }\n    }\n\n    removeContestant(contestantNum) {\n        //shift all algorithm types over then removes the last one\n        for(let i = contestantNum - 1; i < this.state.numOfContestants - 1; ++i) {\n            this.algoContestantRefs[i].updateAlgorithmType(this.algoContestantRefs[i+1].getAlgorithmType());\n        }\n        const newNumOfContestants = this.state.numOfContestants - 1;\n        this.algoContestantRefs[this.state.numOfContestants - 1].removeComponent();\n        this.setState({...this.state, numOfContestants: newNumOfContestants}, this.resetSortContestPage());\n        // do remove animation\n        let animationStandIn = document.createElement(\"DIV\");\n        animationStandIn.setAttribute(\"class\", 'sort-remove-element-animation-stand-in');\n        let sortVisualizerContestants = document.getElementById('sort-visualizers');\n        let nextSortVisualizerContestant = document.getElementById(`sort-visualizer-${contestantNum}`);\n        sortVisualizerContestants.insertBefore(animationStandIn, nextSortVisualizerContestant);\n        setTimeout(() => {\n            animationStandIn.remove();\n        }, 800);\n        if(newNumOfContestants === 2) {\n            this.disableRemoveContestantButtons();\n        }\n        //renable the remove contestant since we know we do not have the maximum number of contestants\n        document.getElementById('sort-add-contestant-button').disabled = false;\n        if(window.innerWidth <= 1195) {\n            document.getElementById('sort-add-contestant-button').innerText = 'Add';\n        }\n        else {\n            document.getElementById('sort-add-contestant-button').innerText = 'Add Contestant';\n        }\n        \n    }\n\n    startContest() {\n        this.disablePreContestButtons();\n        this.enableDuringContestControlButtons()\n        this.startCountdown();\n        const allContestantAnimationData = this.getAllContestantAnimationDataAndSetAlgorithmStatInfo();\n        this.runContestAnimations(allContestantAnimationData);\n        this.scheduleContestFinishedCommands(allContestantAnimationData);\n    }\n\n    getAllContestantAnimationDataAndSetAlgorithmStatInfo() {\n        const allContestantAnimationData = [];\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            allContestantAnimationData[i] = this.algoContestantRefs[i].getSortAnimations();\n            let numOfComparisons = 0;\n            let numOfSwapsOrOverwrites = 0;\n            for(let j = 0; j < allContestantAnimationData[i].length; ++j){\n                let animationCode = allContestantAnimationData[i][j][0];\n                if(animationCode === 'c') {\n                    numOfComparisons++;\n                }\n                else if(animationCode === 's' || animationCode === 'o') {\n                    numOfSwapsOrOverwrites++;\n                }\n            }\n            this.algoContestantRefs[i].setAllAlgorithmStatInfo(allContestantAnimationData[i].length / 2, numOfComparisons, numOfSwapsOrOverwrites);\n        }\n\n        return allContestantAnimationData;\n    }\n\n    runContestAnimations(allContestantAnimationData) {\n        let stepCounter = 0;\n        let numOfFinishedContestants = 0;\n        let placeNumber = 0;\n        while(numOfFinishedContestants < this.state.numOfContestants) {\n            let hasContestantFinishedThisStep = false;\n            for(let i = 0; i < this.state.numOfContestants; ++i) {\n                if(stepCounter > allContestantAnimationData[i].length) {\n                    continue;\n                }\n                else if(stepCounter === allContestantAnimationData[i].length) {\n                    numOfFinishedContestants++;\n                    if(hasContestantFinishedThisStep === false) {\n                        placeNumber++;\n                        hasContestantFinishedThisStep = true;\n                        this.algoContestantRefs[i].scheduleAlgorithmIsNowFinishedCommands(stepCounter, placeNumber);\n                    }\n                    else {\n                        this.algoContestantRefs[i].scheduleAlgorithmIsNowFinishedCommands(stepCounter, placeNumber);\n                    }\n                    continue;\n                }\n                else {\n                    this.algoContestantRefs[i].doAnimationNextStep(\n                        allContestantAnimationData[i][stepCounter],\n                        stepCounter\n                    );\n                }\n            }\n            stepCounter++;\n        }\n    }\n\n    scheduleContestFinishedCommands(allContestantAnimationData) {\n        const allContestantMaxAnimationSteps = [];\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            allContestantMaxAnimationSteps.push(allContestantAnimationData[i].length);\n        }\n\n        const maxNumberOfAnimationSteps = Math.max(...allContestantMaxAnimationSteps);\n        setTimeout(() => {\n            this.handleContestIsNowFinished();\n        }, maxNumberOfAnimationSteps * this.algoContestantRefs[0].getAnimationSpeed() + SortVisualizerContestant.ANIMATION_DELAY_MS);\n    }\n\n    handleContestIsNowFinished() {\n        this.enablePreContestSetupButtons();\n        this.disableDuringContestControlButtons();\n        const sortedArray = this.state.array.sort(function(a, b){return a - b});\n        this.setState({ ...this.state, array: sortedArray });\n\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            this.algoContestantRefs[i].createAlgorithmStatsLabel();\n            this.algoContestantRefs[i].setAllAlgorithmStatInfo(-1, -1, -1);\n        }\n    }\n\n    startCountdown() {\n        let numOfCountdownSeconds = COUNTDOWN_DURATION_MS / 1000;\n        for(let i = 0; i < numOfCountdownSeconds; ++i) {\n            setTimeout(() => {\n                document.getElementById(\"sort-start-contest-button\").innerHTML = `${numOfCountdownSeconds - i}`;\n            }, i * 1000);\n        }\n\n        setTimeout(() => {\n            document.getElementById(\"sort-start-contest-button\").innerHTML = 'GO!';\n        }, COUNTDOWN_DURATION_MS); \n    }\n\n    randomizeArray() {\n        let array = [];\n        let fullPageWidthArraySize = this.getFullPageWidthArraySize();\n        for (let i = 0; i < fullPageWidthArraySize; ++i) {\n            array.push(randomIntFromInterval(ARRAY_MIN_VALUE, ARRAY_MAX_VALUE));\n        }\n        this.setState({ ...this.state, array: array });\n    }\n\n    generateNearlySortedArray() {\n        let numOfElements = 0;\n        let array = [];\n        let fullPageWidthArraySize = this.getFullPageWidthArraySize();\n        let numOfRepeatNumbers;\n        if(fullPageWidthArraySize < ARRAY_MAX_VALUE) {\n            numOfRepeatNumbers = 1;\n        }\n        else if(fullPageWidthArraySize < ARRAY_MAX_VALUE*2) {\n            numOfRepeatNumbers = 2;\n        }\n        else {\n            numOfRepeatNumbers = 3;\n        }\n\n        for (let i = ARRAY_MIN_VALUE; i < ARRAY_MAX_VALUE; ++i) {\n            for(let j = 0; j < numOfRepeatNumbers; ++j) {\n                array.push(i);\n                numOfElements++;\n                if(numOfElements >= fullPageWidthArraySize - 1) {\n                    break;\n                }\n            }\n            if(numOfElements >= fullPageWidthArraySize - 1) {\n                break;\n            }\n        }\n        for (let i = numOfElements; i < fullPageWidthArraySize; ++i) {\n            array.push(ARRAY_MAX_VALUE);\n        }\n        for(let i = 0; i < 5; ++i) {\n            let randomIndex1 = Math.ceil(Math.random() * array.length - 1);\n            let randomIndex2 = Math.ceil(Math.random() * array.length - 1);\n            swap(array, randomIndex1, randomIndex2);\n        }\n\n        this.setState({ ...this.state, array: array });\n    }\n\n    resetSortContestPage() {\n        this.enablePreContestSetupButtons();\n        this.clearAllAlgorithmStatsAndPlaceLabels();\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            this.algoContestantRefs[i].resetVisualizationStyling();\n        }\n    }\n\n    disablePreContestButtons() {\n        document.getElementById(\"sort-start-contest-button\").disabled = true;\n        document.getElementById(\"randomize-button\").disabled = true;\n        document.getElementById(\"nearly-sorted-button\").disabled = true;\n        document.getElementById('sort-add-contestant-button').disabled = true;\n\n        const algorithmDropDownButtons = document.getElementsByClassName('algorithm-dropdown-button');\n        for(let i = 0; i < algorithmDropDownButtons.length; ++i) {\n            algorithmDropDownButtons[i].disabled = true;\n        }\n        const algorithmDropDownArrows = document.getElementsByClassName('dropdown-arrow');\n        for(let i = 0; i < algorithmDropDownArrows.length; ++i) {\n            algorithmDropDownArrows[i].style.visibility = 'hidden';\n        }\n        this.disableRemoveContestantButtons();\n    }\n\n    enablePreContestSetupButtons() {\n        document.getElementById(\"sort-start-contest-button\").innerHTML = 'Start';\n        document.getElementById(\"sort-start-contest-button\").disabled = false;\n        document.getElementById(\"randomize-button\").disabled = false;\n        document.getElementById(\"nearly-sorted-button\").disabled = false;\n        if(this.state.numOfContestants < MAX_NUM_OF_CONTESTANTS) {\n            document.getElementById('sort-add-contestant-button').disabled = false;\n        }\n\n        const algorithmDropDownButtons = document.getElementsByClassName('algorithm-dropdown-button');\n        for(let i = 0; i < algorithmDropDownButtons.length; ++i) {\n            algorithmDropDownButtons[i].disabled = false;\n        }\n        const algorithmDropDownArrows = document.getElementsByClassName('dropdown-arrow');\n        for(let i = 0; i < algorithmDropDownArrows.length; ++i) {\n            algorithmDropDownArrows[i].style.visibility = 'visible';\n        }\n    }\n\n    disableDuringContestControlButtons() {\n        document.getElementById('sort-skip-to-finish-button').disabled = true;\n    }\n\n    enableDuringContestControlButtons() {\n        document.getElementById('sort-skip-to-finish-button').disabled = false\n    }\n\n    disableRemoveContestantButtons() {\n        const removeAlgorithmButtons = document.getElementsByClassName('sort-remove-button');\n        for(let i = 0; i < removeAlgorithmButtons.length; ++i) {\n            removeAlgorithmButtons[i].disabled = true;\n        }\n    }\n\n    enableRemoveContestantButtons() {\n        if(this.state.numOfContestants > 2) {\n            const removeAlgorithmButtons = document.getElementsByClassName('sort-remove-button');\n            for(let i = 0; i < removeAlgorithmButtons.length; ++i) {\n                removeAlgorithmButtons[i].disabled = false;\n            }\n        }\n    }\n\n    skipToFinishButtonOnClick() {\n        this.clearAllTimeouts();\n        this.clearAllQuicksortPivotBars();\n        this.disableDuringContestControlButtons();\n        this.clearAllAlgorithmStatsAndPlaceLabels();\n\n        let allContestantPlaceInfo = this.findAllPlaceInformation();\n\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            const algorithmPlace = allContestantPlaceInfo[i][2];\n            this.algoContestantRefs[i].handleAlgorithmIsNowFinished(algorithmPlace);\n            this.algoContestantRefs[i].resetArrayBarsToCorrectHeights();\n        }\n        this.handleContestIsNowFinished();\n    }\n\n    removeExtraContestants() {\n        for(let i = INITIAL_NUM_OF_CONTESTANTS; i < MAX_NUM_OF_CONTESTANTS; ++i) {\n            this.algoContestantRefs[i].removeComponent();\n        }\n    }\n\n    findAllPlaceInformation() {\n\n        const allContestantPlaceInfo = [];\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            const contestantNum = i+1;\n            const numOfSteps = this.algoContestantRefs[i].getNumOfAnimationsSteps();\n            allContestantPlaceInfo.push([contestantNum, numOfSteps]);\n        }\n\n        //sort by number of animation steps to get the list in order of place\n        allContestantPlaceInfo.sort(function(a,b) {\n            return a[1]-b[1]\n        });\n\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            if(i > 0) {\n                if(allContestantPlaceInfo[i][1] === allContestantPlaceInfo[i-1][1]) {\n                    let placeNumber = allContestantPlaceInfo[i-1][2];\n                    allContestantPlaceInfo[i][2] = placeNumber;\n                }\n                else {\n                    let placeNumber = allContestantPlaceInfo[i-1][2] + 1;\n                    allContestantPlaceInfo[i][2] = placeNumber;\n                }\n            }\n            else {\n                let placeNumber = 1;\n                allContestantPlaceInfo[i][2] = placeNumber;\n            }\n        }\n\n        //sort by contestant number to get the list in the correct order\n        allContestantPlaceInfo.sort(function(a,b) {\n            return a[0]-b[0]\n        });\n        \n        //final format [contestant number, number of animation steps, place achieved]\n        return allContestantPlaceInfo;\n    }\n\n    clearAllAlgorithmStatsAndPlaceLabels() {\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            this.algoContestantRefs[i].destructAlgorithmPlaceLabel();\n            this.algoContestantRefs[i].destructAlgorithmStatsLabel();\n        }\n    }\n\n    clearAllTimeouts() {\n        // from https://stackoverflow.com/questions/8860188/javascript-clear-all-timeouts\n        // all timeout ids are consecutive integers, so this will clear all of the pending animation timeouts\n        var id = setTimeout(function() {}, 0);\n        while (id--) {\n            clearTimeout(id);\n        }\n    }\n\n    clearAllQuicksortPivotBars() {\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            let pivotLine = document.getElementById(`pivot-line-${i+1}`);\n            if(pivotLine !== null) {\n                pivotLine.remove();\n            }\n        }\n    }\n\n    genearateRandomArrayButtonOnClick() {\n        this.setState({ ...this.state,\n            isPreContest: true,\n            isRandomArray: true }, () => {\n            this.enablePreContestSetupButtons();\n            this.resetSortContestPage();\n            this.randomizeArray();\n            this.enableRemoveContestantButtons();\n        });\n    }\n\n    genearateNearySortedArrayButtonOnClick() {\n        this.setState({ ...this.state,\n            isPreContest: true,\n            isRandomArray: false }, () => {\n            this.enablePreContestSetupButtons();\n            this.resetSortContestPage();\n            this.generateNearlySortedArray();\n            this.enableRemoveContestantButtons();\n        });\n    }\n\n    startContestButtonOnClick() {\n        this.resetSortContestPage();\n        this.startContest();\n        this.setState({ ...this.state, isPreContest: false });\n    }\n\n    addContestantOnClick() {\n        this.addContestant();\n    }\n\n    getFullPageWidthArraySize() {\n        const initialArraySize = Math.floor((window.innerWidth - 22) / 4);\n        return initialArraySize;\n    }\n\n    handlePageResize = () => {\n        if(this.getFullPageWidthArraySize() !== this.state.array.length) {\n            if(this.state.isPreContest === true) {\n                if(this.state.isRandomArray === true) {\n                    this.randomizeArray();\n                }\n                else {\n                    this.generateNearlySortedArray();\n                }\n            }\n        }\n\n        let windowWidthSize = window.innerWidth;\n        if(windowWidthSize <= 1195) {\n            document.querySelector('#randomize-button').textContent = 'Randomize';\n            document.querySelector('#nearly-sorted-button').textContent = 'Nearly Sorted';\n            if(this.state.numOfContestants < MAX_NUM_OF_CONTESTANTS) {\n                document.querySelector('#sort-add-contestant-button').textContent = 'Add';\n            }\n        }\n        else {\n            document.querySelector('#randomize-button').textContent = 'Generate Random Array';\n            document.querySelector('#nearly-sorted-button').textContent = 'Generate Nearly Sorted Array';\n            if(this.state.numOfContestants < MAX_NUM_OF_CONTESTANTS) {\n                document.querySelector('#sort-add-contestant-button').textContent = 'Add Contestant';\n            }\n        }\n        \n        if(windowWidthSize <= 700) {\n            document.querySelector('#algo-contest-header-link').textContent = 'AlgoContest';\n        }\n        else {\n            document.querySelector('#algo-contest-header-link').textContent = 'AlgorithmContest';\n        }\n\n        let animationSpeedMS;\n        if(windowWidthSize < 420) {\n            animationSpeedMS = 5;\n        }\n        else if(windowWidthSize < 600) {\n            animationSpeedMS = 4;\n        }\n        else if(windowWidthSize < 800) {\n            animationSpeedMS = 3;\n        }\n        else if(windowWidthSize < 1200) {\n            animationSpeedMS = 1.5;\n        }\n        else {\n            animationSpeedMS = 1;\n        }\n        for(let i = 0; i < MAX_NUM_OF_CONTESTANTS; ++i) {\n            this.algoContestantRefs[i].setAnimationSpeed(animationSpeedMS);\n        }\n    }\n\n    // Referenced https://www.w3schools.com/howto/howto_js_sticky_header.asp\n    addOrRemoveStickyEffectOnSortContestHeader = () => {\n        let header = document.getElementById(\"sort-contest-header\");\n        let sticky = 45; //initial header.offsetTop();\n        if(window.innerWidth <= 480) {\n            sticky = 40; //initial header.offsetTop()\n        }\n\n        if (window.pageYOffset > sticky) {\n            header.classList.add(\"sticky\");\n        } else {\n            header.classList.remove(\"sticky\");\n        }\n    }\n\n    render() {\n        const ContestantNumbers = [];\n        for(let i = 0; i < MAX_NUM_OF_CONTESTANTS; ++i) {\n            ContestantNumbers.push(i+1);\n        }\n\n        return (\n            <div className='sort-contest'>\n                <div id=\"sort-contest-header\">\n                    <button id=\"randomize-button\" onClick={() => this.genearateRandomArrayButtonOnClick()}>\n                        Generate Random Array\n                    </button>\n                    <button id=\"nearly-sorted-button\" onClick={() => this.genearateNearySortedArrayButtonOnClick()}>\n                        Generate Nearly Sorted Array\n                    </button>\n                    <button id='sort-add-contestant-button' onClick={() => this.addContestantOnClick()}>Add Contestant</button>\n                    <div id=\"sort-num-of-contestants-label\">\n                        {this.state.numOfContestants} Contestants\n                    </div>\n                    <button id=\"sort-start-contest-button\" onClick={() => this.startContestButtonOnClick()}>Start</button>\n                    <button id=\"sort-skip-to-finish-button\" onClick={() => this.skipToFinishButtonOnClick()}>Skip To Finish</button>\n                </div>\n                <div className='sort-visualizers' id='sort-visualizers'>\n                    {ContestantNumbers.map(contestantNum => (\n                        <SortVisualizerContestant \n                            key={contestantNum}\n                            ref={this.setRef}\n                            array={this.state.array}\n                            algorithmType={ALGORITHM_TYPES[(contestantNum - 1) % ALGORITHM_TYPES.length]}\n                            algorithmTypes={ALGORITHM_TYPES}\n                            contestantNumber={contestantNum}\n                            removeMe={this.removeContestant}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","import React, {Component} from 'react';\nimport './node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      contestantNumber,\n      col,\n      row,\n      weight,\n      isFinish,\n      isStart,\n      isLastRow,\n      isLastColumn,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp\n    } = this.props;\n\n    const extraClassName = isFinish\n      ? ' node-finish'\n      : isStart\n      ? ' node-start'\n      : parseFloat(weight) === Infinity\n      ? ' node-wall'\n      : '';\n\n    const isLastRowClassName = isLastRow\n        ? ' last-row'\n        : '';\n    \n    const isLastColumnClassName = isLastColumn\n        ? ' last-column'\n        : '';\n\n    return (\n      <div\n        id={`${contestantNumber}-node-${row}-${col}`}\n        className={`node node-${row}-${col}${extraClassName}${isLastRowClassName}${isLastColumnClassName} weight-${weight}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp(row, col)}></div>\n    );\n  }\n}","// Referenced: https://www.digitalocean.com/community/tutorials/js-binary-heaps\n// Used in the A*, Dijkstra, and Greedy Best First algorithms to determine what\n//  the next node to visit is. The order that the value was added is used\n//  as the secondary priority to break any ties in priority\n\nexport class PriorityQueue {\n\n    constructor() {\n        this.values = [];\n    }\n\n    enqueue(val, priority, secondaryPriority) {\n        let newNode = new Node(val, priority, secondaryPriority);\n        this.values.push(newNode);\n        let index = this.values.length - 1;\n        const current = this.values[index];\n    \n        while (index > 0) {\n            let parentIndex = Math.floor((index - 1) / 2);\n            let parent = this.values[parentIndex];\n    \n            if (this.enquePrioritize(parent, current)) {\n                this.values[parentIndex] = current;\n                this.values[index] = parent;\n                index = parentIndex;\n            } else break;\n        }\n    }\n\n    dequeue() {\n        if(this.values.length <= 1) {\n            return this.values.pop();\n        }\n\n        const max = this.values[0];\n        const end = this.values.pop();\n        this.values[0] = end;\n    \n        let index = 0;\n        const length = this.values.length;\n        const current = this.values[0];\n        while (true) {\n            let leftChildIndex = 2 * index + 1;\n            let rightChildIndex = 2 * index + 2;\n            let leftChild, rightChild;\n            let swap = null;\n    \n            if (leftChildIndex < length) {\n                leftChild = this.values[leftChildIndex];\n                if (this.dequePrioritize(leftChild, current)) swap = leftChildIndex;\n            }\n            if (rightChildIndex < length) {\n                rightChild = this.values[rightChildIndex];\n                if (\n                    (swap === null && this.dequePrioritize(rightChild, current)) ||\n                    (swap !== null && this.dequePrioritize(rightChild, leftChild))\n                )\n                    swap = rightChildIndex;\n            }\n  \n            if (swap === null) break;\n            this.values[index] = this.values[swap];\n            this.values[swap] = current;\n            index = swap;\n        }\n        return max;\n    }\n\n    enquePrioritize(val1, val2) {\n        return val1.priority === val2.priority\n            ? val1.secondaryPriority > val2.secondaryPriority\n            : val1.priority > val2.priority;\n    }\n\n    dequePrioritize(val1, val2) {\n        return val1.priority === val2.priority\n        ? val1.secondaryPriority < val2.secondaryPriority\n        : val1.priority < val2.priority;\n    }\n\n    isEmpty() {\n        if(this.values.length <= 0) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}\n\nclass Node {\n    constructor(val, priority, secondaryPriority) {\n      this.val = val;\n      this.priority = priority;\n      this.secondaryPriority = secondaryPriority;\n    }\n\n    getValue() {\n        return this.val;\n    }\n}","export class DijkstraNode {\n\n    constructor(row, col, weight, distance) {\n        this.row = row;\n        this.col = col;\n        this.weight = weight;\n        this.distance = distance;\n        this.previousNode = null;\n        this.isVisited = false;\n    }\n\n    setWeight(weight) {\n        this.weight = weight;\n    }\n\n    getWeight() {\n        return this.weight;\n    }\n\n    setDistance(distance) {\n        this.distance = distance;\n    }\n\n    getDistance() {\n        return this.distance;\n    }\n\n    setPreviousNode(prevNode) {\n        this.previousNode = prevNode;\n    }\n\n    getPreviousNode() {\n        return this.previousNode;\n    }\n\n    setIsVisited(isVisited) {\n        this.isVisited = isVisited;\n    }\n\n    isNodeVisited() {\n        return this.isVisited;\n    }\n\n    getRow() {\n        return this.row;\n    }\n\n    getCol() {\n        return this.col;\n    }\n\n}","import { PriorityQueue } from \"../dataStructures/TieBreakingMinPriorityQueue\";\nimport { DijkstraNode } from \"../dataStructures/DijkstraNode\";\n\nexport function getDijkstraAnimations(grid, startNode, finishNode) {\n    const animations = [];\n    const dijkstraGrid = getDijkstraGrid(grid, startNode.row, startNode.col);\n    dijkstra(dijkstraGrid, startNode, finishNode, animations);\n    reconstructShortestPath(dijkstraGrid, finishNode, animations);\n    return animations;\n}\n\nfunction dijkstra(grid, startNode, finishNode, animations) {\n    // Animation Codes:\n    //  'v' denotes a visited node at a particular row and column\n    //  'vf' denotes that we have finished visiting a node\n    //  'sp' denotes that we are starting to reconstruct the shortest path on a node\n    //  'spf' denotes that we are finishing to reconstruct the shortest path on a node\n\n    let count = new Counter();\n    let priorityQueue = new PriorityQueue();\n    grid[startNode.row][startNode.col].setDistance(0);\n    priorityQueue.enqueue(grid[startNode.row][startNode.col], 0, count);\n\n    while (!priorityQueue.isEmpty()) {\n        let closestNode = priorityQueue.dequeue().getValue();\n        animations.push(['v', closestNode.getRow(), closestNode.getCol()]);\n        grid[closestNode.getRow()][closestNode.getCol()].setIsVisited(true);\n        animations.push(['vf', closestNode.getRow(), closestNode.getCol()]);\n        if (closestNode.getRow() === finishNode.row && \n            closestNode.getCol() === finishNode.col) return;\n        updateClosestNodeNeighbors(closestNode, grid, priorityQueue, count);\n    }\n}\n\nfunction updateClosestNodeNeighbors(node, grid, priorityQueue, count) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        let altDistance = parseInt(node.getDistance()) + parseInt(neighbor.getWeight());\n        if (altDistance < neighbor.getDistance()) {\n            count.increment();\n            neighbor.setDistance(altDistance);\n            neighbor.setPreviousNode(node);\n            priorityQueue.enqueue(neighbor, neighbor.distance, count.getCount());\n        }\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const row = node.getRow();\n    const col = node.getCol();\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n\n    return neighbors.filter(neighbor => !neighbor.isNodeVisited());\n}\n\nfunction reconstructShortestPath(grid, finishNode, animations) {\n    // Keep track of next and previous node just for the path animations\n    let nextNode = null;\n    let currentNode = grid[finishNode.row][finishNode.col];\n    let previousNode = currentNode.getPreviousNode();\n\n    if(previousNode === null) {\n        return;\n    }\n\n    while (currentNode !== null) {\n        if(nextNode === null) {\n            animations.push(['spf', currentNode.row, currentNode.col, previousNode.row, previousNode.col]);\n        }\n        else if(previousNode === null) {\n            animations.push(['sp', currentNode.row, currentNode.col, nextNode.row, nextNode.col]);\n        }\n        else {\n            animations.push(['sp', currentNode.row, currentNode.col, nextNode.row, nextNode.col]);\n            animations.push(['spf', currentNode.row, currentNode.col, previousNode.row, previousNode.col]);\n        }\n        nextNode = currentNode;\n        currentNode = previousNode;\n        if(previousNode !== null) previousNode = previousNode.getPreviousNode();\n    }\n    return;\n}\n\nfunction getDijkstraGrid(grid) {\n    const numRows = grid.length;\n    const numCols = grid[0].length;\n\n    let nodes = [];\n    for (let row = 0; row < numRows; ++row) {\n        nodes.push([]);\n    }\n\n    for (let row = 0; row < numRows; ++row) {\n        for (let col = 0; col < numCols; ++col) {\n            nodes[row][col] = new DijkstraNode(\n                row, col, parseFloat(grid[row][col].weight), Infinity\n            );\n        }\n    }\n\n    return nodes;\n}\n\n// Counter is used to keep track of the amount of times that we insert \n//  into the priority queue and is used to determine which node will\n//  be visited next if multiple nodes share the same f score or priority\nclass Counter {\n    constructor() {\n        this.count = 1;\n      }\n\n      increment() {\n          this.count++;\n      }\n  \n      getCount() {\n          return this.count;\n      }\n}","export class AStarNode {\n\n    constructor(row, col, weight, fScore, gScore, hScore) {\n        this.row = row;\n        this.col = col;\n        this.weight = weight;\n        this.fScore = fScore;\n        this.gScore = gScore;\n        this.hScore = hScore;\n        this.previousNode = null;\n    }\n\n    setWeight(weight) {\n        this.weight = weight;\n    }\n\n    getWeight() {\n        return this.weight;\n    }\n\n    setFScore(fScore) {\n        this.fScore = fScore;\n    }\n\n    getFScore() {\n        return this.fScore;\n    }\n\n    setGScore(gScore) {\n        this.gScore = gScore;\n    }\n\n    getGScore() {\n        return this.gScore;\n    }\n\n    setHScore(hScore) {\n        this.hScore = hScore;\n    }\n\n    getHScore() {\n        return this.hScore;\n    }\n\n    setPreviousNode(prevNode) {\n        this.previousNode = prevNode;\n    }\n\n    getPreviousNode() {\n        return this.previousNode;\n    }\n\n    getRow() {\n        return this.row;\n    }\n\n    getCol() {\n        return this.col;\n    }\n\n    isWall() {\n        return this.weight === Infinity;\n    }\n\n}","import { AStarNode } from \"../dataStructures/AStarNode\";\nimport { PriorityQueue } from \"../dataStructures/TieBreakingMinPriorityQueue\";\n\nexport function getAStarAnimations(grid, startNode, finishNode) {\n    const animations = [];\n    const aStarGrid = getAStarGrid(grid);\n    aStar(aStarGrid, startNode, finishNode, animations);\n    reconstructShortestPath(aStarGrid, finishNode, animations);\n    return animations;\n}\n\nexport function getShortestPathLength(grid, startNode, finishNode) {\n    const aStarGrid = getAStarGrid(grid);\n    aStar(aStarGrid, startNode, finishNode, []);\n    const startNodeWeight = 1;\n    return findShortestPathLength(aStarGrid, finishNode) - startNodeWeight;\n}\n\nfunction aStar(grid, startNode, finishNode, animations) {\n    // Animation Codes:\n    //  'v' denotes a visited node at a particular row and column\n    //  'vf' denotes that we have finished visiting a node\n    //  'sp' denotes that we are starting to reconstruct the shortest path on a node\n    //  'spf' denotes that we are finishing to reconstruct the shortest path on a node\n\n    let count = new Counter();\n    let openSet = new PriorityQueue();\n    let openSetHash = new Set();\n\n    grid[startNode.row][startNode.col].setGScore(0);\n    grid[startNode.row][startNode.col].setFScore(0);\n\n    const startFScore = calculateHeuristic(startNode, finishNode);\n    grid[startNode.row][startNode.col].setFScore(startFScore);\n    openSet.enqueue(grid[startNode.row][startNode.col], 0, count.getCount());\n    openSetHash.add([startNode.row, startNode.col]);\n\n    while (!openSet.isEmpty()) {\n        let currentNode = openSet.dequeue().getValue();\n        animations.push(['v', currentNode.getRow(), currentNode.getCol()]);\n        openSetHash.delete(currentNode);\n        animations.push(['vf', currentNode.getRow(), currentNode.getCol()]);\n        if (currentNode.getRow() === finishNode.row && \n            currentNode.getCol() === finishNode.col) return;\n        updateCurrentNodeNeighbors(currentNode, grid, openSet, openSetHash, finishNode, count);\n    }\n}\n\nfunction updateCurrentNodeNeighbors(node, grid, openSet, openSetHash, finishNode, count) {\n    const nodeNeighbors = getNodeNeighbors(node, grid);\n    for (const neighbor of nodeNeighbors) {\n        let altGScore = parseInt(node.getGScore()) + parseInt(neighbor.getWeight());\n        if (altGScore < neighbor.getGScore()) {\n            neighbor.setPreviousNode(node);\n            neighbor.setGScore(altGScore);\n            neighbor.setFScore(altGScore + calculateHeuristic(neighbor, finishNode));\n            if(!openSetHash.has([neighbor.getRow(), neighbor.getCol()])) {\n                count.increment();\n                openSet.enqueue(neighbor, neighbor.getFScore(), count.getCount());\n                openSetHash.add([neighbor.getRow(), neighbor.getCol()]);\n            }\n        }\n    }\n}\n\nfunction getNodeNeighbors(node, grid) {\n    const neighbors = [];\n    const row = node.getRow();\n    const col = node.getCol();\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n\n    return neighbors.filter(neighbor => !neighbor.isWall());\n}\n\nfunction reconstructShortestPath(grid, finishNode, animations) {\n    // Keep track of next and previous node just for the path animations\n    let nextNode = null;\n    let currentNode = grid[finishNode.row][finishNode.col];\n    let previousNode = currentNode.getPreviousNode();\n\n    if(previousNode === null) {\n        return;\n    }\n\n    while (currentNode !== null) {\n        if(nextNode === null) {\n            animations.push(['spf', currentNode.row, currentNode.col, previousNode.row, previousNode.col]);\n        }\n        else if(previousNode === null) {\n            animations.push(['sp', currentNode.row, currentNode.col, nextNode.row, nextNode.col]);\n        }\n        else {\n            animations.push(['sp', currentNode.row, currentNode.col, nextNode.row, nextNode.col]);\n            animations.push(['spf', currentNode.row, currentNode.col, previousNode.row, previousNode.col]);\n        }\n        nextNode = currentNode;\n        currentNode = previousNode;\n        if(previousNode !== null) previousNode = previousNode.getPreviousNode();\n    }\n    return;\n}\n\nfunction findShortestPathLength(grid, finishNode) {\n    let currentNode = grid[finishNode.row][finishNode.col];\n    let pathLength = 0;\n\n    while (currentNode !== null) {\n        pathLength += currentNode.getWeight();\n        currentNode = currentNode.getPreviousNode();\n    }\n\n    return pathLength;\n}\n\nfunction calculateHeuristic(node1, node2) {\n    // Used manhatten distance to determine the f score\n    let d1 = Math.abs(node2.row - node1.row);\n    let d2 = Math.abs(node2.col - node1.col);\n    return d1 + d2;\n}\n\nfunction getAStarGrid(grid) {\n    const numRows = grid.length;\n    const numCols = grid[0].length;\n\n    let nodes = [];\n    for (let row = 0; row < numRows; ++row) {\n        nodes.push([]);\n    }\n\n    for (let row = 0; row < numRows; ++row) {\n        for (let col = 0; col < numCols; ++col) {\n            nodes[row][col] = new AStarNode(\n                row, col, parseFloat(grid[row][col].weight), Infinity, Infinity, Infinity\n            );\n        }\n    }\n\n    return nodes;\n}\n\n// Counter is used to keep track of the amount of times that we insert \n//  into the priority queue and is used to determine which node will\n//  be visited next if multiple nodes share the same f score or priority\nclass Counter {\n    constructor() {\n        this.count = 1;\n      }\n\n      increment() {\n          this.count++;\n      }\n  \n      getCount() {\n          return this.count;\n      }\n}","export class GreedyBestFirstNode {\n\n    constructor(row, col, weight, fScore) {\n        this.row = row;\n        this.col = col;\n        this.weight = weight;\n        this.fScore = fScore;\n        this.previousNode = null;\n        this.isVisited = false;\n    }\n\n    setWeight(weight) {\n        this.weight = weight;\n    }\n\n    getWeight() {\n        return this.weight;\n    }\n\n    setFScore(fScore) {\n        this.fScore = fScore;\n    }\n\n    getFScore() {\n        return this.fScore;\n    }\n\n    setPreviousNode(prevNode) {\n        this.previousNode = prevNode;\n    }\n\n    getPreviousNode() {\n        return this.previousNode;\n    }\n\n    setIsVisited(isVisited) {\n        this.isVisited = isVisited;\n    }\n\n    isNodeVisited() {\n        return this.isVisited;\n    }\n\n    getRow() {\n        return this.row;\n    }\n\n    getCol() {\n        return this.col;\n    }\n\n    isWall() {\n        return this.weight === Infinity;\n    }\n\n}","import { GreedyBestFirstNode } from \"../dataStructures/GreedyBestFirstNode\";\nimport { PriorityQueue } from \"../dataStructures/TieBreakingMinPriorityQueue\";\n\nexport function getGreedyBestFirstAnimations(grid, startNode, finishNode) {\n    const animations = [];\n    const aStarGrid = getGreedyBestFirstGrid(grid);\n    greedyBestFirst(aStarGrid, startNode, finishNode, animations);\n    reconstructShortestPath(aStarGrid, finishNode, animations);\n    return animations;\n}\n\nfunction greedyBestFirst(grid, startNode, finishNode, animations) {\n    // Animation Codes:\n    //  'v' denotes a visited node at a particular row and column\n    //  'vf' denotes that we have finished visiting a node\n    //  'sp' denotes that we are starting to reconstruct the shortest path on a node\n    //  'spf' denotes that we are finishing to reconstruct the shortest path on a node\n\n    let count = new Counter();\n    let openSet = new PriorityQueue();\n    let openSetHash = new Set();\n\n    grid[startNode.row][startNode.col].setFScore(0);\n    const startFScore = calculateHeuristic(startNode, finishNode);\n    grid[startNode.row][startNode.col].setFScore(startFScore);\n    grid[startNode.row][startNode.col].setIsVisited(true);\n\n    openSet.enqueue(grid[startNode.row][startNode.col], 0, count.getCount());\n    openSetHash.add([startNode.row, startNode.col]);\n\n    while (!openSet.isEmpty()) {\n        let currentNode = openSet.dequeue().getValue();\n        animations.push(['v', currentNode.getRow(), currentNode.getCol()]);\n        animations.push(['vf', currentNode.getRow(), currentNode.getCol()]);\n        if (currentNode.getRow() === finishNode.row && \n            currentNode.getCol() === finishNode.col) return;\n        updateCurrentNodeNeighbors(currentNode, grid, openSet, openSetHash, finishNode, count);\n    }\n}\n\nfunction updateCurrentNodeNeighbors(node, grid, openSet, openSetHash, finishNode, count) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        if(!openSetHash.has([neighbor.getRow(), neighbor.getCol()])) {\n            count.increment();\n            neighbor.setIsVisited(true);\n            neighbor.setPreviousNode(node);\n            neighbor.setFScore(calculateHeuristic(neighbor, finishNode) + neighbor.getWeight());\n            openSet.enqueue(neighbor, neighbor.getFScore(), count.getCount());\n            openSetHash.add([neighbor.getRow(), neighbor.getCol()]);\n        }\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const row = node.getRow();\n    const col = node.getCol();\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n\n    return neighbors.filter(neighbor => !neighbor.isWall() && !neighbor.isNodeVisited());\n}\n\nfunction reconstructShortestPath(grid, finishNode, animations) {\n    // Keep track of next and previous node just for the path animations\n    let nextNode = null;\n    let currentNode = grid[finishNode.row][finishNode.col];\n    let previousNode = currentNode.getPreviousNode();\n\n    if(previousNode === null) {\n        return;\n    }\n\n    while (currentNode !== null) {\n        if(nextNode === null) {\n            animations.push(['spf', currentNode.row, currentNode.col, previousNode.row, previousNode.col]);\n        }\n        else if(previousNode === null) {\n            animations.push(['sp', currentNode.row, currentNode.col, nextNode.row, nextNode.col]);\n        }\n        else {\n            animations.push(['sp', currentNode.row, currentNode.col, nextNode.row, nextNode.col]);\n            animations.push(['spf', currentNode.row, currentNode.col, previousNode.row, previousNode.col]);\n        }\n        nextNode = currentNode;\n        currentNode = previousNode;\n        if(previousNode !== null) previousNode = previousNode.getPreviousNode();\n    }\n    return;\n}\n\nfunction calculateHeuristic(node1, node2) {\n    // Used manhatten distance to determine the f score\n    let d1 = Math.abs(node2.row - node1.row);\n    let d2 = Math.abs(node2.col - node1.col);\n    return d1 + d2;\n}\n\nfunction getGreedyBestFirstGrid(grid) {\n    const numRows = grid.length;\n    const numCols = grid[0].length;\n\n    let nodes = [];\n    for (let row = 0; row < numRows; ++row) {\n        nodes.push([]);\n    }\n\n    for (let row = 0; row < numRows; ++row) {\n        for (let col = 0; col < numCols; ++col) {\n            nodes[row][col] = new GreedyBestFirstNode(\n                row, col, parseFloat(grid[row][col].weight), Infinity\n            );\n        }\n    }\n\n    return nodes;\n}\n\n// Counter is used to keep track of the amount of times that we insert \n//  into the priority queue and is used to determine which node will\n//  be visited next if multiple nodes share the same f score or priority\nclass Counter {\n    constructor() {\n        this.count = 1;\n      }\n\n      increment() {\n          this.count++;\n      }\n  \n      getCount() {\n          return this.count;\n      }\n}","// Referenced: https://www.digitalocean.com/community/tutorials/js-binary-heaps\n// Used in the breadth first search algorithm to determine which node should be visited next\n\nexport class PriorityQueue {\n\n    constructor() {\n        this.values = [];\n    }\n\n    enqueue(val, priority) {\n        let newNode = new Node(val, priority);\n        this.values.push(newNode);\n        let index = this.values.length - 1;\n        const current = this.values[index];\n    \n        while (index > 0) {\n            let parentIndex = Math.floor((index - 1) / 2);\n            let parent = this.values[parentIndex];\n    \n            if (parent.priority >= current.priority) {\n                this.values[parentIndex] = current;\n                this.values[index] = parent;\n                index = parentIndex;\n            } else break;\n        }\n    }\n\n    dequeue() {\n        if(this.values.length <= 1) {\n            return this.values.pop();\n        }\n\n        const max = this.values[0];\n        const end = this.values.pop();\n        this.values[0] = end;\n    \n        let index = 0;\n        const length = this.values.length;\n        const current = this.values[0];\n        while (true) {\n            let leftChildIndex = 2 * index + 1;\n            let rightChildIndex = 2 * index + 2;\n            let leftChild, rightChild;\n            let swap = null;\n    \n            if (leftChildIndex < length) {\n                leftChild = this.values[leftChildIndex];\n                if (leftChild.priority < current.priority) swap = leftChildIndex;\n            }\n            if (rightChildIndex < length) {\n                rightChild = this.values[rightChildIndex];\n                if (\n                    (swap === null && rightChild.priority < current.priority) ||\n                    (swap !== null && rightChild.priority < leftChild.priority)\n                )\n                    swap = rightChildIndex;\n            }\n  \n            if (swap === null) break;\n            this.values[index] = this.values[swap];\n            this.values[swap] = current;\n            index = swap;\n        }\n        return max;\n    }\n\n    isEmpty() {\n        if(this.values.length <= 0) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}\n\nclass Node {\n    constructor(val, priority) {\n      this.val = val;\n      this.priority = priority;\n    }\n\n    getValue() {\n        return this.val;\n    }\n}","export class BreadthFirstNode {\n\n    constructor(row, col, weight) {\n        this.row = row;\n        this.col = col;\n        this.previousNode = null;\n        this.isExplored = false;\n        this.isWall = (weight === Infinity);\n    }\n\n    setPreviousNode(prevNode) {\n        this.previousNode = prevNode;\n    }\n\n    getPreviousNode() {\n        return this.previousNode;\n    }\n\n    setIsExplored(isExplored) {\n        this.isExplored = isExplored;\n    }\n\n    isNodeExplored() {\n        return this.isExplored;\n    }\n\n    getRow() {\n        return this.row;\n    }\n\n    getCol() {\n        return this.col;\n    }\n\n    isNodeWall() {\n        return this.isWall;\n    }\n\n}","import { PriorityQueue } from \"../dataStructures/MinPriorityQueue\";\nimport { BreadthFirstNode } from \"../dataStructures/BreadthFirstSeachNode\";\n\nexport function getBreadthFirstAnimations(grid, startNode, finishNode) {\n    const animations = [];\n    const breadthFirstGrid = getBreadthFirstGrid(grid, startNode.row, startNode.col);\n    breadthFirstSearch(breadthFirstGrid, startNode, finishNode, animations);\n    reconstructShortestPath(breadthFirstGrid, finishNode, animations);\n    return animations;\n}\n\nfunction breadthFirstSearch(grid, startNode, finishNode, animations) {\n    // Animation Codes:\n    //  'v' denotes a visited node at a particular row and column\n    //  'vf' denotes that we have finished visiting a node\n    //  'sp' denotes that we are starting to reconstruct the shortest path on a node\n    //  'spf' denotes that we are finishing to reconstruct the shortest path on a node\n\n    let count = new Counter();\n    let priorityQueue = new PriorityQueue();\n    priorityQueue.enqueue(grid[startNode.row][startNode.col], count.getCount());\n\n    while (!priorityQueue.isEmpty()) {\n        let closestNode = priorityQueue.dequeue().getValue();\n        animations.push(['v', closestNode.getRow(), closestNode.getCol()]);\n        grid[closestNode.getRow()][closestNode.getCol()].setIsExplored(true);\n        animations.push(['vf', closestNode.getRow(), closestNode.getCol()]);\n        if (closestNode.getRow() === finishNode.row && \n            closestNode.getCol() === finishNode.col) return;\n        updateClosestNodeNeighbors(closestNode, grid, priorityQueue, count);\n    }\n}\n\nfunction updateClosestNodeNeighbors(node, grid, priorityQueue, count) {\n    const unexploredNeighbors = getUnexploredNeighbors(node, grid);\n    for (const neighbor of unexploredNeighbors) {\n            count.increment();\n            neighbor.setIsExplored(true);\n            neighbor.setPreviousNode(node);\n            priorityQueue.enqueue(neighbor, count.getCount());\n        }\n}\n\nfunction getUnexploredNeighbors(node, grid) {\n    const neighbors = [];\n    const row = node.getRow();\n    const col = node.getCol();\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n\n    return neighbors.filter(neighbor => !neighbor.isNodeExplored() && !neighbor.isNodeWall());\n}\n\nfunction reconstructShortestPath(grid, finishNode, animations) {\n    // Keep track of next and previous node just for the path animations\n    let nextNode = null;\n    let currentNode = grid[finishNode.row][finishNode.col];\n    let previousNode = currentNode.getPreviousNode();\n\n    if(previousNode === null) {\n        return;\n    }\n\n    while (currentNode !== null) {\n        if(nextNode === null) {\n            animations.push(['spf', currentNode.row, currentNode.col, previousNode.row, previousNode.col]);\n        }\n        else if(previousNode === null) {\n            animations.push(['sp', currentNode.row, currentNode.col, nextNode.row, nextNode.col]);\n        }\n        else {\n            animations.push(['sp', currentNode.row, currentNode.col, nextNode.row, nextNode.col]);\n            animations.push(['spf', currentNode.row, currentNode.col, previousNode.row, previousNode.col]);\n        }\n        nextNode = currentNode;\n        currentNode = previousNode;\n        if(previousNode !== null) previousNode = previousNode.getPreviousNode();\n    }\n    return;\n}\n\nfunction getBreadthFirstGrid(grid) {\n    const numRows = grid.length;\n    const numCols = grid[0].length;\n\n    let nodes = [];\n    for (let row = 0; row < numRows; ++row) {\n        nodes.push([]);\n    }\n\n    for (let row = 0; row < numRows; ++row) {\n        for (let col = 0; col < numCols; ++col) {\n            nodes[row][col] = new BreadthFirstNode(row, col, parseFloat(grid[row][col].weight));\n        }\n    }\n\n    return nodes;\n}\n\n// Counter is used to keep track of the amount of times that we insert \n//  into the priority queue and is used to determine which node will\n//  be visited next if multiple nodes share the same f score or priority\nclass Counter {\n    constructor() {\n        this.count = 1;\n      }\n\n      increment() {\n          this.count++;\n      }\n  \n      getCount() {\n          return this.count;\n      }\n}","export class DepthFirstNode {\n\n    constructor(row, col, weight) {\n        this.row = row;\n        this.col = col;\n        this.previousNode = null;\n        this.isDiscovered = false;\n        this.isWall = (weight === Infinity);\n    }\n\n    setPreviousNode(prevNode) {\n        this.previousNode = prevNode;\n    }\n\n    getPreviousNode() {\n        return this.previousNode;\n    }\n\n    setIsDiscovered(isDiscovered) {\n        this.isDiscovered = isDiscovered;\n    }\n\n    isNodeDiscovered() {\n        return this.isDiscovered;\n    }\n\n    getRow() {\n        return this.row;\n    }\n\n    getCol() {\n        return this.col;\n    }\n\n    isNodeWall() {\n        return this.isWall;\n    }\n\n}","import { DepthFirstNode } from \"../dataStructures/DepthFirstNode\";\n\nexport function getDepthFirstAnimations(grid, startNode, finishNode) {\n    const animations = [];\n    const depthFirstGrid = getDepthFirstGrid(grid, startNode.row, startNode.col);\n    depthFirstSearch(depthFirstGrid, startNode, finishNode, animations);\n    reconstructShortestPath(depthFirstGrid, finishNode, animations);\n    return animations;\n}\n\nfunction depthFirstSearch(grid, startNode, finishNode, animations) {\n    // Animation Codes:\n    //  'v' denotes a visited node at a particular row and column\n    //  'vf' denotes that we have finished visiting a node\n    //  'sp' denotes that we are starting to reconstruct the shortest path on a node\n    //  'spf' denotes that we are finishing to reconstruct the shortest path on a node\n    let stack = [];\n    let currentNode = grid[startNode.row][startNode.col];\n    currentNode.setIsDiscovered(true);\n    stack.push(currentNode);\n\n    while(stack.length > 0) {\n        currentNode = stack.pop();\n        animations.push(['v', currentNode.getRow(), currentNode.getCol()]);\n        animations.push(['vf', currentNode.getRow(), currentNode.getCol()]);\n        if (currentNode.getRow() === finishNode.row && \n            currentNode.getCol() === finishNode.col) return;\n        const undiscoveredNeighbors = getUndiscoveredNeighbors(currentNode, grid);\n        for(const neighbor of undiscoveredNeighbors) {\n            neighbor.setPreviousNode(currentNode);\n            neighbor.setIsDiscovered(true);\n            stack.push(neighbor);\n        }\n    }\n\n    return;\n}\n\nfunction getUndiscoveredNeighbors(node, grid) {\n    const neighbors = [];\n    const row = node.getRow();\n    const col = node.getCol();\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n\n    return neighbors.filter(neighbor => !neighbor.isNodeDiscovered() && !neighbor.isNodeWall());\n}\n\nfunction reconstructShortestPath(grid, finishNode, animations) {\n    // Keep track of next and previous node just for the path animations\n    let nextNode = null;\n    let currentNode = grid[finishNode.row][finishNode.col];\n    let previousNode = currentNode.getPreviousNode();\n\n    if(previousNode === null) {\n        return;\n    }\n\n    while (currentNode !== null) {\n        if(nextNode === null) {\n            animations.push(['spf', currentNode.row, currentNode.col, previousNode.row, previousNode.col]);\n        }\n        else if(previousNode === null) {\n            animations.push(['sp', currentNode.row, currentNode.col, nextNode.row, nextNode.col]);\n        }\n        else {\n            animations.push(['sp', currentNode.row, currentNode.col, nextNode.row, nextNode.col]);\n            animations.push(['spf', currentNode.row, currentNode.col, previousNode.row, previousNode.col]);\n        }\n        nextNode = currentNode;\n        currentNode = previousNode;\n        if(previousNode !== null) previousNode = previousNode.getPreviousNode();\n    }\n    return;\n}\n\nfunction getDepthFirstGrid(grid) {\n    const numRows = grid.length;\n    const numCols = grid[0].length;\n\n    let nodes = [];\n    for (let row = 0; row < numRows; ++row) {\n        nodes.push([]);\n    }\n\n    for (let row = 0; row < numRows; ++row) {\n        for (let col = 0; col < numCols; ++col) {\n            nodes[row][col] = new DepthFirstNode(row, col, parseFloat(grid[row][col].weight));\n        }\n    }\n\n    return nodes;\n}","//From \"https://jstutorial.medium.com/how-to-code-your-first-algorithm-draw-a-line-ca121f9a1395\"\n\n/*\n    This algorithm is used to get the grid coordinates\n     between the points a mouse skips when they move\n     too quickly when drawing nodes\n*/\nexport let getLinePixelCoordinates = (x1, y1, x2, y2) => {\n    let pixelLinePairs = [];\n\n    // Iterators, counters required by algorithm\n    let x, y, dx, dy, dx1, dy1, px, py, xe, ye, i;\n    // Calculate line deltas\n    dx = x2 - x1;\n    dy = y2 - y1;\n    // Create a positive copy of deltas (makes iterating easier)\n    dx1 = Math.abs(dx);\n    dy1 = Math.abs(dy);\n    // Calculate error intervals for both axis\n    px = 2 * dy1 - dx1;\n    py = 2 * dx1 - dy1;\n    // The line is X-axis dominant\n    if (dy1 <= dx1) {\n        // Line is drawn left to right\n        if (dx >= 0) {\n            x = x1; y = y1; xe = x2;\n        } else { // Line is drawn right to left (swap ends)\n            x = x2; y = y2; xe = x1;\n        }\n        pixelLinePairs.push([x, y]); // Draw first pixel\n        // Rasterize the line\n        for (i = 0; x < xe; i++) {\n            x = x + 1;\n            // Deal with octants...\n            if (px < 0) {\n                px = px + 2 * dy1;\n            } else {\n                if ((dx < 0 && dy < 0) || (dx > 0 && dy > 0)) {\n                    y = y + 1;\n                } else {\n                    y = y - 1;\n                }\n                px = px + 2 * (dy1 - dx1);\n            }\n            // Draw pixel from line span at\n            // currently rasterized position\n            pixelLinePairs.push([x, y]);\n        }\n    } else { // The line is Y-axis dominant\n        // Line is drawn bottom to top\n        if (dy >= 0) {\n            x = x1; y = y1; ye = y2;\n        } else { // Line is drawn top to bottom\n            x = x2; y = y2; ye = y1;\n        }\n        pixelLinePairs.push([x, y]); // Draw first pixel\n        // Rasterize the line\n        for (i = 0; y < ye; i++) {\n            y = y + 1;\n            // Deal with octants...\n            if (py <= 0) {\n                py = py + 2 * dx1;\n            } else {\n                if ((dx < 0 && dy<0) || (dx > 0 && dy > 0)) {\n                    x = x + 1;\n                } else {\n                    x = x - 1;\n                }\n                py = py + 2 * (dx1 - dy1);\n            }\n            // Draw pixel from line span at\n            // currently rasterized position\n            pixelLinePairs.push([x, y]);\n        }\n    }\n\n    return pixelLinePairs;\n }","import React from 'react';\nimport Node from './Node/Node.jsx';\nimport { getDijkstraAnimations } from './pathfindingAlgorithms/Dijkstra.js';\nimport { getAStarAnimations } from './pathfindingAlgorithms/AStar.js';\nimport { getGreedyBestFirstAnimations } from './pathfindingAlgorithms/GreedyBestFirst.js';\nimport { getBreadthFirstAnimations } from './pathfindingAlgorithms/BreadthFirst.js';\nimport { getDepthFirstAnimations } from './pathfindingAlgorithms/DepthFirst.js';\nimport { getLinePixelCoordinates } from './gridAlgorithms/BresenhamLineDrawAlgo.js';\nimport './css/PathfindingVisualizerContestant.css';\n\nconst INITIAL_ANIMATION_SPEED = 8;\n\nconst DEFAULT_BACKGROUND_COLOR = '#f7f7f7'; // light grey\nconst FINISHED_PATHFINDING_BACKGROUND_COLOR = '#edfff2'; // light green\n\nexport default class PathfindingVisualizerContestant extends React.Component {\n\n    static ANIMATION_DELAY_MS = 3000;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [],\n            animationSpeedMS: INITIAL_ANIMATION_SPEED,\n            algorithmType: this.props.algorithmType,\n            allAlgorithmTypes: this.props.algorithmTypes,\n            contestantNumber: this.props.contestantNumber,\n            selectedNodeWeight: this.props.selectedNodeWeight,\n            isMousePressed: false,\n            isStartNodeSelected: false,\n            isFinishNodeSelected: false,\n            lastUpdatedNode: [],\n            numOfNodesVisisted: -1,\n            lengthOfPath: -1,\n            lengthOfShortestPath: -1,\n            numOfAnimationSteps: -1\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if(props.grid !== state.grid){\n            return{ grid: props.grid };\n        }\n        if(props.selectedNodeWeight !== state.selectedNodeWeight) {\n            return{ selectedNodeWeight: props.selectedNodeWeight }\n        }\n        return null;\n    }\n\n    getPathfindingAnimations(startNode, endNode) {\n        let gridCopy = this.state.grid.map((value) => value);\n\n        switch(this.state.algorithmType) {\n            case 'Dijkstra':\n                return getDijkstraAnimations(gridCopy, startNode, endNode);\n            case 'A* Search':\n                return getAStarAnimations(gridCopy, startNode, endNode);\n            case 'Greedy Best-first Search':\n                return getGreedyBestFirstAnimations(gridCopy, startNode, endNode);\n            case 'Breadth-first Search':\n                return getBreadthFirstAnimations(gridCopy, startNode, endNode);\n            case 'Depth-first Search':\n                return getDepthFirstAnimations(gridCopy, startNode, endNode);\n            default:\n                console.log(\"Error: Unexpected Algorithm Type\");\n                return null;\n        }\n    }\n\n    doAnimationNextStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const row = animationStepInfo[1];\n        const col = animationStepInfo[2];\n\n        const currentNode = document.getElementById(\n            `${this.state.contestantNumber}-node-${row}-${col}`\n        );\n\n        // visit node case\n        if (animationCode === 'v') {\n            setTimeout(() => {\n                currentNode.classList.add('visited');\n            }, currentStepNumber * this.state.animationSpeedMS + PathfindingVisualizerContestant.ANIMATION_DELAY_MS);\n            return;\n        }\n        // draw shortest path line cases\n        else if(animationCode === 'sp') {\n            const nextRow = animationStepInfo[3];\n            const nextCol = animationStepInfo[4];\n            setTimeout(() => {\n                this.addShortestPathLineToNode(currentNode, row, col, nextRow, nextCol);\n            }, currentStepNumber * this.state.animationSpeedMS + PathfindingVisualizerContestant.ANIMATION_DELAY_MS);\n            return;\n        }\n        else if(animationCode === 'spf') {\n            setTimeout(() => {\n                const prevRow = animationStepInfo[3];\n                const prevCol = animationStepInfo[4];\n                this.addShortestPathLineToNode(currentNode, row, col, prevRow, prevCol);\n            }, currentStepNumber * this.state.animationSpeedMS + PathfindingVisualizerContestant.ANIMATION_DELAY_MS);\n            return;\n        }\n    }\n\n    doAllAnimationStepsAtOnce(allAnimationData) {\n        for(let i = 0; i < allAnimationData.length; ++i) {\n            this.doNextAnimationStepInstantly(allAnimationData[i]);\n        }\n    }\n\n    doNextAnimationStepInstantly(animationStepInfo) {\n        const animationCode = animationStepInfo[0];\n        const row = animationStepInfo[1];\n        const col = animationStepInfo[2];\n\n        const currentNode = document.getElementById(\n            `${this.state.contestantNumber}-node-${row}-${col}`\n        );\n\n        // visit node case\n        if (animationCode === 'v') {\n            currentNode.classList.add('visited-no-animation');\n            return;\n        }\n        // draw shortest path line cases\n        else if(animationCode === 'sp') {\n            const nextRow = animationStepInfo[3];\n            const nextCol = animationStepInfo[4];\n            this.addShortestPathLineToNode(currentNode, row, col, nextRow, nextCol);\n            return;\n        }\n        else if(animationCode === 'spf') {\n            const prevRow = animationStepInfo[3];\n            const prevCol = animationStepInfo[4];\n            this.addShortestPathLineToNode(currentNode, row, col, prevRow, prevCol);\n            return;\n        }\n    }\n\n    addShortestPathLineToNode(node, row, col, adjacentPathRow, adjacentPathCol) {\n        let visitedMarker = document.createElement(\"DIV\");\n        if(row === adjacentPathRow) {\n            if(col < adjacentPathCol) {\n                visitedMarker.setAttribute(\"class\", 'shortest-path shortest-path-right');\n            }\n            else {\n                visitedMarker.setAttribute(\"class\", 'shortest-path shortest-path-left');\n            }\n        }\n        else if(col === adjacentPathCol) {\n            if(row < adjacentPathRow) {\n                visitedMarker.setAttribute(\"class\", 'shortest-path shortest-path-bottom');\n            }\n            else {\n                visitedMarker.setAttribute(\"class\", 'shortest-path shortest-path-top');\n            }\n        }\n\n        node.appendChild(visitedMarker);\n    }\n\n    scheduleAlgorithmIsNowFinishedCommands(lastAnimationStepNumber, algorithmPlace) {\n        setTimeout(() => {\n            this.handleAlgorithmIsNowFinished(algorithmPlace);\n        }, lastAnimationStepNumber * this.state.animationSpeedMS + PathfindingVisualizerContestant.ANIMATION_DELAY_MS);\n    }\n\n    handleAlgorithmIsNowFinished(algorithmPlace) {\n        this.createAlgorithmPlacelabel(algorithmPlace);\n        document.getElementById(`pathfinding-visualizer-${this.state.contestantNumber}`).style.backgroundColor = FINISHED_PATHFINDING_BACKGROUND_COLOR;\n        document.getElementById(`grid-container-${this.state.contestantNumber}`).style.borderColor = '#0e7424';\n    }\n\n    resetVisualizationStyling() {\n        document.getElementById(`pathfinding-visualizer-${this.state.contestantNumber}`).style.backgroundColor = DEFAULT_BACKGROUND_COLOR;\n        document.getElementById(`grid-container-${this.state.contestantNumber}`).style.borderColor = '#3b3b3b';\n    }\n\n    createAlgorithmPlacelabel(algorithmPlace) {\n        let pathfindingVisualizerContestant = document.getElementById(`pathfinding-visualizer-${this.state.contestantNumber}`);\n        let placeLabel = document.createElement(\"DIV\");\n        placeLabel.setAttribute(\"id\", `path-place-label-${this.state.contestantNumber}`);\n        placeLabel.setAttribute(\"class\", 'path-place-label');\n\n        let placeLabelText;\n        if(algorithmPlace === 1) {\n            const GOLD = '#c7b620';\n            placeLabel.style.backgroundColor = GOLD;\n            placeLabelText = document.createTextNode('1st Place');\n        }\n        else if(algorithmPlace === 2) {\n            const SILVER = '#929292';\n            placeLabel.style.backgroundColor = SILVER;\n            placeLabelText = document.createTextNode('2nd Place');\n        }\n        else if(algorithmPlace === 3) {\n            const BRONZE = '#ab7627';\n            placeLabel.style.backgroundColor = BRONZE;\n            placeLabelText = document.createTextNode('3rd Place');\n        }\n        else {\n            const DEFAULT = '#636363';\n            placeLabel.style.backgroundColor = DEFAULT;\n            placeLabelText = document.createTextNode(`${algorithmPlace}th Place`);\n        }\n\n        placeLabel.appendChild(placeLabelText);\n        pathfindingVisualizerContestant.appendChild(placeLabel);\n    }\n\n    destructAlgorithmPlaceLabel() {\n        let placeLabel = document.getElementById(`path-place-label-${this.state.contestantNumber}`);\n        if(placeLabel !== null) {\n            placeLabel.remove();\n        }\n    }\n\n    createAlgorithmStatsLabel() {\n        let sortVisualizerContestant = document.getElementById(`pathfinding-visualizer-${this.state.contestantNumber}`);\n        let statsLabel = document.createElement(\"DIV\");\n        statsLabel.setAttribute(\"id\", `path-stats-label-${this.state.contestantNumber}`);\n        statsLabel.setAttribute(\"class\", 'path-stats-label');\n\n        let placeLabelColor = document.getElementById(`path-place-label-${this.state.contestantNumber}`).style.backgroundColor;\n        statsLabel.style.borderColor = placeLabelColor;\n\n        let statsLabelText;\n        if(this.state.lengthOfPath !== 0) {\n            statsLabelText = document.createTextNode(\n                `Final Stats: ${this.state.numOfNodesVisisted} Nodes Visited For A ${this.state.lengthOfPath} Path Length`\n            );\n            let shortestPathLabel = document.createElement(\"DIV\");\n            let shortestPathLabelText;\n            if(this.state.lengthOfPath === this.state.lengthOfShortestPath) {\n                shortestPathLabel.setAttribute(\"class\", 'shortest-path-found-label');\n                shortestPathLabelText = document.createTextNode(\"SP\");\n            }\n            else {\n                shortestPathLabel.setAttribute(\"class\", 'shortest-path-not-found-label');\n                shortestPathLabelText = document.createTextNode(\"!SP\");   \n            }\n            shortestPathLabel.appendChild(shortestPathLabelText);\n            sortVisualizerContestant.appendChild(shortestPathLabel);\n        }\n        else {\n            statsLabelText = document.createTextNode(\n                `Final Stats: ${this.state.numOfNodesVisisted} Nodes Visited and No Path Found`\n            );\n        }\n        \n        statsLabel.appendChild(statsLabelText);\n        sortVisualizerContestant.appendChild(statsLabel);\n    }\n\n    destructAlgorithmStatsLabel() {\n        let statsLabel = document.getElementById(`path-stats-label-${this.state.contestantNumber}`);\n        if(statsLabel !== null) {\n            statsLabel.remove();\n        }\n    }\n\n    handleMouseDown(row, col) {\n        if(!this.isStartOrFinishNode(row, col)) {\n            this.updateGridNodeWithSelectedWeight(row, col);\n        }\n        else {\n            if(this.state.grid[row][col].isStart) {\n                this.placeStartNode(row, col);\n                this.selectStartNode(row, col);\n            }\n            else {\n                this.placeFinishNode(row, col);\n                this.selectFinishNode(row, col);\n            }\n        }\n    }\n\n    handleMouseEnter(row, col) {\n        if(this.state.isMousePressed === true) {\n            if(this.state.isStartNodeSelected) {\n                this.addHoverStylingToAllGridNodes(row, col, 'selected-start');\n            }\n            else if(this.state.isFinishNodeSelected) {\n                this.addHoverStylingToAllGridNodes(row, col, 'selected-finish');\n            }\n            else {\n                if(!this.isStartOrFinishNode(row, col)) {\n                    this.updateGridNodeWithSelectedWeight(row, col);\n                    if(!this.isLastUpdatedNodeAdjacentToCurrentNode(row, col)) {\n                        this.fillInSkippedNodes(row, col);\n                    }\n                }\n            }\n            this.setState({...this.state, lastUpdatedNode: [row, col]});\n        }\n    }\n\n    handleMouseUp(row, col) {\n        if(this.state.isStartNodeSelected) {\n            this.placeStartNode(row, col);\n        }\n        else if(this.state.isFinishNodeSelected) {\n            this.placeFinishNode(row, col);\n        }\n        this.setState({...this.state, lastUpdatedNode: [row, col]});\n    }\n\n    placeStartNode(row, col) {\n        if(!this.state.grid[row][col].isFinish) {\n            this.props.updateStartNode(row, col);\n            const allStartNodes = document.getElementsByClassName(`node-${row}-${col}`);\n            for(let i = 0; i < allStartNodes.length; ++i) {\n                allStartNodes[i].classList.add('node-start');\n            }\n            this.removeHoverStylingFromLastUpdatedNode('selected-start'); \n        }\n        else {\n            let finNodeCol = col;\n            if(col > 1) { finNodeCol-- }\n            else { finNodeCol++ }\n            setTimeout(() => {\n                this.props.updateFinishNode(row, finNodeCol)\n            }, 100);\n            setTimeout( () => {\n                this.props.updateStartNode(row, col);\n            }, 200);\n        }\n    }\n\n    placeFinishNode(row, col) {\n        if(!this.state.grid[row][col].isStart) {\n            this.props.updateFinishNode(row, col);\n            const allFinishNodes = document.getElementsByClassName(`node-${row}-${col}`);\n            for(let i = 0; i < allFinishNodes.length; ++i) {\n                allFinishNodes[i].classList.add('node-finish');\n            }\n            this.removeHoverStylingFromLastUpdatedNode('selected-finish');\n        }\n        else {\n            let startNodeCol = col;\n            if(col > 0) { startNodeCol-- }\n            else { startNodeCol++ }\n            setTimeout(() => {\n                this.props.updateStartNode(row, startNodeCol);\n            }, 100);\n            setTimeout(() => {\n                this.props.updateFinishNode(row, col);\n            }, 200);\n        }\n    }\n\n    isStartOrFinishNode(row, col) {\n        const node = this.state.grid[row][col];\n        return (node.isStart || node.isFinish);\n    }\n\n    isLastUpdatedNodeAdjacentToCurrentNode(currentRow, currentCol) {\n        return (Math.abs(currentRow - this.state.lastUpdatedNode[0]) <= 1)\n                    && (Math.abs(currentCol - this.state.lastUpdatedNode[1]) <= 1);\n    }\n\n    updateGridNodeWithSelectedWeight(row, col) {\n        this.props.updateGridNodeWeight(row, col, this.state.selectedNodeWeight);\n        this.setState({\n            ...this.state,\n            isMousePressed: true,\n            lastUpdatedNode: [row, col]\n        });\n    }\n\n    selectStartNode(row, col) {\n        this.setState({\n            ...this.state,\n            isStartNodeSelected: true,\n            isMousePressed: true,\n            lastUpdatedNode: [row, col]\n        });\n        const allStartNodes = document.getElementsByClassName(`node-${row}-${col}`);\n        for(let i = 0; i < allStartNodes.length; ++i) {\n            allStartNodes[i].classList.remove('node-start');\n        }\n        this.addHoverStylingToAllGridNodes(row, col, 'selected-start');\n    }\n\n    selectFinishNode(row, col) {\n        this.setState({\n            ...this.state,\n            isFinishNodeSelected: true,\n            isMousePressed: true,\n            lastUpdatedNode: [row, col]\n        });\n        const allFinishNodes = document.getElementsByClassName(`node-${row}-${col}`);\n        for(let i = 0; i < allFinishNodes.length; ++i) {\n            allFinishNodes[i].classList.remove('node-finish');\n        }\n        this.addHoverStylingToAllGridNodes(row, col, 'selected-finish');\n    }\n\n    fillInSkippedNodes(currRow, currCol) {\n\n        const updatedNodesCoordinates = [];\n\n        const x1 = this.state.lastUpdatedNode[1];\n        const y1 = this.state.lastUpdatedNode[0];\n        const x2 = currCol;\n        const y2 = currRow;\n\n        //draw a line between the skipped nodes in our grid\n        const lineCoordinates = getLinePixelCoordinates(x1, y1, x2, y2);\n        for(let i = 0; i < lineCoordinates.length; ++i) {\n            const row = lineCoordinates[i][1];\n            const col = lineCoordinates[i][0];\n            if(!this.isStartOrFinishNode(row, col)) {\n                updatedNodesCoordinates.push([row, col]);\n            }\n        }\n\n        this.props.updateMultipleNodeWeights(updatedNodesCoordinates, this.state.selectedNodeWeight);\n    }\n\n    updateAlgorithmType(algorithmType) {\n        this.setState({...this.state, algorithmType: algorithmType});\n    }\n\n    algorithmDropDownButtonOnClick(algorithmType) {\n        this.updateAlgorithmType(algorithmType);\n        this.destructAlgorithmPlaceLabel();\n        this.destructAlgorithmStatsLabel();\n        this.resetVisualizationStyling();\n    }\n\n    resetMouseEvents() {\n        if(this.state.isStartNodeSelected) {\n            this.removeHoverStylingFromLastUpdatedNode('selected-start');\n            this.setStartNodeAtLastUpdatedNode();\n        }\n        if(this.state.isFinishNodeSelected) {\n            this.removeHoverStylingFromLastUpdatedNode('selected-finish');\n            this.setFinishNodeAtLastUpdatedNode();\n        }\n        this.setState({\n            ...this.state,\n            isMousePressed: false,\n            isStartNodeSelected: false,\n            isFinishNodeSelected: false\n        });\n    }\n\n    render() {\n        return (\n            <>\n            <div className='pathfinding-visualizer-contestant' id={`pathfinding-visualizer-${this.state.contestantNumber}`}\n                onMouseEnter={() => this.resetMouseEvents()} onMouseUp={() => this.resetMouseEvents()}>\n                <div className=\"path-dropdown\">\n                    <div id='path-algorithm-dropdown-label'>{this.state.algorithmType}<div className='dropdown-arrow'>▼</div></div>\n                    <div className=\"path-dropdown-content\">\n                        {this.state.allAlgorithmTypes.map((algorithmType) => (\n                        (algorithmType !== this.state.algorithmType) ?\n                            <button\n                                key={algorithmType}\n                                className='path-algorithm-dropdown-button'\n                                onClick={() => this.algorithmDropDownButtonOnClick(algorithmType)}\n                            >{algorithmType}</button>\n                            : null\n                        ))}\n                    </div>\n                </div>\n                <div className='grid-container' id={`grid-container-${this.state.contestantNumber}`}>\n                    {this.state.grid.map((row, rowIdx) => {\n                        return (\n                        <div className='grid-row' key={rowIdx}>\n                            {row.map((node, nodeIdx) => {\n                                const {row, col, weight, isFinish, isStart, isWall, isLastRow, isLastColumn} = node;\n                                return (\n                                    <Node\n                                    key={nodeIdx}\n                                    contestantNumber={this.state.contestantNumber}\n                                    row={row}\n                                    col={col}\n                                    weight={weight}\n                                    isFinish={isFinish}\n                                    isStart={isStart}\n                                    isWall={isWall}\n                                    isLastRow={isLastRow}\n                                    isLastColumn={isLastColumn}\n                                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                    onMouseEnter={(row, col) =>\n                                        this.handleMouseEnter(row, col)\n                                    }\n                                    onMouseUp={(row, col) => this.handleMouseUp(row, col)}></Node>\n                                );\n                            })}\n                        </div>\n                        );\n                    })}\n                </div>\n                <button className='path-remove-button' onClick={() => this.props.removeMe(this.state.contestantNumber)}>-</button>\n                </div>\n            </>\n        );\n    }\n\n    setAllAlgorithmStatInfo(numOfNodesVisisted, lengthOfPath, lengthOfShortestPath, numOfAnimationSteps) {\n        this.setState({\n            ...this.state,\n            numOfNodesVisisted: numOfNodesVisisted,\n            lengthOfPath: lengthOfPath,\n            lengthOfShortestPath: lengthOfShortestPath,\n            numOfAnimationSteps: numOfAnimationSteps\n        });\n    }\n\n    setAlgorithmType(algorithmType) {\n        this.setState({...this.state, algorithmType: algorithmType});\n    }\n\n    getAlgorithmType() {\n        return this.state.algorithmType;\n    }\n\n    getNumOfAnimationsSteps() {\n        return this.state.numOfAnimationSteps;\n    }\n\n    getAnimationSpeed() {\n        return this.state.animationSpeedMS;\n    }\n\n    addHoverStylingToAllGridNodes(row, col, hoverType) {\n        this.removeHoverStylingFromLastUpdatedNode(hoverType);\n        const allStartSelectedNodes = document.getElementsByClassName(`node-${row}-${col}`);\n        for(let i = 0; i < allStartSelectedNodes.length; ++i) {\n            allStartSelectedNodes[i].classList.add(`${hoverType}-hover`);\n        }\n    }\n\n    removeHoverStylingFromLastUpdatedNode(hoverType) {\n        const prevNodeRow = this.state.lastUpdatedNode[0];\n        const prevNodeCol = this.state.lastUpdatedNode[1];\n        const allPrevStartSelectedNodes = document.getElementsByClassName(`node-${prevNodeRow}-${prevNodeCol}`);\n        for(let i = 0; i < allPrevStartSelectedNodes.length; ++i) {\n            allPrevStartSelectedNodes[i].classList.remove(`${hoverType}-hover`);\n        }\n    }\n\n    setStartNodeAtLastUpdatedNode() {\n        const prevNodeRow = this.state.lastUpdatedNode[0];\n        const prevNodeCol = this.state.lastUpdatedNode[1];\n        this.props.updateStartNode(prevNodeRow, prevNodeCol);\n    }\n\n    setFinishNodeAtLastUpdatedNode() {\n        const prevNodeRow = this.state.lastUpdatedNode[0];\n        const prevNodeCol = this.state.lastUpdatedNode[1];\n        this.props.updateFinishNode(prevNodeRow, prevNodeCol);\n    }\n}","export function getRecursiveDivisionMazeWallCoordinates(numRows, numCols, startNode, finishNode) {\n    const mazeWallPoints = [];\n    const passagePoints = [];\n    passagePoints.push([startNode.row, startNode.col]);\n    passagePoints.push([finishNode.row, finishNode.col]);\n    addInnerWalls(0, numRows - 1, 0, numCols - 1, mazeWallPoints, passagePoints);\n    return mazeWallPoints;\n}\n\n// Recursively add an inner wall with a hole and then recursively do the\n//  same for two spaces the wall splits. The width and height checks make sure\n//  that the cuts make the maze look better than completely random bisections\nfunction addInnerWalls(minRow, maxRow, minCol, maxCol, mazeWallPoints, passagePoints) {\n    let width = maxCol - minCol;\n    let height = maxRow - minRow;\n\n    if(width <= 0 || height <= 0) return;\n\n    if (width >= height) {\n        // Vertical bisection\n        if (width > 3) {\n            let bisection = Bisect(minCol, maxCol);\n            let min = minRow + 1;\n            let max = maxRow - 1;\n            let passage = Passage(min, max - 1);\n\n            for (let row = minRow; row <= maxRow; ++row) {\n                const point = [row, bisection];\n                if(!doesArrayIncludePair(passagePoints, point)) {\n                    if (row === passage) {\n                        passagePoints.push(point);\n                        continue;\n                    } else {\n                        mazeWallPoints.push(point);\n                    }\n                }\n            }\n\n            addInnerWalls(minRow, maxRow, minCol, bisection, mazeWallPoints, passagePoints);\n            addInnerWalls(minRow, maxRow, bisection, maxCol, mazeWallPoints, passagePoints);\n        }\n    } else {\n        // Horizontal bisection\n        if (height > 3) {\n            let bisection = Bisect(minRow, maxRow);\n            let min = minCol;\n            let max = maxCol;\n            let passage = Passage(min, max - 1);\n\n            for (let col = minCol; col <= maxCol; ++col) {\n                const point = [bisection, col];\n                if(!doesArrayIncludePair(passagePoints, point)) {\n                    if (col === passage) {\n                        passagePoints.push(point);\n                        continue;\n                    }\n                    else {\n                        mazeWallPoints.push([bisection, col]);\n                    }\n                }\n            }\n\n            addInnerWalls(minRow, bisection, minCol, maxCol, mazeWallPoints, passagePoints);\n            addInnerWalls(bisection, maxRow, minCol, maxCol, mazeWallPoints, passagePoints);\n        }\n    }\n}\n\n// Used to make sure we do not overwrite a passage point, it feels really innefficient but\n//  this is the simplist implementation of this check I can think of right now.\nfunction doesArrayIncludePair(array, pair) {\n    for(let i = 0; i < array.length; ++i) {\n        if(array[i][0] === pair[0] && array[i][1] === pair[1]) return true;\n    }\n    return false;\n}\n\nfunction Passage(max, min) {\n    return (Math.floor(randomNumber(min, max) / 2) * 2) + 1;\n}\n\nfunction Bisect(min, max) {\n    return Math.floor(randomNumber(min, max) / 2) * 2;\n}\n\nfunction randomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","const WALL_APPEARANCE_PERCENTAGE = 25;\n\nexport function getRandomWallsCoordinates(numRows, numCols, startNode, finishNode) {\n    const wallCoordinates = generateRandomWalls(numRows, numCols, startNode, finishNode);\n    return wallCoordinates;\n}\n\nfunction generateRandomWalls(numRows, numCols, startNode, finishNode) {\n    const wallCoordinates = [];\n\n    for(let r = 0; r < numRows; ++r) {\n        for(let c = 0; c < numCols; ++c) {\n            if((r === startNode.row && c === startNode.col) || \n               (r === finishNode.row && c === finishNode.col)) {\n                   continue;\n            }\n            if(doesWallAppearAtCurrentPosition()) {\n                wallCoordinates.push([r, c]);\n            }\n        }\n    }\n\n    return wallCoordinates;\n}\n\nfunction doesWallAppearAtCurrentPosition() {\n    return getRandomInt(101) < WALL_APPEARANCE_PERCENTAGE;\n}\n\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n}","export function getPremadeMap(numRows, numCols, mapType) {\n    let fullMapGrid;\n    switch(mapType) {\n        case 1:\n            fullMapGrid = getAllMap1NodeWeights();\n            break;\n        case 2:\n            fullMapGrid = getAllMap2NodeWeights();\n            break;\n        case 3:\n            fullMapGrid = getAllMap3NodeWeights();\n            break;\n        default:\n    }\n    const lastFullMapColIndex = fullMapGrid[0].length - 1;\n    const selectedMapGrid = [];\n\n    for(let r = 0; r < numRows; ++r) {\n        selectedMapGrid.push([]);\n        for(let c = 0; c < numCols; ++c) {\n            selectedMapGrid[r][c] = fullMapGrid[r][c % lastFullMapColIndex];\n        }\n    }\n\n    return selectedMapGrid;\n}\n\nfunction getAllMap1NodeWeights() {\n    return [[25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 5, 10, 25, 25, 25],\n            [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 10, 10, 10, 25, 25, 25, 25, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 10, 10, 25, 25, 25, 25, 25, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 25, 25, 2, 2, 5, 5, 5, 5, 5, 10, 25, 25, 25],\n            [25, 25, 10, 10, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 10, 5, 10, 25, 25, 10, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 2, 2, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 2, 2, 25, 25, 25, 25, 25, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 25, 25, 25, 10, 10, 10, 10, 25, 25, 25, 25, 25, Infinity, 2, 2, 2, 2, 2, 2, 2, 2, Infinity, 2, 2, 2, 2, Infinity, 2, 2, 2, 2, 2, 10, 10, 5, 10, 10, 10, 10, 25, 25, 25],\n            [25, 10, 10, 10, 5, 5, 10, 10, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 10, 10, 10, 5, 5, 5, 5, 5, 10, 10, 10, 5, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 10, 10, 2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 10, 10, 10, 10, 2, 2, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 25, 25, 25, 2, 2, 25, 25, 25, 25, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 5, 10, 10, 25, 25, 25, 25, 25, Infinity, 2, Infinity, Infinity, Infinity, Infinity, 2, Infinity, 2, Infinity, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 25, 25, 25, 25, 10, 10, 10, 10, 25, 25, 25, 25, 25],\n            [25, 10, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 25, 25, 25, 25, 25, 10, 10, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 2, 25, 10, 10, 10, 10, 25, 25, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 25, 25, 25, 2, 2, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 2, 2, 10, 10, 10, 10, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 2, 2, 25, 25, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 25, 25, 25, 25, Infinity, 2, Infinity, 2, 2, Infinity, 2, Infinity, 2, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\n            [25, 10, 10, 5, 5, 5, 5, 5, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 25, 25, 25, 25, 25, 10, 5, 5, 5, 5, 10, 25, 25, 25, 25, 25, 25, 25, 25, 2, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 10, 10, 10, 25, 25, 25, 25, 25, 2, 2, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 2, 2, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 2, 2, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 25, 25, 25, 25, Infinity, 2, Infinity, 2, Infinity, Infinity, Infinity, Infinity, Infinity, 2, 2, 2, Infinity, 2, Infinity, 2, Infinity, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\n            [25, 10, 10, 5, 5, 5, 5, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 10, 25, 25, 25, 25, 25, 25, 25, 25, 2, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 2, 2, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 2, 2, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 25, 25, 25, 25, Infinity, Infinity, Infinity, 2, Infinity, 2, 2, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\n            [25, 25, 10, 10, 5, 5, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 25, 25, 25, 25, 25, 25, 10, 10, 5, 5, 2, 2, 25, 25, 25, Infinity, Infinity, Infinity, Infinity, Infinity, 2, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 25, 25, 25, 25, 25, 25, 2, 2, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 2, 2, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 2, Infinity, 2, 2, 2, Infinity, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\n            [25, 25, 25, 10, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 2, 2, 25, 25, Infinity, 2, 2, 2, Infinity, 2, 2, 2, Infinity, Infinity, 2, 2, 2, 2, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 25, 25, 25, 25, 25, 10, 10, 2, 10, 10, 10, 25, 25, 25, 25, 25, 25, 10, 10, 2, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 25, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 25, 25, Infinity, 2, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 2, Infinity, Infinity, Infinity, Infinity, Infinity, 25, 25, 25, 25, 25, 25, 10, 10, 10, 25, 25, 25, 25],\n            [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 2, 2, 25, Infinity, 2, Infinity, 2, Infinity, Infinity, Infinity, 2, Infinity, 2, 2, Infinity, Infinity, Infinity, Infinity, Infinity, 2, 2, 2, Infinity, 2, Infinity, Infinity, Infinity, 2, Infinity, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 5, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 25, 25, Infinity, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 25, 25, 25, 25, 10, 10, 10, 10, 10, 10, 10, 25, 25],\n            [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 2, 2, Infinity, 2, Infinity, Infinity, Infinity, 2, Infinity, 2, 2, 2, Infinity, Infinity, 2, 2, 2, Infinity, Infinity, Infinity, Infinity, Infinity, 2, 2, 2, Infinity, 2, Infinity, 25, 25, 25, 25, 10, 5, 5, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 10, 5, 5, 5, 5, 10, 25, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 10, 10, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 25, 25, Infinity, 2, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 2, Infinity, 2, Infinity, 25, 25, 25, 10, 10, 5, 5, 5, 5, 5, 10, 25, 25],\n            [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 2, 2, 2, Infinity, 2, 2, 2, Infinity, Infinity, Infinity, Infinity, Infinity, 2, 2, Infinity, 2, Infinity, 2, 2, 2, 2, 2, Infinity, 2, Infinity, 2, Infinity, 25, 25, 25, 25, 10, 10, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 25, 10, 10, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 10, 25, 25, 25, 25, 25, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 25, 25, Infinity, 2, Infinity, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 2, Infinity, 25, 25, 25, 10, 5, 5, 5, 5, 5, 5, 10, 25, 25],\n            [25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 5, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, 2, 2, Infinity, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 2, Infinity, 25, 25, 25, 25, 25, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 5, 10, 25, 25, 25, 25, 25, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 25, 25, Infinity, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 2, Infinity, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 10, 10, 25, 25],\n            [25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, Infinity, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 2, 2, 2, 2, Infinity, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, Infinity, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 10, 10, 10, 25, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 25, 25, 25, 10, 10, 10, 10, 10, 10, 10, 25, 25, 25],\n            [25, 25, 25, 25, 25, 25, 25, 10, 5, 5, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25]]\n}\n\nfunction getAllMap2NodeWeights() {\n    return [[25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 2, 5, 5, 25, 25, 5, 5, 2, 5, 5, 5, 25, 25, 25, 25, 25, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25, 25, 25, 25, 25, 5, 5, 5, 5, 5, 2, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 25, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 2, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\n            [10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 5, 2, 2, 2, 2, 5, 5, 5, 5, 2, 2, 2, 2, 2, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 2, 5, 25, 25, 25, 5, 5, 2, 5, 5, 5, 25, 25, 25, 25, 25, 25, 5, 5, 5, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 5, 2, 2, 2, 5, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 10, 10, 10, 10, 10, 10, 10, 5, 5, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 25, 25, 5, 5, 2, 5, 5, 5, 10, 10, 10, 10, 10, 25, 25, 25, 25, 10, 10, 10, 10, 10, 10, 10],\n            [10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 5, 5, 2, 5, 5, 2, 5, 5, 5, 5, 2, 5, 5, 5, 5, 25, 5, 5, 2, 2, 5, 5, 2, 2, 2, 2, 5, 25, 25, 5, 2, 2, 2, 5, 5, 5, 5, 5, 25, 25, 25, 25, 5, 5, 5, Infinity, 2, 2, 2, 2, Infinity, 2, 2, 2, 2, Infinity, 2, Infinity, 2, Infinity, 5, 5, 5, 2, 5, 5, 5, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 10, 10, Infinity, 2, 2, 2, 2, 2, 2, 2, 2, 2, Infinity, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 5, 25, 25, 25, 5, 2, 2, 2, 2, 2, 5, 5, 5, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 10],\n            [5, 5, 5, 10, 10, 10, 10, 2, 10, 25, 25, 25, 25, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 5, 25, 25, 25, 5, 2, 5, 5, 5, 2, 5, 5, 2, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 25, 25, 25, 25, 5, 5, Infinity, 2, Infinity, Infinity, Infinity, Infinity, Infinity, 2, Infinity, 2, Infinity, 2, 2, 2, Infinity, 5, 5, 5, 2, 5, 5, 5, 5, 5, 10, 10, 10, 10, 2, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, Infinity, 2, Infinity, Infinity, 2, Infinity, 2, Infinity, Infinity, 2, Infinity, 2, Infinity, Infinity, Infinity, 5, 2, 5, 5, 5, 5, 5, 2, 2, 2, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 2, 5, 5, 25, 25, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n            [2, 2, 5, 5, 5, 5, 5, 2, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 2, 5, 25, 25, 25, 5, 2, 5, 5, 5, 2, 5, 5, 2, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25, 25, 25, 5, 5, Infinity, 2, 2, 2, 2, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 5, 5, 5, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, Infinity, 2, 2, Infinity, 2, Infinity, 2, 2, Infinity, 2, Infinity, 2, 2, 2, Infinity, 5, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2],\n            [5, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25, 25, 25, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 25, 25, 5, 2, 2, 2, 2, 2, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 2, 2, 2, 2, 5, 25, 25, 25, 5, 5, Infinity, 2, Infinity, 2, Infinity, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 2, Infinity, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, Infinity, Infinity, 2, Infinity, 2, Infinity, Infinity, Infinity, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 5, 5, 5, 5, 2, 5, 5, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, Infinity, Infinity, 5, Infinity, 5, 5, 2, 2, 2, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5],\n            [5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 25, 25, 25, 25, 25, 25, 5, 5, 2, 2, 5, 25, 25, 5, 5, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 2, 5, 5, 5, 5, 25, 25, 25, 5, 5, Infinity, Infinity, Infinity, 2, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 2, Infinity, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, Infinity, 2, 2, Infinity, 2, 2, 2, 2, 2, Infinity, 2, Infinity, 2, 2, 2, 2, 2, 5, 5, 2, 5, 25, 25, 25, 5, 5, 2, 5, 5, 5, 5, Infinity, 5, 5, 5, 5, Infinity, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 5, 25, 5, 5, 2, 5, 5, 5, 5, 5, 2, 2, 2, 2, 5, 5, 5],\n            [5, 5, 5, 2, 2, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 25, 25, 25, 25, 25, 5, 5, 5, 2, 5, 25, 25, 25, 5, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 2, 2, 2, 2, 2, 5, 5, 25, 5, 5, 2, 5, 5, 2, 5, 5, 5, 5, 25, 25, 25, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 25, 25, 25, 25, 5, 2, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 2, 5, 5, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 5, 5, 2, 5, 5, 5, 5, 2, 25, 25, 25, 25, 25, 5, 2, 5, 5, 5, 5, Infinity, 5, 5, 5, 5, 5, 5, Infinity, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 25, 25, 5, 2, 2, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5],\n            [5, 5, 5, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 25, 25, 25, 25, 25, 5, 5, 5, 2, 5, 25, 25, 25, 25, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 25, 25, 25, 5, 2, 2, 2, 2, 5, 5, 5, 5, 25, 25, 25, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 25, 25, 25, 25, 5, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 2, 10, 10, 5, 2, 2, 2, Infinity, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, Infinity, 5, 5, 2, 5, 5, 5, 25, 25, 25, 25, 25, 25, 25, 5, 2, 2, 2, 5, 5, Infinity, 5, 5, 5, 5, 5, 5, Infinity, 5, 5, 2, 5, 5, 5, 5, 5, 2, 5, 25, 25, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5],\n            [2, 2, 5, 2, 5, 5, 5, 5, 2, 5, 5, 2, 5, 5, 5, 5, 5, 5, 25, 25, 25, 5, 5, 5, 5, 2, 5, 5, 25, 25, 25, 25, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 5, 2, 5, 25, 25, 25, 25, 5, 5, 2, 5, 5, 5, 5, 5, 5, 25, 25, 25, 5, 5, 5, 5, 2, 5, 5, 5, 5, 25, 25, 25, 25, 5, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 25, 25, 25, 25, 5, 5, 5, 10, 10, 25, 25, 25, 10, 10, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 25, Infinity, 5, 5, 2, 5, 5, 25, 25, 25, 25, 25, 25, 25, 25, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 5, 5, 25, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n            [5, 2, 2, 2, 5, 5, 5, 5, 2, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 5, 5, 25, 25, 25, 5, 5, 5, 10, 10, 10, 10, 25, 25, 25, 25, 10, 5, 2, 5, 5, 25, 25, 25, 5, 5, 2, 5, 5, 5, 5, 5, 5, 25, 25, 25, 5, 5, 5, 5, 2, 5, 5, 5, 25, 25, 25, 25, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 25, 25, 25, 5, 5, 10, 10, 25, 25, 25, 25, 25, 10, 10, 10, 5, Infinity, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, Infinity, 5, 5, 2, 5, 5, 5, 25, 25, 25, 25, 25, 25, 5, 5, 5, 5, 2, 5, 5, 5, Infinity, 5, 5, 5, Infinity, Infinity, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n            [10, 10, 5, 5, 5, 5, 5, 5, 2, 5, 5, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 2, 2, 2, 5, 5, 5, 5, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 10, 10, 2, 5, 5, 5, 25, 25, 25, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 25, 25, 25, 25, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 5, 5, 2, 2, 2, 2, 2, 5, 25, 25, 25, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, Infinity, 5, 5, 5, 5, 25, 25, 5, 5, 5, 2, 2, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10],\n            [25, 10, 10, 10, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 2, 5, 5, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 2, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 25, 25, 25, 25, 5, 5, 5, 5, 5, 5, 5, 25, 25, 25, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 5, 5, 5, 5, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 25, 25, 25, 25, 5, 5, 5, 2, 5, 5, 5, 10, 10, 10, 10, 10, 2, 10, 10, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25],\n            [25, 25, 25, 10, 10, 10, 10, 10, 2, 10, 10, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 10, 2, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 5, 5, 5, 5, 5, 2, 2, 2, 5, 5, 5, 5, 25, 25, 25, 25, 5, 5, 5, 5, 5, 25, 25, 25, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 25, 25, 25, 25, 5, 5, 10, 10, 2, 10, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\n            [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 25, 25, 25, 25, 5, 5, 5, 5, 5, 25, 25, 25, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25]]\n}\n\nfunction getAllMap3NodeWeights() {\n    return [[Infinity, Infinity, 5, 5, 5, 5, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 10, 10, 10, 10, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 25, 25, 25, 25, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity],\n            [Infinity, 5, 5, 5, 5, 5, 5, Infinity, 5, 5, 5, 5, 5, Infinity, 5, 5, 5, 5, 5, Infinity, 5, 5, 5, 5, 5, Infinity, 5, 5, 5, Infinity, 5, Infinity, 5, 5, 5, 5, 5, 5, 5, 5, Infinity, 5, 5, 5, Infinity, 5, 5, 5, Infinity, 5, 5, 5, 5, 5, 5, Infinity, 5, 5, 5, Infinity, 10, 10, 10, 10, 10, 10, Infinity, 10, 10, 10, 10, 10, Infinity, 10, 10, 10, 10, 10, Infinity, 10, 10, 10, 10, 10, 10, Infinity, 10, 10, Infinity, 10, 10, 10, 10, 10, 10, 10, 10, Infinity, 10, 10, 10, Infinity, 10, 10, 10, Infinity, 10, Infinity, 10, 10, 10, Infinity, 10, Infinity, 10, 10, 10, Infinity, Infinity, 10, Infinity, 25, 25, 25, 25, 25, 25, Infinity, 2, 2, 2, Infinity, 2, Infinity, 2, 2, 2, 2, 2, 2, Infinity, 2, 2, Infinity, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 2, Infinity, 2, Infinity, 2, 2, 2, Infinity, 2, 2, 2, 2, 2, Infinity, 2, 2, 2, 2, 2, Infinity],\n            [2, 2, 2, 2, 5, 5, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, Infinity, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 5, 5, 5, Infinity, 5, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, Infinity, Infinity, Infinity, Infinity, 5, Infinity, Infinity, 5, Infinity, 5, Infinity, 5, 2, 2, 2, 2, 10, 10, 10, Infinity, 10, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, 10, Infinity, Infinity, 10, Infinity, Infinity, Infinity, 10, Infinity, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, 10, 10, 10, Infinity, 10, 10, 10, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, 10, 10, 10, 10, 2, 2, 2, 2, 25, 25, 25, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, Infinity, Infinity, Infinity, 2, Infinity, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, 2, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, Infinity, Infinity, 2, Infinity, Infinity, Infinity, 2, 2],\n            [Infinity, 5, 5, 2, 5, 5, 5, Infinity, 5, Infinity, 5, Infinity, 5, 5, 5, Infinity, 5, 5, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, Infinity, Infinity, 5, Infinity, 5, Infinity, 5, 5, 5, 5, 5, 5, Infinity, 5, Infinity, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 10, 10, 2, 10, 10, 10, Infinity, 10, 10, 10, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, 10, 10, 10, Infinity, 10, 10, 10, 10, 10, Infinity, 10, Infinity, 10, Infinity, 10, 10, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, 10, 10, 10, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 25, 25, 2, 25, 25, 25, Infinity, 2, Infinity, 2, Infinity, 2, 2, 2, Infinity, 2, 2, 2, 2, 2, 2, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 2, 2, 2, 2, 2, 2, 2, Infinity, 2, Infinity],\n            [Infinity, 5, 5, 2, 5, 5, 5, Infinity, 5, Infinity, 5, Infinity, Infinity, Infinity, Infinity, Infinity, 5, Infinity, Infinity, Infinity, 5, Infinity, 5, Infinity, 5, 5, 5, 5, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 5, Infinity, 5, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 10, 10, 2, 10, 10, 10, Infinity, Infinity, Infinity, 10, Infinity, 10, 10, 10, 10, 10, Infinity, 10, 10, 10, Infinity, 10, Infinity, Infinity, Infinity, 10, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, Infinity, 10, 10, 10, 10, 10, Infinity, 10, 10, 10, 10, 10, Infinity, 10, 10, 10, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, 10, 10, 10, 10, Infinity, 25, 25, 2, 25, 25, 25, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 2, Infinity, Infinity, 2, Infinity, 2, 2, 2, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity],\n            [Infinity, 5, 5, 2, 2, 5, 2, 2, 5, Infinity, 5, 5, 5, 5, 5, Infinity, 5, 5, 5, 5, 5, Infinity, 5, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 5, 5, 5, Infinity, 5, 5, 5, 5, 5, 5, 5, 5, Infinity, 5, Infinity, 5, 5, 5, 5, 5, 5, 5, 5, Infinity, 5, 5, 5, Infinity, 5, Infinity, 10, 10, 2, 2, 2, 2, 2, 10, 10, 10, Infinity, Infinity, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, 10, 10, 10, Infinity, 10, Infinity, 10, 10, 10, 10, 10, 10, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, 10, 10, 10, Infinity, Infinity, Infinity, Infinity, 25, 25, 2, 2, 2, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 2, 2, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 2, Infinity, Infinity, Infinity, Infinity, Infinity, 2, 2, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 2, 2, 2, 2, 2, Infinity, 2, 2, 2, 2, 2, Infinity],\n            [Infinity, 5, 5, 5, 5, 2, 5, Infinity, Infinity, Infinity, 5, Infinity, Infinity, Infinity, 5, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 5, Infinity, 5, 5, 5, 5, 5, 5, 5, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 5, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 10, 10, 10, 10, 10, 10, Infinity, Infinity, Infinity, Infinity, Infinity, 10, 10, 10, Infinity, 10, 10, 10, Infinity, 10, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 10, 10, 10, 10, 10, Infinity, 10, Infinity, 10, Infinity, 10, 10, Infinity, 10, 10, 10, 10, Infinity, 10, Infinity, 10, Infinity, 10, 10, 10, 10, Infinity, 25, 25, 25, 25, 25, 25, Infinity, Infinity, Infinity, Infinity, Infinity, 2, Infinity, Infinity, Infinity, Infinity, Infinity, 2, Infinity, Infinity, 2, Infinity, Infinity, 2, Infinity, 2, 2, 2, Infinity, Infinity, Infinity, Infinity, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, Infinity, Infinity, 2, Infinity],\n            [Infinity, 5, 5, 5, 5, 2, 5, Infinity, 5, 5, 5, 5, 5, Infinity, 5, 5, 5, Infinity, 5, 5, 5, 5, 5, Infinity, 5, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 5, 5, 5, 5, 5, Infinity, 5, 5, 5, 5, 5, 5, Infinity, 5, 5, 5, 5, 5, Infinity, 5, 5, 5, 5, 5, 5, 5, 5, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 10, 10, 10, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, Infinity, Infinity, 10, 10, 10, 10, 10, Infinity, 10, Infinity, 10, Infinity, 10, 10, 10, 10, Infinity, 10, Infinity, Infinity, Infinity, 10, 10, 10, Infinity, 10, Infinity, Infinity, Infinity, Infinity, 10, Infinity, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 2, 2, 2, Infinity, 2, 2, 2, 2, 2, Infinity, 2, Infinity, 2, 2, Infinity, 2, 2, Infinity, 2, Infinity, 2, 2, 2, 2, 2, 2, 2, Infinity, 2, Infinity, 2, 2, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, 2, 2, Infinity],\n            [Infinity, 5, 5, 5, 5, 2, 5, Infinity, 5, Infinity, Infinity, Infinity, 5, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 5, Infinity, 5, 5, 5, 5, 5, 5, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 5, Infinity, Infinity, Infinity, 5, Infinity, 5, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 5, Infinity, 10, 10, 10, 10, 10, 10, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, 10, 10, 10, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, 10, 10, 10, 10, 10, 10, 10, 10, 10, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, Infinity, 25, 25, 25, 25, 25, 25, Infinity, 2, Infinity, 2, Infinity, Infinity, Infinity, Infinity, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, Infinity, 2, Infinity, Infinity, 2, Infinity, Infinity, 2, Infinity, Infinity, Infinity, Infinity, 2, Infinity, 2, Infinity, Infinity, 2, Infinity, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, Infinity, Infinity],\n            [Infinity, 5, 5, 2, 2, 2, 2, 2, 5, Infinity, 5, Infinity, 5, Infinity, 5, 5, 5, 5, 5, 5, 5, 5, 5, Infinity, Infinity, Infinity, Infinity, Infinity, 5, Infinity, 5, Infinity, Infinity, Infinity, 5, Infinity, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, Infinity, 5, Infinity, 5, Infinity, 5, 5, 5, Infinity, 5, 5, Infinity, 10, 10, 2, 2, 2, 2, 2, 10, Infinity, 10, Infinity, 10, Infinity, 10, 10, 10, Infinity, 10, 10, Infinity, 10, 10, 10, 10, 10, 10, Infinity, 10, Infinity, 10, 10, Infinity, 10, Infinity, 10, 10, 10, 10, 10, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 10, Infinity, 10, 10, 10, 10, Infinity, 25, 25, 2, 2, 2, 2, 2, 2, Infinity, 2, Infinity, 2, Infinity, 2, 2, 2, Infinity, 2, Infinity, 2, 2, 2, 2, Infinity, 2, 2, 2, Infinity, 2, Infinity, 2, 2, Infinity, 2, Infinity, 2, 2, Infinity, 2, Infinity, 2, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity, 2, Infinity],\n            [Infinity, 5, 5, 2, 5, 5, 5, Infinity, Infinity, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, Infinity, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 5, 5, 5, 5, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, Infinity, 5, Infinity, Infinity, Infinity, Infinity, 5, Infinity, Infinity, 5, Infinity, 5, 5, 5, 5, 5, Infinity, 5, Infinity, 5, Infinity, Infinity, 10, 10, 2, 10, 10, 10, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, 10, Infinity, Infinity, Infinity, 10, 10, 10, Infinity, 10, 10, 10, 10, 10, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, Infinity, 10, Infinity, 25, 25, 2, 25, 25, 25, Infinity, Infinity, Infinity, 2, Infinity, 2, Infinity, Infinity, 2, Infinity, Infinity, 2, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 2, Infinity, 2, Infinity, Infinity, 2, Infinity, 2, Infinity, Infinity, Infinity, Infinity, 2, Infinity, Infinity, Infinity, Infinity, 2, Infinity, 2, Infinity, 2, 2, 2, Infinity],\n            [Infinity, 5, 5, 2, 5, 5, 5, Infinity, 5, 5, 5, 5, 5, Infinity, 5, Infinity, 5, 5, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, Infinity, Infinity, 5, Infinity, 5, Infinity, 5, 5, 5, Infinity, 5, Infinity, 5, 5, Infinity, 5, Infinity, 5, 5, 5, Infinity, 5, Infinity, 5, Infinity, Infinity, Infinity, Infinity, Infinity, 5, Infinity, 5, 5, Infinity, 10, 10, 2, 10, 10, 10, Infinity, 10, 10, 10, Infinity, 10, Infinity, 10, 10, Infinity, 10, Infinity, 10, Infinity, 10, 10, 10, 10, 10, 10, 10, 10, Infinity, 10, 10, 10, 10, Infinity, 10, 10, 10, Infinity, 10, 10, 10, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, 10, 10, 10, 10, 10, 10, Infinity, 10, Infinity, 25, 25, 2, 25, 25, 25, Infinity, 2, 2, 2, Infinity, 2, 2, Infinity, 2, 2, 2, 2, Infinity, 2, 2, 2, 2, 2, 2, 2, 2, Infinity, 2, 2, 2, 2, Infinity, 2, 2, 2, 2, 2, 2, Infinity, 2, 2, 2, 2, Infinity, 2, Infinity, 2, Infinity, Infinity, Infinity],\n            [2, 2, 2, 2, 5, 5, 5, Infinity, 5, Infinity, Infinity, Infinity, Infinity, Infinity, 5, Infinity, 5, Infinity, Infinity, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, Infinity, 5, Infinity, Infinity, 5, Infinity, 5, Infinity, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 5, Infinity, 5, 5, 5, Infinity, Infinity, 5, 2, 2, 2, 2, 10, 10, 10, Infinity, 10, Infinity, Infinity, Infinity, 10, Infinity, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 10, Infinity, Infinity, 10, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, 10, Infinity, 10, Infinity, 10, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 10, 2, 2, 2, 2, 25, 25, 25, Infinity, 2, Infinity, 2, Infinity, Infinity, 2, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 2, Infinity, Infinity, Infinity, Infinity, Infinity, 2, Infinity, Infinity, 2, Infinity, Infinity, Infinity, Infinity, 2, Infinity, Infinity, Infinity, Infinity, 2, Infinity, 2, Infinity, Infinity, Infinity, Infinity, 2, Infinity, 2, Infinity, 2, 2],\n            [Infinity, 5, 5, 5, 5, 5, 5, Infinity, 5, 5, 5, 5, 5, 5, 5, Infinity, 5, 5, 5, 5, 5, Infinity, 5, 5, 5, 5, 5, Infinity, 5, Infinity, 5, 5, 5, 5, Infinity, 5, 5, Infinity, 5, 5, 5, 5, Infinity, 5, Infinity, 5, 5, 5, Infinity, 5, 5, 5, Infinity, 5, Infinity, 5, 5, Infinity, 5, Infinity, 10, 10, 10, 10, 10, 10, Infinity, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, Infinity, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, Infinity, 10, 10, 10, 10, 10, Infinity, 10, Infinity, 10, 10, 10, Infinity, 10, 10, 10, 10, 10, Infinity, 10, 10, 10, Infinity, 10, 10, 10, 10, 10, 10, Infinity, 25, 25, 25, 25, 25, 25, Infinity, 2, Infinity, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, Infinity, 2, 2, 2, 2, 2, Infinity, 2, 2, Infinity, 2, 2, 2, 2, Infinity, 2, 2, 2, 2, Infinity, 2, 2, 2, 2, 2, 2, Infinity, 2, 2, 2, Infinity],\n            [Infinity, Infinity, 5, 5, 5, 5, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 10, 10, 10, 10, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 25, 25, 25, 25, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity]]\n}","import React from 'react';\nimport PathfindingVisualizerContestant from './PathfindingVisualizerContestant';\nimport { getRecursiveDivisionMazeWallCoordinates } from './gridAlgorithms/RecursiveDivisionMaze';\nimport { getRandomWallsCoordinates } from './gridAlgorithms/RandomWallsGeneration';\nimport { getPremadeMap } from './gridAlgorithms/PremadeMaps';\nimport { getShortestPathLength } from './pathfindingAlgorithms/AStar';\nimport './css/PathfindingContest.css';\n\nconst GRID_NUM_ROWS = 15;\nconst COUNTDOWN_DURATION_MS = PathfindingVisualizerContestant.ANIMATION_DELAY_MS;\n\nconst INITIAL_NUM_OF_CONTESTANTS = 5;\nconst MAX_NUM_OF_CONTESTANTS = 5;\n\nconst EMPTY_GRID_START_NODE_ROW = 5;\nconst EMPTY_GRID_START_NODE_COL = 5;\n\nconst ALGORITHM_TYPES = [\n    'Dijkstra',\n    'A* Search',\n    'Greedy Best-first Search',\n    'Depth-first Search',\n    'Breadth-first Search'\n]\n\nconst NODE_TYPES = [\n    ['Empty','Weight-1'],\n    ['Path','Weight-2'],\n    ['Grass','Weight-5'],\n    ['Sand','Weight-10'],\n    ['Water','Weight-25'],\n    ['Wall','Weight-Inf']\n]\n\nexport default class PathfindingContest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [],\n            gridNumRows: GRID_NUM_ROWS,\n            gridNumCols: -1,\n            numOfContestants: INITIAL_NUM_OF_CONTESTANTS,\n            isPreContest: true,\n            isEmptyGrid: true,\n            selectedNodeType: 'Weight-Inf',\n            selectedNodeWeight: Infinity,\n            startNodeRow: -1,\n            startNodeColumn: -1,\n            finishNodeRow: -1,\n            finishNodeColumn: -1\n        };\n        this.setNewGridWithNodeWeightUpdated = this.setNewGridWithNodeWeightUpdated.bind(this);\n        this.setNewGridWithStartNodeUpdated = this.setNewGridWithStartNodeUpdated.bind(this);\n        this.setNewGridWithFinishNodeUpdated = this.setNewGridWithFinishNodeUpdated.bind(this);\n        this.setNewGridWithMultipleWeightNodesUpdated = this.setNewGridWithMultipleWeightNodesUpdated.bind(this);\n        this.removeContestant = this.removeContestant.bind(this);\n        this.algoContestantRefs = [];\n    }\n\n    setRef = (ref) => {\n        this.algoContestantRefs.push(ref);\n    };\n\n    removeLastAlgoContestantRef() {\n        const newAlgoContestantRefs = [];\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            newAlgoContestantRefs.push(this.algoContestantRefs[i]);\n        }\n        this.algoContestantRefs = newAlgoContestantRefs;\n    }\n\n    componentDidMount() {\n        document.title = \"Pathfinding Contest\";\n        this.setEmptyGrid();\n        this.resetPathfindingContestPage();\n        this.handlePageResize();\n        window.addEventListener('resize', this.handlePageResize);\n        window.addEventListener('scroll', this.addOrRemoveStickyEffectOnSortContestHeader);\n    }\n    \n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handlePageResize);\n        window.removeEventListener('scroll', this.addOrRemoveStickyEffectOnSortContestHeader);\n    }\n\n    startContest() {\n        this.setState({...this.state, isPreContest: false});\n        this.disablePreContestButtons();\n        this.disableGrids();\n        this.enableDuringContestControlButtons();\n        this.clearPathAndVisitedNodes();\n        this.startCountdown();\n        const allContestantAnimationData = this.getAllContestantAnimationDataAndSetAlgorithmStatInfo();\n        this.runContestAnimations(allContestantAnimationData);\n        this.scheduleContestFinishedCommands(allContestantAnimationData);\n    }\n\n    scheduleContestFinishedCommands(allContestantAnimationData) {\n\n        const allContestantMaxAnimationSteps = [];\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            allContestantMaxAnimationSteps.push(allContestantAnimationData[i].length);\n        }\n\n        const maxNumberOfAnimationSteps = Math.max(...allContestantMaxAnimationSteps);\n        setTimeout(() => {\n            this.handleContestIsNowFinished();\n        }, maxNumberOfAnimationSteps * this.algoContestantRefs[0].getAnimationSpeed() + PathfindingVisualizerContestant.ANIMATION_DELAY_MS);\n    }\n\n    handleContestIsNowFinished() {\n        this.enablePreContestSetupButtons();\n        this.disableDuringContestControlButtons();\n        this.enableGrids();\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            this.algoContestantRefs[i].createAlgorithmStatsLabel();\n            this.algoContestantRefs[i].setAllAlgorithmStatInfo(-1, -1, -1, -1);\n        }\n        this.setState({...this.state, isPreContest: true});\n    }\n\n    startCountdown() {\n        let numOfCountdownSeconds = COUNTDOWN_DURATION_MS / 1000;\n        for(let i = 0; i < numOfCountdownSeconds; ++i) {\n            setTimeout(() => {\n                document.getElementById(\"path-start-contest-button\").innerHTML = `${numOfCountdownSeconds - i}`;\n            }, i * 1000);\n        }\n\n        setTimeout(() => {\n            document.getElementById(\"path-start-contest-button\").innerHTML = 'GO!';\n        }, COUNTDOWN_DURATION_MS); \n    }\n\n    getAllContestantAnimationDataAndSetAlgorithmStatInfo() {\n        const allContestantAnimationData = [];\n        const shortestPathLength = getShortestPathLength(\n            this.state.grid,\n            this.state.grid[this.state.startNodeRow][this.state.startNodeColumn],\n            this.state.grid[this.state.finishNodeRow][this.state.finishNodeColumn]\n        );\n\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            allContestantAnimationData[i] = this.algoContestantRefs[i].getPathfindingAnimations(\n                this.state.grid[this.state.startNodeRow][this.state.startNodeColumn],\n                this.state.grid[this.state.finishNodeRow][this.state.finishNodeColumn]\n            );\n\n            let numOfNodesVisisted = 0;\n            let lengthOfPath = 0;\n            let numOfAnimationSteps = 0;\n            for(let j = 0; j < allContestantAnimationData[i].length; ++j){\n                const animationCode = allContestantAnimationData[i][j][0];\n                if(animationCode === 'v') {\n                    numOfNodesVisisted++;\n                    numOfAnimationSteps++;\n                }\n                else if(animationCode === 'spf') {\n                    const row = allContestantAnimationData[i][j][1];\n                    const col = allContestantAnimationData[i][j][2];\n                    lengthOfPath += parseInt(this.state.grid[row][col].weight);\n                    numOfAnimationSteps++;\n                }\n            }\n            this.algoContestantRefs[i].setAllAlgorithmStatInfo(numOfNodesVisisted, lengthOfPath, shortestPathLength, numOfAnimationSteps);\n        }\n\n        return allContestantAnimationData;\n    }\n\n    runContestAnimations(allContestantAnimationData) {\n        let stepCounter = 0;\n        let numOfFinishedContestants = 0;\n        let placeNumber = 0;\n        while(numOfFinishedContestants < this.state.numOfContestants) {\n            let hasContestantFinishedThisStep = false;\n            for(let i = 0; i < this.state.numOfContestants; ++i) {\n                if(stepCounter > allContestantAnimationData[i].length) {\n                    continue;\n                }\n                else if(stepCounter === allContestantAnimationData[i].length) {\n                    numOfFinishedContestants++;\n                    if(hasContestantFinishedThisStep === false) {\n                        placeNumber++;\n                        hasContestantFinishedThisStep = true;\n                        this.algoContestantRefs[i].scheduleAlgorithmIsNowFinishedCommands(stepCounter, placeNumber);\n                    }\n                    else {\n                        this.algoContestantRefs[i].scheduleAlgorithmIsNowFinishedCommands(stepCounter, placeNumber);\n                    }\n                    continue;\n                }\n                else {\n                    this.algoContestantRefs[i].doAnimationNextStep(\n                        allContestantAnimationData[i][stepCounter], stepCounter\n                    );\n                }\n            }\n            stepCounter++;\n        }\n    }\n\n    setEmptyGrid() {\n        const emptyGrid = getEmptyGrid();\n        const totCols = getFullPageWidthGridNumCols();\n        const totRows = GRID_NUM_ROWS;\n        const startRow = EMPTY_GRID_START_NODE_ROW;\n        const startCol = EMPTY_GRID_START_NODE_COL;\n        const finRow = totRows - 6;\n        const finCol = totCols - 6;\n        this.setState({\n            ...this.state,\n            grid: emptyGrid,\n            gridNumCols: totCols,\n            startNodeRow: startRow,\n            startNodeColumn: startCol,\n            finishNodeRow: finRow,\n            finishNodeColumn: finCol,\n            isEmptyGrid: true\n        });\n    }\n\n    setResizedGridWithUpdatedNodesCopied() {\n        const grid = this.state.grid;\n        const startRow = this.state.startNodeRow;\n        const startCol = this.state.startNodeColumn;\n        const finRow = this.state.finishNodeRow;\n        const finCol = this.state.finishNodeColumn;\n        const totCols = getFullPageWidthGridNumCols();\n        let resizedGrid = getResizedGridWithUpdatedNodesCopied(grid);\n\n        //move start and end nodes to be in grid if necessary\n        const lastResizedGridIndex = resizedGrid[0].length - 1;\n        if(startCol > lastResizedGridIndex) {\n            resizedGrid = this.moveStartNodeToBeInGrid(resizedGrid, startRow);\n        }\n        if(finCol > lastResizedGridIndex) {\n            resizedGrid = this.moveFinishNodeToBeInGrid(resizedGrid, finRow);\n        }\n\n        this.setState({\n            ...this.state,\n            grid: resizedGrid,\n            gridNumCols: totCols,\n            isEmptyGrid: false\n        });\n    }\n\n    moveStartNodeToBeInGrid(resizedGrid, startRow) {\n        let grid = resizedGrid.slice();\n        let lastResizedGridCol = resizedGrid[0].length - 1;\n        const node = grid[startRow][lastResizedGridCol];\n        const newStartNode = {\n            ...node,\n            weight: 1,\n            isStart: true\n        };\n        grid[startRow][lastResizedGridCol] = newStartNode;\n\n        this.setState({\n            ...this.state,\n            startNodeRow: startRow,\n            startNodeColumn: lastResizedGridCol\n        });\n\n        return grid;\n    }\n\n    moveFinishNodeToBeInGrid(resizedGrid, finRow) {\n        let grid = resizedGrid.slice();\n        let lastResizedGridCol = resizedGrid[0].length - 1;\n        const node = grid[finRow][lastResizedGridCol];\n        const newFinishNode = {\n            ...node,\n            weight: 1,\n            isFinish: true\n        };\n        grid[finRow][lastResizedGridCol] = newFinishNode;\n\n        this.setState({\n            ...this.state,\n            finishNodeRow: finRow,\n            finishNodeColumn: lastResizedGridCol\n        });\n\n        return grid;\n    }\n\n    setNewGridWithNodeWeightUpdated(row, col, newWeight) {\n        const newGrid = getNewGridWithNodeWeightUpdated(this.state.grid, row, col, newWeight);\n        this.setState({\n            ...this.state,\n            grid: newGrid,\n            isEmptyGrid: false\n        }, this.resetPathfindingContestPage());\n    }\n\n    setNewGridWithMultipleWeightNodesUpdated(updatedNodesCoordinates, newWeight) {\n        const newGrid = getNewGridWithMultipleNodeWeightsUpdated(this.state.grid, updatedNodesCoordinates, newWeight);\n        this.setState({\n            ...this.state,\n            grid: newGrid,\n            isEmptyGrid: false\n        });\n    }\n\n\n    setNewGridWithStartNodeUpdated(row, col) {\n        this.resetPathfindingContestPage();\n        const prevStartNodeRow = this.state.startNodeRow;\n        const prevStartNodeCol = this.state.startNodeColumn;\n        const newGrid = getNewGridWithStartNodeUpdated(this.state.grid, row, col, prevStartNodeRow, prevStartNodeCol);\n        this.setState({\n            ...this.state,\n            grid: newGrid,\n            isEmptyGrid: false,\n            startNodeRow: row,\n            startNodeColumn: col    \n        });\n    }\n\n    setNewGridWithFinishNodeUpdated(row, col) {\n        this.resetPathfindingContestPage();\n        const prevFinishNodeRow = this.state.finishNodeRow;\n        const prevFinishNodeCol = this.state.finishNodeColumn;\n        const newGrid = getNewGridWithFinishNodeUpdated(this.state.grid, row, col, prevFinishNodeRow, prevFinishNodeCol);\n        this.setState({\n            ...this.state,\n            grid: newGrid,\n            isEmptyGrid: false,\n            finishNodeRow: row,\n            finishNodeColumn: col \n        });\n    }\n\n    handlePageResize = () => {\n        if(getFullPageWidthGridNumCols() !== this.state.numCols) {\n            if(this.state.isPreContest) {\n                if(this.state.isEmptyGrid) {\n                    this.resetPathfindingContestPage();\n                    this.setEmptyGrid();\n                }\n                else {\n                    this.resetPathfindingContestPage();\n                    this.setResizedGridWithUpdatedNodesCopied();\n                }\n            }\n        }\n\n        let windowWidthSize = window.innerWidth;\n        if(windowWidthSize <= 700) {\n            document.querySelector('#algo-contest-header-link').textContent = 'AlgoContest';\n        }\n        else {\n            document.querySelector('#algo-contest-header-link').textContent = 'AlgorithmContest';\n        }\n\n        if(windowWidthSize <= 650) {\n            document.querySelector('#select-node-type-button-text').textContent = 'Select Node';\n        }\n        else {\n            document.querySelector('#select-node-type-button-text').textContent = 'Select Node Type';\n        }\n\n        if(this.state.numOfContestants < MAX_NUM_OF_CONTESTANTS) {\n            if(windowWidthSize <= 975) {\n                document.querySelector('#path-add-contestant-button').textContent = 'Add';\n            }\n            else {\n                document.querySelector('#path-add-contestant-button').textContent = 'Add Contestant';\n            }\n        }\n    }\n\n    clearPathAndVisitedNodes() {\n        const visitedNodes = document.querySelectorAll('.visited');\n        for(let i = 0; i < visitedNodes.length; ++i) {\n            visitedNodes[i].classList.remove('visited');\n        }\n        const visitedNodesNoAnimation = document.querySelectorAll('.visited-no-animation');\n        for(let i = 0; i < visitedNodesNoAnimation.length; ++i) {\n            visitedNodesNoAnimation[i].classList.remove('visited-no-animation');\n        }\n        const shortestPathLines = document.querySelectorAll('.shortest-path');\n        for(let i = 0; i < shortestPathLines.length; ++i) {\n            shortestPathLines[i].remove();\n        }\n    }\n\n    removeContestant(contestantNum) {\n        //shift all algorithm types over then removes the last one\n        for(let i = contestantNum - 1; i < this.state.numOfContestants - 1; ++i) {\n            this.algoContestantRefs[i].updateAlgorithmType(this.algoContestantRefs[i+1].getAlgorithmType());\n        }\n        const newNumOfContestants = this.state.numOfContestants - 1;\n        // this.algoContestantRefs[this.state.numOfContestants - 1].removeComponent();\n        this.setState({...this.state, numOfContestants: newNumOfContestants}, () => {\n            this.resetPathfindingContestPage();\n            this.removeLastAlgoContestantRef();\n        });\n\n        let animationStandIn = document.createElement(\"DIV\");\n        animationStandIn.setAttribute(\"class\", 'path-remove-element-animation-stand-in');\n        let pathVisualizerContestants = document.getElementById('pathfinding-visualizers');\n        let nextPathVisualizerContestant = document.getElementById(`pathfinding-visualizer-${contestantNum}`);\n        pathVisualizerContestants.insertBefore(animationStandIn, nextPathVisualizerContestant);\n        setTimeout(() => {\n            animationStandIn.remove();\n        }, 800);\n        \n        if(newNumOfContestants === 2) {\n            this.disableRemoveContestantButtons();\n        }\n\n        //renable the remove contestant since we know we do not have the maximum number of contestants\n        document.getElementById('path-add-contestant-button').disabled = false;\n        if(window.innerWidth <=975) {\n            document.getElementById('path-add-contestant-button').innerText = 'Add';\n        }\n        else {\n            document.getElementById('path-add-contestant-button').innerText = 'Add Contestant';\n        }\n    }\n\n    startContestButtonOnClick() {\n        this.resetPathfindingContestPage();\n        this.startContest();\n    }\n\n    resetButtonOnClick() {\n        if(document.getElementById('reset-grid-button').disabled !== true) {\n            toggleResetGridDropdownButtons();\n        }\n    }\n\n    clearPathButtonOnClick() {\n        toggleResetGridDropdownButtons();\n        this.resetPathfindingContestPage();\n        this.setState({...this.state, isPreContest: true});\n    }\n\n    resetGridButtonOnClick() {\n        toggleResetGridDropdownButtons();\n        this.resetPathfindingContestPage();\n        this.setEmptyGrid();\n\n    }\n\n    skipToFinishButtonOnClick() {\n        this.clearAllTimeouts();\n        this.clearPathAndVisitedNodes();\n        this.clearAllAlgorithmStatsAndPlaceLabels();\n\n        let allContestantPlaceInfo = this.findAllPlaceInformation();\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            const contestantAnimationData = this.algoContestantRefs[i].getPathfindingAnimations(\n                this.state.grid[this.state.startNodeRow][this.state.startNodeColumn],\n                this.state.grid[this.state.finishNodeRow][this.state.finishNodeColumn]\n            );\n            this.algoContestantRefs[i].doAllAnimationStepsAtOnce(contestantAnimationData);\n            const algorithmPlace = allContestantPlaceInfo[i][2];\n            this.algoContestantRefs[i].handleAlgorithmIsNowFinished(algorithmPlace);\n        }\n\n        this.handleContestIsNowFinished();\n    }\n\n    clearAllTimeouts() {\n        // from https://stackoverflow.com/questions/8860188/javascript-clear-all-timeouts\n        // all timeout ids are consecutive integers, so this will clear all of the pending animation timeouts\n        var id = setTimeout(function() {}, 0);\n        while (id--) {\n            clearTimeout(id);\n        }\n    }\n\n    findAllPlaceInformation() {\n\n        const allContestantPlaceInfo = [];\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            const contestantNum = i+1;\n            const numOfSteps = this.algoContestantRefs[i].getNumOfAnimationsSteps();\n            allContestantPlaceInfo.push([contestantNum, numOfSteps]);\n        }\n\n        //sort by number of animation steps to get the list in order of place\n        allContestantPlaceInfo.sort(function(a,b) {\n            return a[1]-b[1]\n        });\n\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            if(i > 0) {\n                if(allContestantPlaceInfo[i][1] === allContestantPlaceInfo[i-1][1]) {\n                    let placeNumber = allContestantPlaceInfo[i-1][2];\n                    allContestantPlaceInfo[i][2] = placeNumber;\n                }\n                else {\n                    let placeNumber = allContestantPlaceInfo[i-1][2] + 1;\n                    allContestantPlaceInfo[i][2] = placeNumber;\n                }\n            }\n            else {\n                let placeNumber = 1;\n                allContestantPlaceInfo[i][2] = placeNumber;\n            }\n        }\n\n\n        //sort by contestant number to get the list in the correct order\n        allContestantPlaceInfo.sort(function(a,b) {\n            return a[0]-b[0]\n        });\n        \n        //final format [contestant number, number of animation steps, place achieved]\n        return allContestantPlaceInfo;\n    }\n\n    selectNodeTypeDropdownOnClick() {\n        if(document.getElementById('select-node-type-dropdown-button').disabled !== true) {\n            toggleSelectNodeTypeDropdownButtons();\n        }\n    }\n\n    nodeSelectionDropdownButtonOnClick(nodeType) {\n        const nodeTypeInfo = nodeType.split('-');\n        let nodeTypeWeight = nodeTypeInfo[1];\n        if(nodeTypeWeight === 'Inf') {\n            nodeTypeWeight = 'Infinity';\n        }\n        this.setState({...this.state, selectedNodeType: nodeType, selectedNodeWeight: nodeTypeWeight});\n        toggleSelectNodeTypeDropdownButtons();\n    }\n\n    mazesAndMapsButtonOnClick() {\n        if(document.getElementById(\"mazes-and-maps-button\").disabled !== true) {\n            toggleSelectMazesAndMapsDropdownButtons();\n        }\n    }\n\n    recursiveMazeButtonOnClick() {\n        toggleSelectMazesAndMapsDropdownButtons();\n        this.resetPathfindingContestPage();\n        const emptyGrid = getEmptyGrid();\n        const totCols = getFullPageWidthGridNumCols();\n        this.setState({...this.state, grid: emptyGrid, gridNumCols: totCols}, () => {\n            const recursiveMazeWallCoordinates = getRecursiveDivisionMazeWallCoordinates(\n                this.state.gridNumRows,\n                totCols,\n                this.state.grid[EMPTY_GRID_START_NODE_ROW][EMPTY_GRID_START_NODE_COL],\n                this.state.grid[GRID_NUM_ROWS - 6][totCols - 6]\n            );\n            const mazeGrid = getNewGridWithMultipleNodeWeightsUpdated(emptyGrid, recursiveMazeWallCoordinates, Infinity);\n            this.setState({\n                ...this.state,\n                grid: mazeGrid,\n                startNodeRow: EMPTY_GRID_START_NODE_ROW,\n                startNodeColumn: EMPTY_GRID_START_NODE_COL,\n                finishNodeRow: GRID_NUM_ROWS - 6,\n                finishNodeColumn: totCols - 6\n            });\n        });\n    }\n\n    setGridToPremadeMap(mapType) {\n        toggleSelectMazesAndMapsDropdownButtons();\n        this.resetPathfindingContestPage();\n        const emptyGrid = getEmptyGrid();\n        const totCols = getFullPageWidthGridNumCols();\n        const prmadeMapGridWeights = getPremadeMap(this.state.gridNumRows, totCols, mapType);\n        this.setState({...this.state, grid: emptyGrid, gridNumCols: totCols}, () => {\n            const prmadeMapGrid = getNewGridWithAllNodeWeightsUpdated(\n                emptyGrid,\n                prmadeMapGridWeights,\n                this.state.grid[EMPTY_GRID_START_NODE_ROW][EMPTY_GRID_START_NODE_COL],\n                this.state.grid[GRID_NUM_ROWS - 6][totCols - 6],\n            );\n            this.setState({\n                ...this.state,\n                grid: prmadeMapGrid,\n                startNodeRow: EMPTY_GRID_START_NODE_ROW,\n                startNodeColumn: EMPTY_GRID_START_NODE_COL,\n                finishNodeRow: GRID_NUM_ROWS - 6,\n                finishNodeColumn: totCols - 6\n            });\n        });\n    }\n\n    randomWallsButtonOnClick() {\n        toggleSelectMazesAndMapsDropdownButtons();\n        this.resetPathfindingContestPage();\n        const emptyGrid = getEmptyGrid();\n        const totCols = getFullPageWidthGridNumCols();\n        this.setState({...this.state, grid: emptyGrid, gridNumCols: totCols}, () => {\n            const randomWallsCoordinates = getRandomWallsCoordinates(\n                this.state.gridNumRows,\n                totCols,\n                this.state.grid[EMPTY_GRID_START_NODE_ROW][EMPTY_GRID_START_NODE_COL],\n                this.state.grid[GRID_NUM_ROWS - 6][totCols - 6]\n            );\n            const randomWallGrid = getNewGridWithMultipleNodeWeightsUpdated(emptyGrid, randomWallsCoordinates, Infinity);\n            this.setState({\n                ...this.state,\n                grid: randomWallGrid,\n                startNodeRow: EMPTY_GRID_START_NODE_ROW,\n                startNodeColumn: EMPTY_GRID_START_NODE_COL,\n                finishNodeRow: GRID_NUM_ROWS - 6,\n                finishNodeColumn: totCols - 6\n            });\n        });\n    }\n\n    addContestantOnClick() {\n        this.resetPathfindingContestPage();\n        this.addContestant();\n    }\n\n    addContestant() {\n        const newNumOfContestants = this.state.numOfContestants + 1;\n        this.setState({...this.state, numOfContestants: newNumOfContestants}, () => {\n            this.resetPathfindingContestPage();\n            this.enableRemoveContestantButtons();\n        });\n        if(newNumOfContestants === MAX_NUM_OF_CONTESTANTS) {\n            document.getElementById('path-add-contestant-button').innerText = 'MAX';\n            document.getElementById('path-add-contestant-button').disabled = true;\n        }\n        else {\n            document.getElementById('path-add-contestant-button').disabled = false;\n            if(window.innerWidth <= 975) {\n                document.getElementById('path-add-contestant-button').innerText = 'Add';\n            }\n            else {\n                document.getElementById('path-add-contestant-button').innerText = 'Add Contestant';\n            }\n        }\n    }\n\n    // Function used to print all grid node weights in a 2D array format.\n    //  Used to save the three custom maps I used in this project.\n    printGridWeights() {\n        let gridWeightString = \"[\";\n\n        for(let r = 0; r < this.state.gridNumRows; ++r) {\n            for(let c = 0; c < this.state.gridNumCols; ++c) {\n                if(c === 0) {\n                    gridWeightString += `[${parseFloat(this.state.grid[r][c].weight)}, `\n                }\n                else if(c !== this.state.gridNumCols - 1) {\n                    gridWeightString += `${parseFloat(this.state.grid[r][c].weight)}, `\n                }\n                else gridWeightString += `${parseFloat(this.state.grid[r][c].weight)}],\\n`\n            }\n        }\n\n        gridWeightString += \"]\";\n        console.log(gridWeightString);\n    }\n\n    render() {\n        const contestantNumbers = [];\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            contestantNumbers.push(i+1);\n        }\n        console.log(contestantNumbers);\n\n        return (\n            <div className='pathfinding-contest'>\n                <div id=\"pathfinding-contest-header\">\n                    <button id=\"path-start-contest-button\" onClick={() => this.startContestButtonOnClick()}>Start</button>\n                    <div id=\"reset-grid-dropdown\">\n                        <button id=\"reset-grid-button\" onClick={() => this.resetButtonOnClick()}>\n                            <div id='reset-grid-button-text'>Reset</div>\n                            <div id='reset-grid-dropdown-arrow'>▼</div>\n                        </button>\n                        <div id=\"reset-grid-dropdown-content\">\n                            <button className='reset-grid-dropdown-button' onClick={() => this.resetGridButtonOnClick()}>Reset Grid</button>\n                            <button className='reset-grid-dropdown-button' onClick={() => this.clearPathButtonOnClick()}>Clear Path</button>\n                        </div>\n                    </div>\n                    <div id=\"mazes-and-maps-dropdown\">\n                        <button id=\"mazes-and-maps-button\" onClick={() => this.mazesAndMapsButtonOnClick()}>\n                            <div id='mazes-and-maps-button-text'>Mazes & Maps</div>\n                            <div id='mazes-and-maps-dropdown-arrow'>▼</div>\n                        </button>\n                        <div id=\"mazes-and-maps-dropdown-content\">\n                            <button className='mazes-and-maps-dropdown-button' onClick={() => this.recursiveMazeButtonOnClick()}>Recursive Maze</button>\n                            <button className='mazes-and-maps-dropdown-button' onClick={() => this.randomWallsButtonOnClick()}>Random Walls</button>\n                            <button className='mazes-and-maps-dropdown-button' onClick={() => this.setGridToPremadeMap(1)}>Islands Custom Map</button>\n                            <button className='mazes-and-maps-dropdown-button' onClick={() => this.setGridToPremadeMap(2)}>Fields Custom Map</button>\n                            <button className='mazes-and-maps-dropdown-button' onClick={() => this.setGridToPremadeMap(3)}>Mazes Custom Map</button>\n                            {/* <button className='mazes-and-maps-dropdown-button' onClick={() => this.printGridWeights()}>Print Grid</button> */}\n                        </div>\n                    </div>\n                    <div id=\"select-node-type-dropdown\">\n                        <button id=\"select-node-type-dropdown-button\" onClick={() => this.selectNodeTypeDropdownOnClick()}>\n                            <div id=\"selected-node-display-container\">\n                                <div id=\"selected-node-display\" className={`display-node-${this.state.selectedNodeType}`}></div>\n                            </div>\n                            <div id=\"select-node-type-button-text\">Select Node Type</div>\n                            <div id=\"node-selection-dropdown-arrow\">▼</div>\n                        </button>\n                            <div id=\"node-selection-dropdown-content\">\n                                {NODE_TYPES.map((nodeType) => (\n                                (nodeType[1] !== this.state.selectedNodeType) ?\n                                    <button\n                                        key={nodeType[1]}\n                                        id='node-selection-dropdown-button'\n                                        onClick={() => this.nodeSelectionDropdownButtonOnClick(nodeType[1])}\n                                    ><div id=\"selected-node-display\" className={`display-node-${nodeType[1]}`}></div>\n                                    <div id='node-selection-dropdown-button-node-type-name'>{nodeType[0]}</div>\n                                    <div id='node-selection-dropdown-button-node-type-weight'>{nodeType[1]}</div>\n                                    </button>\n                                    : null\n                                ))}\n                            </div>\n                    </div>\n                    <button id='path-add-contestant-button' onClick={() => this.addContestantOnClick()}>Add Contestant</button>\n                    <div id=\"path-num-of-contestants-label\">{this.state.numOfContestants}</div>\n                    <button id=\"path-skip-to-finish-button\" onClick={() => this.skipToFinishButtonOnClick()}>Skip To Finish</button>\n                </div>\n                <div id= 'pathfinding-visualizers'>\n                    {contestantNumbers.map(contestantNumber => (\n                        <PathfindingVisualizerContestant\n                            key={contestantNumber - 1}\n                            ref={this.setRef}\n                            grid={this.state.grid}\n                            selectedNodeWeight={this.state.selectedNodeWeight}\n                            algorithmType={ALGORITHM_TYPES[(contestantNumber - 1) % ALGORITHM_TYPES.length]}\n                            algorithmTypes={ALGORITHM_TYPES}\n                            contestantNumber={contestantNumber}\n                            updateGridNodeWeight={this.setNewGridWithNodeWeightUpdated}\n                            updateMultipleNodeWeights={this.setNewGridWithMultipleWeightNodesUpdated}\n                            updateStartNode={this.setNewGridWithStartNodeUpdated}\n                            updateFinishNode={this.setNewGridWithFinishNodeUpdated}\n                            removeMe={this.removeContestant}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n\n    // Referenced https://www.w3schools.com/howto/howto_js_sticky_header.asp\n    addOrRemoveStickyEffectOnSortContestHeader = () => {\n        let header = document.getElementById(\"pathfinding-contest-header\");\n        let sticky = 45; //initial header.offsetTop();\n        if(window.innerWidth <= 480) {\n            sticky = 40; //initial header.offsetTop()\n        }\n    \n        if (window.pageYOffset > sticky) {\n            header.classList.add(\"sticky\");\n        } else {\n            header.classList.remove(\"sticky\");\n        }\n    }\n\n    resetPathfindingContestPage() {\n        this.enablePreContestSetupButtons();\n        this.enableRemoveContestantButtons();\n        this.disableDuringContestControlButtons();\n        this.clearAllAlgorithmStatsAndPlaceLabels();\n        this.clearPathAndVisitedNodes();\n        document.getElementById('node-selection-dropdown-content').style.display = 'none';\n        document.getElementById('mazes-and-maps-dropdown-content').style.display = 'none';\n        document.getElementById('reset-grid-dropdown-content').style.display = 'none';\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            this.algoContestantRefs[i].resetVisualizationStyling();\n        }\n    }\n\n    clearAllAlgorithmStatsAndPlaceLabels() {\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            this.algoContestantRefs[i].destructAlgorithmPlaceLabel();\n            this.algoContestantRefs[i].destructAlgorithmStatsLabel();\n        }\n        let shortestPathLabels = document.querySelectorAll('.shortest-path-found-label');\n        for(let i = 0; i < shortestPathLabels.length; ++i) {\n            shortestPathLabels[i].remove();\n        }\n        let notShortestPathLabels = document.querySelectorAll('.shortest-path-not-found-label');\n        for(let i = 0; i < notShortestPathLabels.length; ++i) {\n            notShortestPathLabels[i].remove();\n        }\n    }\n\n    disableGrids() {\n        const gridContainers = document.getElementsByClassName('grid-container');\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            gridContainers[i].style.pointerEvents = 'none';\n        }\n    }\n\n    enableGrids() {\n        const gridContainers = document.getElementsByClassName('grid-container');\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            gridContainers[i].style.pointerEvents = 'all';\n        }\n    }\n\n    disablePreContestButtons() {\n        document.getElementById(\"path-start-contest-button\").disabled = true;\n        document.getElementById(\"reset-grid-button\").disabled = true;\n        document.getElementById(\"mazes-and-maps-button\").disabled = true;\n        document.getElementById('select-node-type-dropdown-button').disabled = true;\n        document.getElementById('path-add-contestant-button').disabled = true;\n        this.disableRemoveContestantButtons();\n\n        const algorithmDropDownButtons = document.getElementsByClassName('path-algorithm-dropdown-button');\n        for(let i = 0; i < algorithmDropDownButtons.length; ++i) {\n            algorithmDropDownButtons[i].disabled = true;\n        }\n        const algorithmDropDownArrows = document.getElementsByClassName('dropdown-arrow');\n        for(let i = 0; i < algorithmDropDownArrows.length; ++i) {\n            algorithmDropDownArrows[i].style.visibility = 'hidden';\n        }\n    }\n\n    enablePreContestSetupButtons() {\n        document.getElementById(\"path-start-contest-button\").innerHTML = 'Start';\n        document.getElementById(\"path-start-contest-button\").disabled = false;\n        document.getElementById(\"reset-grid-button\").disabled = false;\n        document.getElementById(\"mazes-and-maps-button\").disabled = false;\n        document.getElementById('select-node-type-dropdown-button').disabled = false;\n\n        if(this.state.numOfContestants < MAX_NUM_OF_CONTESTANTS) {\n            document.getElementById('path-add-contestant-button').disabled = false;\n        }\n        else {\n            document.getElementById('path-add-contestant-button').disabled = true;\n            document.getElementById('path-add-contestant-button').innerText = 'MAX';\n        }\n\n        const algorithmDropDownButtons = document.getElementsByClassName('path-algorithm-dropdown-button');\n        for(let i = 0; i < algorithmDropDownButtons.length; ++i) {\n            algorithmDropDownButtons[i].disabled = false;\n        }\n        const algorithmDropDownArrows = document.getElementsByClassName('dropdown-arrow');\n        for(let i = 0; i < algorithmDropDownArrows.length; ++i) {\n            algorithmDropDownArrows[i].style.visibility = 'visible';\n        }\n    }\n\n    disableDuringContestControlButtons() {\n        document.getElementById('path-skip-to-finish-button').disabled = true;\n    }\n\n    enableDuringContestControlButtons() {\n        document.getElementById('path-skip-to-finish-button').disabled = false\n    }\n\n    disableRemoveContestantButtons() {\n        const removeAlgorithmButtons = document.getElementsByClassName('path-remove-button');\n        for(let i = 0; i < removeAlgorithmButtons.length; ++i) {\n            removeAlgorithmButtons[i].disabled = true;\n        }\n    }\n\n    enableRemoveContestantButtons() {\n        if(this.state.numOfContestants > 2) {\n            const removeAlgorithmButtons = document.getElementsByClassName('path-remove-button');\n            for(let i = 0; i < removeAlgorithmButtons.length; ++i) {\n                removeAlgorithmButtons[i].disabled = false;\n            }\n        }\n    }\n}\n\nconst toggleSelectNodeTypeDropdownButtons = () => {\n    const selectNodeTypeDropdownButtonContainer = document.getElementById('node-selection-dropdown-content');\n    if(selectNodeTypeDropdownButtonContainer.style.display === 'none') {\n        selectNodeTypeDropdownButtonContainer.style.display = 'block';\n    }\n    else {\n        selectNodeTypeDropdownButtonContainer.style.display = 'none';\n    }\n}\n\nconst toggleSelectMazesAndMapsDropdownButtons = () => {\n    const mazesAndMapsDropdownButtonContainer = document.getElementById('mazes-and-maps-dropdown-content');\n    if(mazesAndMapsDropdownButtonContainer.style.display === 'none') {\n        mazesAndMapsDropdownButtonContainer.style.display = 'block';\n    }\n    else {\n        mazesAndMapsDropdownButtonContainer.style.display = 'none';\n    }\n}\n\nconst toggleResetGridDropdownButtons = () => {\n    const mazesAndMapsDropdownButtonContainer = document.getElementById('reset-grid-dropdown-content');\n    if(mazesAndMapsDropdownButtonContainer.style.display === 'none') {\n        mazesAndMapsDropdownButtonContainer.style.display = 'block';\n    }\n    else {\n        mazesAndMapsDropdownButtonContainer.style.display = 'none';\n    }\n}\n\nconst getFullPageWidthGridNumCols = () => {\n    return Math.floor((window.innerWidth - 14) / 11);\n}\n\nconst getEmptyGrid = () => {\n    const grid = [];\n    const totCols = getFullPageWidthGridNumCols();\n    const totRows = GRID_NUM_ROWS;\n    const startRow = EMPTY_GRID_START_NODE_ROW;\n    const startCol = EMPTY_GRID_START_NODE_COL;\n    const finRow = totRows - 6;\n    const finCol = totCols - 6;\n\n    //empty, start, and finish nodes all have weight of one\n    const initialNodeWeight = 1;\n\n    for (let row = 0; row < totRows; row++) {\n        const currentRow = [];\n        for (let col = 0; col < totCols; col++) {\n            currentRow.push(createInitialNode(row, col, totRows, totCols, startRow, startCol, finRow, finCol, initialNodeWeight));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst createInitialNode = (row, col, totRows, totCols, startRow, startCol, finRow, finCol, weight) => {\n    return {\n        row,\n        col,\n        weight,\n        isStart: row === startRow && col === startCol,\n        isFinish: row === finRow && col === finCol,\n        isLastRow: row === totRows - 1,\n        isLastColumn: col === totCols - 1\n    };\n};\n\nconst createNode = (row, col, totRows, totCols, weight) => {\n    return {\n        row,\n        col,\n        weight,\n        isStart: false,\n        isFinish: false,\n        isLastRow: row === totRows - 1,\n        isLastColumn: col === totCols - 1\n    };\n}\n\nconst getNewGridWithNodeWeightUpdated = (grid, row, col, newWeight) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      row: row,\n      col: col,\n      isStart: false,\n      isFinish: false,\n      weight: newWeight,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};\n\nconst getNewGridWithMultipleNodeWeightsUpdated = (grid, updatedNodesCoordinates, newWeight) => {\n    const newGrid = grid.slice();\n    for(let i = 0; i < updatedNodesCoordinates.length; ++i) {\n        const row = parseInt(updatedNodesCoordinates[i][0]);\n        const col = parseInt(updatedNodesCoordinates[i][1]);\n        const weight = parseFloat(newWeight);\n        const node = newGrid[row][col];\n        const newNode = {\n          ...node,\n          row: row,\n          col: col,\n          isStart: false,\n          isFinish: false,\n          weight: weight,\n        };\n        newGrid[row][col] = newNode;\n    }\n    return newGrid;\n};\n\nconst getNewGridWithAllNodeWeightsUpdated = (grid, gridWeights, startNode, finishNode) => {\n    const newGrid = grid.slice();\n    for(let r = 0; r < grid.length; ++r) {\n        for(let c = 0; c < grid[0].length; ++c) {\n            let weight = gridWeights[r][c];\n            if(r === startNode.row && c === startNode.col) weight = 1;\n            else if(r === finishNode.row && c === finishNode.col) weight = 1;\n            const node = newGrid[r][c];\n            const newNode = {\n                ...node,\n                row: r,\n                col: c,\n                weight: weight,\n            };\n            newGrid[r][c] = newNode;\n        }\n    }\n    return newGrid;\n};\n\nconst getNewGridWithStartNodeUpdated = (grid, row, col, prevRow, prevCol) => {\n    const newGrid = grid.slice();\n    const totRows = grid.length;\n    const totCols = grid[0].length;\n    const startNodeWeight = 1;\n    const emptyNodeWeight = 1;\n    const prevNode = newGrid[prevRow][prevCol];\n    const node = newGrid[row][col];\n    const prevStartNode = {\n        ...prevNode,\n        row: prevRow,\n        col: prevCol,\n        weight: emptyNodeWeight,\n        isStart: false,\n        isFinish: false,\n        isLastRow: prevRow === totRows - 1,\n        isLastColumn: prevCol === totCols - 1\n    }\n    const newStartNode = {\n        ...node,\n        row: row,\n        col: col,\n        weight: startNodeWeight,\n        isStart: true,\n        isFinish: false,\n        isLastRow: row === totRows - 1,\n        isLastColumn: col === totCols - 1\n    };\n    newGrid[prevRow][prevCol] = prevStartNode;\n    newGrid[row][col] = newStartNode;\n    return newGrid;\n}\n\nconst getNewGridWithFinishNodeUpdated = (grid, row, col, prevRow, prevCol) => {\n    const newGrid = grid.slice();\n    const totRows = grid.length;\n    const totCols = grid[0].length;\n    const finishNodeWeight = 1;\n    const emptyNodeWeight = 1;\n    const prevNode = newGrid[prevRow][prevCol];\n    const node = newGrid[row][col];\n    const prevFinishNode = {\n        ...prevNode,\n        row: prevRow,\n        col: prevCol,\n        weight: emptyNodeWeight,\n        isStart: false,\n        isFinish: false,\n        isLastRow: prevRow === totRows - 1,\n        isLastColumn: prevCol === totCols - 1\n    }\n    const newFinishNode = {\n        ...node,\n        row: row,\n        col: col,\n        weight: finishNodeWeight,\n        isStart: false,\n        isFinish: true,\n        isLastRow: row === totRows - 1,\n        isLastColumn: col === totCols - 1\n    };\n    newGrid[prevRow][prevCol] = prevFinishNode;\n    newGrid[row][col] = newFinishNode;\n    return newGrid;\n}\n\nconst getResizedGridWithUpdatedNodesCopied = (grid) => {\n    const resizedGrid = [];\n    const totCols = getFullPageWidthGridNumCols();\n    const totRows = GRID_NUM_ROWS;\n    const prevLastColIndex = grid[0].length - 1;\n    const initialNodeWeight = 1;\n\n    for (let row = 0; row < totRows; row++) {\n        const currentRow = [];\n        for (let col = 0; col < totCols; col++) {\n            if(col < grid[row].length) {\n                if(col === prevLastColIndex) {\n                    const node = grid[row][col];\n                    const updatedNode = {\n                      ...node,\n                      isLastColumn: false,\n                    };\n                    currentRow.push(updatedNode);\n                }\n                else {\n                    currentRow.push(grid[row][col]);\n                }\n            }\n            else {\n                currentRow.push(createNode(row, col, totRows, totCols, initialNodeWeight));\n            }\n        }\n        resizedGrid.push(currentRow);\n    }\n\n    return resizedGrid;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SortContest from './SortContest/SortContest.jsx';\nimport PathfindingContest from './PathfindingContest/PathfindingContest.jsx';\nimport './AlgoContest.css';\n\nexport default class AlgoContest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            algorithmType: ''\n        };\n    }\n\n    componentDidMount() {\n        this.changePageContentToPathfindingContest();\n    }\n\n    changePageContentToSortContest() {\n        this.setState({ algorithmType: 'sort' });\n\n        document.querySelector('#sort-contest-button').style.backgroundColor = '#5a6268';\n        document.querySelector('#pathfinding-contest-button').style.backgroundColor = 'transparent';\n\n        ReactDOM.render(<SortContest />, document.getElementById('main-content'));\n    }\n\n    changePageContentToPathfindingContest() {\n        this.setState({ algorithmType: 'pathfinding' });\n\n        document.querySelector('#sort-contest-button').style.backgroundColor = 'transparent';\n        document.querySelector('#pathfinding-contest-button').style.backgroundColor = '#5a6268';\n        \n        ReactDOM.render(<PathfindingContest />, document.getElementById('main-content'));\n    }\n\n    render() {\n        return (\n            <div id='algo-contest'>\n                <div id='algo-contest-header'>\n                    <a href=\"http://benshinnick.github.io/algorithm-contest\" id='algo-contest-header-link'>AlgorithmContest</a>\n                    <button id='sort-contest-button' onClick={() => this.changePageContentToSortContest()}>Sorting</button>\n                    <button id='pathfinding-contest-button' onClick={() => this.changePageContentToPathfindingContest()}>Pathfinding</button>\n                </div>\n                <div id='main-content'></div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport AlgoContest from './AlgoContest/AlgoContest.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AlgoContest></AlgoContest>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}