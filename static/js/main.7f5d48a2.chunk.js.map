{"version":3,"sources":["AlgoContest/SortContest/sortAlgorithms/InsertionSort.js","AlgoContest/SortContest/sortAlgorithms/MergeSort.js","AlgoContest/SortContest/sortAlgorithms/Quicksort.js","AlgoContest/SortContest/sortAlgorithms/BubbleSort.js","AlgoContest/SortContest/sortAlgorithms/HeapSort.js","AlgoContest/SortContest/sortAlgorithms/ShellSort.js","AlgoContest/SortContest/sortAlgorithms/SelectionSort.js","AlgoContest/SortContest/SortVisualizerContestant.jsx","AlgoContest/SortContest/SortContest.jsx","AlgoContest/PathfindingContest/Node/Node.jsx","AlgoContest/PathfindingContest/dataStructures/MinPriorityQueue.js","AlgoContest/PathfindingContest/dataStructures/DijkstraNode.js","AlgoContest/PathfindingContest/pathfindingAlgorithms/Dijkstra.js","AlgoContest/PathfindingContest/gridDrawingAlgorithms/BresenhamLineDrawAlgo.js","AlgoContest/PathfindingContest/PathfindingVisualizerContestant.jsx","AlgoContest/PathfindingContest/PathfindingContest.jsx","AlgoContest/AlgoContest.jsx","App.js","reportWebVitals.js","index.js"],"names":["getInsertionSortAnimations","array","animations","length","i","push","j","swap","insertionSort","index1","index2","temp","getMergeSortAnimations","auxiliaryArray","slice","mergeSort","mainArray","startIndex","endIndex","middleIndex","Math","floor","k","merge","getQuicksortAnimations","quicksort","lowIndex","highIndex","lowEndIndex","pivotIndex","min","max","random","pivot","done","quicksortPartition","getBubbleSortAnimations","isSwapped","bubbleSort","getHeapSortAnimations","maxHeapify","buildMaxHeap","lastElementIndex","heapSort","maxIndex","index","leftChild","rightChild","getShellSortAnimations","gap","first","shellSort","getSelectionSortAnimations","minIndex","selectionSort","PRIMARY_COLOR","SECONDARY_COLOR","SortVisualizerContestant","props","state","animationSpeedMS","algorithmType","allAlgorithmTypes","algorithmTypes","contestantNumber","numOfAnimationSteps","numOfSwapsOrOverwrites","numOfComparisons","arrayCopy","this","map","value","console","log","animationStepInfo","currentStepNumber","doNextMergeSortAnimationStep","doNextQuicksortAnimationStep","doNextShellSortAnimationStep","doNextInsertionSortAnimationStep","doNextHeapSortAnimationStep","doNextSelectionSortAnimationStep","doNextBubbleSortAnimationStep","animationCode","arrayBars","document","getElementsByClassName","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","ANIMATION_DELAY_MS","height","pivotLine","createElement","arrayContainer","getElementById","setAttribute","width","bottom","left","appendChild","remove","barOneIndex","barTwoIndex","lastAnimationStepNumber","algorithmPlace","handleAlgorithmIsNowFinished","createAlgorithmPlacelabel","placeLabelText","sortVisualizerContestant","placeLabel","createTextNode","statsLabel","statsLabelText","swapsOrOverwrites","placeLabelColor","borderColor","window","innerWidth","setState","display","destructAlgorithmPlaceLabel","destructAlgorithmStatsLabel","resetVisualizationStyling","updateAlgorithmType","className","id","onClick","algorithmDropDownButtonOnClick","removeMe","React","Component","ARRAY_MAX_VALUE","COUNTDOWN_DURATION_MS","ALGORITHM_TYPES","SortContest","setRef","ref","algoContestantRefs","handlePageResize","getFullPageWidthArraySize","isPreContest","isRandomArray","randomizeArray","generateNearlySortedArray","windowWidthSize","querySelector","textContent","setAnimationSpeed","addOrRemoveStickyEffectOnSortContestHeader","header","sticky","pageYOffset","classList","add","numOfContestants","removeContestant","bind","removeExtraContestants","disableDuringContestControlButtons","addEventListener","removeEventListener","newNumOfContestants","addComponent","randomIntFromInterval","resetSortContestPage","enableRemoveContestantButtons","disabled","innerText","contestantNum","getAlgorithmType","removeComponent","animationStandIn","sortVisualizerContestants","nextSortVisualizerContestant","insertBefore","disableRemoveContestantButtons","disablePreContestButtons","enableDuringContestControlButtons","startCountdown","allContestantAnimationData","getAllContestantAnimationDataAndSetAlgorithmStatInfo","runContestAnimations","scheduleContestFinishedCommands","getSortAnimations","setAllAlgorithmStatInfo","stepCounter","numOfFinishedContestants","placeNumber","hasContestantFinishedThisStep","doAnimationNextStep","scheduleAlgorithmIsNowFinishedCommands","allContestantMaxAnimationSteps","maxNumberOfAnimationSteps","handleContestIsNowFinished","getAnimationSpeed","enablePreContestSetupButtons","sortedArray","sort","a","b","createAlgorithmStatsLabel","numOfCountdownSeconds","innerHTML","fullPageWidthArraySize","numOfRepeatNumbers","numOfElements","ceil","clearAllAlgorithmStatsAndPlaceLabels","algorithmDropDownButtons","algorithmDropDownArrows","visibility","removeAlgorithmButtons","clearAllTimeouts","clearAllQuicksortPivotBars","allContestantPlaceInfo","findAllPlaceInformation","resetArrayBarsToCorrectHeights","numOfSteps","getNumOfAnimationsSteps","clearTimeout","startContest","addContestant","ContestantNumbers","genearateRandomArrayButtonOnClick","genearateNearySortedArrayButtonOnClick","addContestantOnClick","startContestButtonOnClick","skipToFinishButtonOnClick","Node","col","row","weight","isFinish","isStart","isWall","isLastRow","isLastColumn","onMouseDown","onMouseEnter","onMouseUp","extraClassName","isLastRowClassName","isLastColumnClassName","PriorityQueue","values","val","priority","newNode","current","parentIndex","parent","pop","end","leftChildIndex","rightChildIndex","DijkstraNode","distance","previousNode","isVisited","prevNode","getDijkstraAnimations","grid","startNode","finishNode","dijkstraGrid","numRows","numCols","nodes","Infinity","getDijkstraGrid","setDistance","priorityQueue","enqueue","isEmpty","closestNode","dequeue","getValue","getRow","getCol","setIsVisited","updateClosestNodeNeighbors","dijkstra","nextNode","currentNode","getPreviousNode","findNodesInShortestPathOrder","node","unvisitedNeighbors","neighbors","filter","neighbor","isNodeVisited","getUnvisitedNeighbors","altDistance","parseInt","getDistance","getWeight","setPreviousNode","PathfindingVisualizerContestant","selectedNodeWeight","isMousePressed","isStartNodeSelected","isFinishNodeSelected","lastUpdatedNode","numOfNodesVisisted","lengthOfPath","endNode","gridCopy","doNextDijkstraAnimationStep","adjacentPathRow","adjacentPathCol","visitedMarker","prevRow","prevCol","addShortestPathLineToNode","nextRow","nextCol","pathfindingVisualizerContestant","isStartOrFinishNode","selectStartNode","selectFinishNode","updateGridNodeWithSelectedWeight","addHoverStylingToAllGridNodes","isLastUpdatedNodeAdjacentToCurrentNode","fillInSkippedNodes","placeStartNode","placeFinishNode","finNodeCol","updateFinishNode","updateStartNode","allStartNodes","removeHoverStylingFromLastUpdatedNode","startNodeCol","allFinishNodes","currentRow","currentCol","abs","updateGridNodeWeight","currRow","currCol","updatedNodesCoordinates","lineCoordinates","x1","y1","x2","y2","x","y","dx","dy","dx1","dy1","px","py","xe","ye","pixelLinePairs","getLinePixelCoordinates","updateMultipleNodeWeights","setStartNodeAtLastUpdatedNode","setFinishNodeAtLastUpdatedNode","resetMouseEvents","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","hoverType","allStartSelectedNodes","prevNodeRow","prevNodeCol","allPrevStartSelectedNodes","NODE_TYPES","PathfindingContest","getFullPageWidthGridNumCols","isEmptyGrid","resetPathfindingContestPage","setEmptyGrid","setResizedGridWithUpdatedNodesCopied","gridNumRows","gridNumCols","selectedNodeType","startNodeRow","startNodeColumn","finishNodeRow","finishNodeColumn","setNewGridWithNodeWeightUpdated","setNewGridWithStartNodeUpdated","setNewGridWithFinishNodeUpdated","setNewGridWithMultipleWeightNodesUpdated","disableGrids","clearPathAndVisitedNodes","enableGrids","getPathfindingAnimations","emptyGrid","getEmptyGrid","totCols","finCol","totRows","startRow","startCol","finRow","resizedGrid","getResizedGridWithUpdatedNodesCopied","lastResizedGridIndex","moveStartNodeToBeInGrid","moveFinishNodeToBeInGrid","lastResizedGridCol","newStartNode","newFinishNode","newWeight","newGrid","getNewGridWithNodeWeightUpdated","getNewGridWithMultipleNodeWeightsUpdated","prevStartNodeRow","prevStartNodeCol","getNewGridWithStartNodeUpdated","prevFinishNodeRow","prevFinishNodeCol","getNewGridWithFinishNodeUpdated","visitedNodes","querySelectorAll","shortestPathLines","toggleResetGridDropdownButtons","toggleSelectNodeTypeDropdownButtons","nodeType","nodeTypeWeight","split","toggleSelectMazesAndMapsDropdownButtons","resetButtonOnClick","clearPathButtonOnClick","resetGridButtonOnClick","mazesAndMapsButtonOnClick","selectNodeTypeDropdownOnClick","nodeSelectionDropdownButtonOnClick","gridContainers","pointerEvents","selectNodeTypeDropdownButtonContainer","mazesAndMapsDropdownButtonContainer","createInitialNode","createNode","prevStartNode","prevFinishNode","prevLastColIndex","updatedNode","AlgoContest","changePageContentToSortContest","ReactDOM","render","alert","href","changePageContentToPathfindingContest","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.7f5d48a2.chunk.js","sourcesContent":["export function getInsertionSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    insertionSort(array, animations);\n    return animations;\n}\n\nfunction insertionSort(array, animations) {\n\n    // Animation codes:\n    //  'c' denotes comparison between two indexes,\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes,\n    //  'sf' denotes a swap is finished\n    for(let i = 1; i < array.length; ++i) {\n        animations.push(['c',i, i-1]);\n        animations.push(['cf',i, i-1]);\n\n        if(array[i] < array[i-1]) {\n            let j = i;\n            for(j; array[j] < array[j-1]; --j) {\n                animations.push(['c', j, j-1]);\n                animations.push(['cf', j, j-1]);\n                animations.push(['s', j, j-1, array[j], array[j-1]]);\n                animations.push(['sf']);\n                swap(array, j, j-1);\n            }\n            if(j-1 >= 0) {\n                animations.push(['c',j, j-1]);\n                animations.push(['cf',j, j-1]);\n            }\n        }\n    }\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n  \nfunction mergeSort(mainArray, startIndex, endIndex, auxiliaryArray, animations) {\n    if (startIndex >= endIndex) return;\n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\n    mergeSort(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\n    mergeSort(auxiliaryArray, middleIndex + 1, endIndex, mainArray, animations);\n    merge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\n}\n  \nfunction merge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\n\n    // Animation codes:\n    //  'c' denotes comparison between two indexes,\n    //  'cf' denotes that a comparison is finished\n    //  'o' denotes a value in the main array is overwritten by a value in the auxiliary array\n    //  'of' denates that a value has finished being overwritten\n    let k = startIndex;\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while(i <= middleIndex && j <= endIndex) {\n        animations.push(['c', i, j]);\n        animations.push(['cf', i, j]);\n        if(auxiliaryArray[i] <= auxiliaryArray[j]) {\n            animations.push(['o', k]);\n            animations.push(['of', k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        } else {\n            animations.push(['o', k]);\n            animations.push(['of', k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while(i <= middleIndex) {\n        animations.push(['c', i, i]);\n        animations.push(['cf', i, i]);\n        animations.push(['o', k]);\n        animations.push(['of', k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIndex) {\n        animations.push(['c', j, j]);\n        animations.push(['cf', j, j]);\n        animations.push(['o', k]);\n        animations.push(['of', k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n        }\n  }","export function getQuicksortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    quicksort(array, 0, array.length - 1, animations);\n    return animations;\n}\n\nfunction quicksort(array, lowIndex, highIndex, animations) {\n    if (lowIndex >= highIndex) {\n        return;\n    }\n    \n    let lowEndIndex = quicksortPartition(array, lowIndex, highIndex, animations);\n\n    quicksort(array, lowIndex, lowEndIndex, animations);\n    quicksort(array, lowEndIndex + 1, highIndex, animations);\n}\n\nfunction quicksortPartition(array, lowIndex, highIndex, animations) {\n    // Animation codes:\n    //  'c' denotes a comparison between the pivot\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes\n    //  'sf' denotes a swap is finished\n    //  'p' denotes that a pivot was chosen\n    //  'pf' denotes that we are finished using the last pivot\n\n    // I choose a value at a valid random index to serve as our pivot value\n    let pivotIndex = randomIntFromInterval(lowIndex, highIndex);\n    let pivot = array[pivotIndex];\n    animations.push(['p', lowIndex, highIndex, pivot]);\n    \n    let done = false;\n    while(!done) {\n\n        while (array[lowIndex] < pivot) {\n            animations.push(['c', lowIndex]);\n            animations.push(['cf', lowIndex]);\n            lowIndex++;\n        }\n    \n        while (pivot < array[highIndex]) {\n            animations.push(['c', highIndex]);\n            animations.push(['cf', highIndex]);\n            highIndex--;\n        }\n\n        if (lowIndex >= highIndex) {\n            done = true;\n            animations.push(['c']);\n            animations.push(['cf']);\n        }\n\n        else {\n            animations.push(['s', lowIndex, highIndex]);\n            animations.push(['sf', lowIndex, highIndex, array[lowIndex], array[highIndex]]);\n            swap(array, lowIndex, highIndex);\n            lowIndex++;\n            highIndex--;\n        }\n    }\n\n    animations.push(['pf']);\n    \n    return highIndex;\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","export function getBubbleSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    bubbleSort(array, animations);\n    return animations;\n}\n  \nfunction bubbleSort(array, animations){\n \n    // Animation codes:\n    //  'c' denotes comparison between two indexes,\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes,\n    //  'sf' denotes a swap is finished\n    let isSwapped = false;\n    for(let i = 0; i < array.length; ++i){\n        \n        isSwapped = false;\n        for(let j = 0; j < (array.length - i -1); ++j){\n            if(array[j] > array[j+1]){\n                animations.push(['c',j, j+1]);\n                animations.push(['cf',j, j+1]);\n                animations.push(['s', j, j+1, array[j], array[j+1]]);\n                animations.push(['sf', j, j+1]);\n                swap(array, j, j+1);\n                isSwapped = true;\n            }\n            if(j+1 < array.length) {\n                animations.push(['c',j, j+1]);\n                animations.push(['cf',j, j+1]);\n            }\n\n        }\n        \n        if(!isSwapped){\n            break;\n        }\n    } \n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","export function getHeapSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    heapSort(array, animations);\n    return animations;\n}\n\nfunction heapSort(array, animations) {\n    buildMaxHeap(array, animations);\n\n    let lastElementIndex = array.length - 1;\n\n    while(lastElementIndex > 0) {\n        animations.push(['s', 0, lastElementIndex]);\n        animations.push(['sf', 0, lastElementIndex, array[0], array[lastElementIndex]]);\n        swap(array, 0, lastElementIndex);\n        maxHeapify(array, 0, lastElementIndex, animations);\n        lastElementIndex--;\n    }\n}\n\nfunction buildMaxHeap(array, animations) {\n    let length = array.length;\n    let middle = Math.floor(array.length / 2 - 1);\n    let i = middle;\n\n    while(i >= 0) {\n        maxHeapify(array, i, length, animations);\n        i--;\n    }\n}\n\nfunction maxHeapify(array, i, maxIndex, animations) {\n    // Animation codes:\n    //  'c' denotes a comparison between the pivot\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes\n    //  'sf' denotes a swap is finished\n\n    let index;\n    let leftChild;\n    let rightChild;\n\n    while(i < maxIndex) {\n        index = i;\n\n        leftChild = i * 2 + 1;\n        rightChild = leftChild + 1;\n\n        if(leftChild < maxIndex) {\n            animations.push(['c', leftChild, index]);\n            animations.push(['cf', leftChild, index]);\n        }\n        if(leftChild < maxIndex && array[leftChild] > array[index]) {\n            index = leftChild;\n        }\n        \n        if(rightChild < maxIndex) {\n            animations.push(['c', leftChild, index]);\n            animations.push(['cf', leftChild, index]);\n        }\n        if(rightChild < maxIndex && array[rightChild] > array[index]) {\n            animations.push(['c', rightChild, index]);\n            animations.push(['cf', rightChild, index]);\n            index = rightChild;\n        }\n\n        if(index === i) {\n            return;\n        }\n        else {\n            animations.push(['s', i, index]);\n            animations.push(['sf', i, index, array[i], array[index]]);\n            swap(array, i, index);\n            i = index;\n        }\n\n    }\n\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","export function getShellSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    shellSort(array, animations);\n    return animations;\n}\n\nfunction shellSort(array, animations) {\n\n    // Animation codes:\n    //  'c' denotes comparison between two indexes,\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes,\n    //  'sf' denotes a swap is finished\n\n\tfor (let gap = Math.floor(array.length/2); gap > 0; gap = Math.floor(gap/2))\n\t{\n\t\t//insetion sort on each section\n\t\tfor (let i = gap; i < array.length; ++i)\n\t\t{\n            let first = array[i];\n            let j = i;\n            for (j = i; j >= gap && array[j - gap] > first; j -= gap) {\n                animations.push(['c', j, j-gap]);\n                animations.push(['cf', j, j-gap]);\n                animations.push(['s', j, j-gap]);\n                animations.push(['sf', j, j-gap, array[j], array[j-gap]]);\n                swap(array, j, j-gap);\n            }\n            if(j-gap >= 0) {\n                animations.push(['c',j, j-gap]);\n                animations.push(['cf',j, j-gap]);\n            }\n\t\t}\n\t}\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","export function getSelectionSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    selectionSort(array, animations);\n    return animations;\n}\n\nfunction selectionSort(array, animations) {\n\n    // Animation codes:\n    //  'c' denotes comparison between two indexes,\n    //  'cf' denotes that a comparison is finished\n    //  's' denotes a swap between two indexes,\n    //  'sf' denotes a swap is finished\n    //  'm' denotes that we are finished with our minumun index\n    for (let i = 0; i < array.length - 1; ++i) {\n\n        let minIndex = i;\n        for (let j = i + 1; j < array.length; ++j) {\n            animations.push(['c', j, minIndex]);\n            animations.push(['cf', j]);\n            if (array[j] < array[minIndex]) {\n                animations.push(['m', minIndex]);\n                minIndex = j;\n            }     \n        }\n        animations.push(['m', minIndex]);\n        \n        animations.push(['s', i, minIndex]);\n        animations.push(['sf', i, minIndex, array[i], array[minIndex]]);\n        swap(array, i , minIndex);\n    }\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","import React from 'react';\nimport { getInsertionSortAnimations } from './sortAlgorithms/InsertionSort.js';\nimport { getMergeSortAnimations } from './sortAlgorithms/MergeSort.js';\nimport { getQuicksortAnimations } from './sortAlgorithms/Quicksort.js';\nimport { getBubbleSortAnimations } from './sortAlgorithms/BubbleSort.js';\nimport { getHeapSortAnimations } from './sortAlgorithms/HeapSort.js';\nimport { getShellSortAnimations } from './sortAlgorithms/ShellSort.js';\nimport { getSelectionSortAnimations } from './sortAlgorithms/SelectionSort.js';\nimport './css/SortVisualizerContestant.css';\n\n// main color of the array bars: dark blue\nconst PRIMARY_COLOR = '#5457ff';\n// color of array bars that are being compared or swapped\nconst SECONDARY_COLOR = 'red';\n// color of all the array bars once sorting has finished\nconst FINISHED_SORTING_COLOR = '#007bff';\n\nconst DEFAULT_BACKGROUND_COLOR = '#f7f7f7'; // light grey\nconst FINISHED_SORTING_BACKGROUND_COLOR = '#edfff2'; // light green\n\nexport default class SortVisualizerContestant extends React.Component {\n\n    static ANIMATION_DELAY_MS = 3000;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            animationSpeedMS: 2,\n            array: this.props.array,\n            algorithmType: this.props.algorithmType,\n            allAlgorithmTypes: this.props.algorithmTypes,\n            contestantNumber: this.props.contestantNumber,\n            numOfAnimationSteps: -1,\n            numOfSwapsOrOverwrites: -1,\n            numOfComparisons: -1\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if(props.array !== state.array){\n            return{ array: props.array };\n        }\n        return null;\n    }\n\n    getSortAnimations() {\n        let arrayCopy = this.state.array.map((value) => value);\n\n        switch(this.state.algorithmType) {\n            case 'merge':\n                return getMergeSortAnimations(arrayCopy);\n            case 'quick':\n                return getQuicksortAnimations(arrayCopy);\n            case 'shell':\n                return getShellSortAnimations(arrayCopy);\n            case 'insertion':\n                return getInsertionSortAnimations(arrayCopy);\n            case 'heap':\n                return getHeapSortAnimations(arrayCopy);\n            case 'selection':\n                return getSelectionSortAnimations(arrayCopy);\n            case 'bubble':\n                return getBubbleSortAnimations(arrayCopy);\n            default:\n                console.log(\"Error: Unexpected Algorithm Type\");\n                return null;\n        }\n    }\n\n    doAnimationNextStep(animationStepInfo, currentStepNumber) {\n        switch(this.state.algorithmType) {\n            case 'merge':\n                this.doNextMergeSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'quick':\n                this.doNextQuicksortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'shell':\n                this.doNextShellSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'insertion':\n                this.doNextInsertionSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'heap':\n                this.doNextHeapSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'selection':\n                this.doNextSelectionSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'bubble':\n                this.doNextBubbleSortAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            default:\n                console.log(\"Error: Unexpected Algorithm Type\",);\n        }\n    }\n\n    doNextMergeSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n\n        const barOneIndex = animationStepInfo[1];\n        const barOneStyle = arrayBars[barOneIndex].style;\n\n        //comparison cases\n        if (animationCode === 'c' || animationCode === 'cf') {\n            const barTwoIndex = animationStepInfo[2];\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n\n            if(animationCode === 'c') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n                return;\n            }\n            else if(animationCode === 'cf') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\n                    barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n                return;\n            }\n        }\n        //overwrite cases\n        else {\n            if(animationCode === 'o') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n            }\n            else if(animationCode === 'of') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\n                    barOneStyle.height = `${animationStepInfo[2]}px`;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n            }\n            return;\n        }\n\n    }\n\n    doNextQuicksortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n\n        // swap cases\n        if (animationCode === 's' || animationCode === 'sf') {\n            const barOneIndex = animationStepInfo[1];\n            const barOneStyle = arrayBars[barOneIndex].style;\n            const barTwoIndex = animationStepInfo[2];\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n\n            if(animationCode === 's') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n            }\n            else if(animationCode === 'sf') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\n                    barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                    barOneStyle.height = `${animationStepInfo[4]}px`;\n                    barTwoStyle.height = `${animationStepInfo[3]}px`;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n            }\n        }\n        // comparison cases\n        else if(animationCode === 'c' || animationCode === 'cf'){\n            if(animationStepInfo.length === 1) {\n                return;\n            }\n            const barOneIndex = animationStepInfo[1];\n            const barOneStyle = arrayBars[barOneIndex].style;\n\n            if(animationCode === 'c') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n            }\n            else if(animationCode === 'cf') {\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n            }\n        }\n        // pivot cases\n        else {\n            if(animationCode === 'p') {\n                setTimeout(() => {\n                    let pivotLine = document.createElement(\"HR\");\n                    let arrayContainer = document.getElementById(`array-container-${this.state.contestantNumber}`);\n                    pivotLine.setAttribute(\"id\", `pivot-line-${this.state.contestantNumber}`);\n                    pivotLine.setAttribute(\"class\", `pivot-line`);\n                    pivotLine.style.width = `${((animationStepInfo[2] - animationStepInfo[1] + 1) * 4)-2}px`;\n                    pivotLine.style.bottom = `${animationStepInfo[3] + 5}px`;\n                    pivotLine.style.left = `${((animationStepInfo[1] + 1) * 4) + 2}px`;\n                    arrayContainer.appendChild(pivotLine);\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n                return;\n            }\n            else if(animationCode === 'pf') {\n                setTimeout(() => {\n                    let pivotLine = document.getElementById(`pivot-line-${this.state.contestantNumber}`);\n                    pivotLine.remove();\n                }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n            }\n        }\n    }\n\n    doNextShellSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        const barOneIndex = animationStepInfo[1];\n        const barTwoIndex = animationStepInfo[2];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        //comparison cases\n        if(animationCode === 'c') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'cf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        //swap cases\n        else if(animationCode === 's') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'sf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                barOneStyle.height = `${animationStepInfo[4]}px`;\n                barTwoStyle.height = `${animationStepInfo[3]}px`;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n    }\n\n    doNextInsertionSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        if(animationCode === 'sf') {\n            return;\n        }\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        const barOneIndex = animationStepInfo[1];\n        const barTwoIndex = animationStepInfo[2];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        // comparison cases\n        if(animationCode === 'c') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'cf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        // swap case\n        else if(animationCode === 's') {\n            setTimeout(() => {\n                barOneStyle.height = `${animationStepInfo[4]}px`;\n                barTwoStyle.height = `${animationStepInfo[3]}px`;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n    }\n\n    doNextHeapSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        const barOneIndex = animationStepInfo[1];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoIndex = animationStepInfo[2];\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        // comparison cases\n        if(animationCode === 'c') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'cf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        // swap cases\n        else if(animationCode === 's') {\n        setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'sf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                barOneStyle.height = `${animationStepInfo[4]}px`;\n                barTwoStyle.height = `${animationStepInfo[3]}px`;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n    }\n\n    doNextSelectionSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        const barOneIndex = animationStepInfo[1];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        //comparison cases\n        if(animationCode === 'c') {\n            const barTwoIndex = animationStepInfo[2];\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'cf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        // swap case\n        else if(animationCode === 's') {\n            const barTwoIndex = animationStepInfo[2];\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'sf') {\n            const barTwoIndex = animationStepInfo[2];\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                barOneStyle.height = `${animationStepInfo[4]}px`;\n                barTwoStyle.height = `${animationStepInfo[3]}px`;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        // finished with min case\n        else if(animationCode === 'm') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n    }\n\n    doNextBubbleSortAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        if(animationCode === 'sf') {\n            return;\n        }\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        const barOneIndex = animationStepInfo[1];\n        const barTwoIndex = animationStepInfo[2];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        // comparison cases\n        if(animationCode === 'c') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        else if(animationCode === 'cf') {\n            setTimeout(() => {\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n        //swap case\n        else if(animationCode === 's') {\n            setTimeout(() => {\n                barOneStyle.height = `${animationStepInfo[4]}px`;\n                barTwoStyle.height = `${animationStepInfo[3]}px`;\n            }, currentStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n        }\n    }\n\n    resetVisualizationStyling() {\n        document.getElementById(`sort-visualizer-${this.state.contestantNumber}`).style.backgroundColor = DEFAULT_BACKGROUND_COLOR;\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        if(arrayBars[0].style.backgroundColor !== PRIMARY_COLOR) {\n            for (var i = 0; i < arrayBars.length; i++) {\n                arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n            }\n        }\n    }\n\n    scheduleAlgorithmIsNowFinishedCommands(lastAnimationStepNumber, algorithmPlace) {\n        setTimeout(() => {\n            this.handleAlgorithmIsNowFinished(algorithmPlace);\n        }, lastAnimationStepNumber * this.state.animationSpeedMS + SortVisualizerContestant.ANIMATION_DELAY_MS);\n    }\n\n    handleAlgorithmIsNowFinished(algorithmPlace) {\n        this.createAlgorithmPlacelabel(algorithmPlace);\n        document.getElementById(`sort-visualizer-${this.state.contestantNumber}`).style.backgroundColor = FINISHED_SORTING_BACKGROUND_COLOR;\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        for (var i = 0; i < arrayBars.length; i++) {\n            arrayBars[i].style.backgroundColor = FINISHED_SORTING_COLOR;\n        }  \n    }\n\n    createAlgorithmPlacelabel(algorithmPlace) {\n        let sortVisualizerContestant = document.getElementById(`sort-visualizer-${this.state.contestantNumber}`);\n        let placeLabel = document.createElement(\"DIV\");\n        placeLabel.setAttribute(\"id\", `place-label-${this.state.contestantNumber}`);\n        placeLabel.setAttribute(\"class\", 'place-label');\n\n        let placeLabelText;\n        if(algorithmPlace === 1) {\n            const GOLD = '#c7b620';\n            placeLabel.style.backgroundColor = GOLD;\n            placeLabelText = document.createTextNode('1st Place');\n        }\n        else if(algorithmPlace === 2) {\n            const SILVER = '#929292';\n            placeLabel.style.backgroundColor = SILVER;\n            placeLabelText = document.createTextNode('2nd Place');\n        }\n        else if(algorithmPlace === 3) {\n            const BRONZE = '#ab7627';\n            placeLabel.style.backgroundColor = BRONZE;\n            placeLabelText = document.createTextNode('3rd Place');\n        }\n        else {\n            const DEFAULT = '#636363';\n            placeLabel.style.backgroundColor = DEFAULT;\n            placeLabelText = document.createTextNode(`${algorithmPlace}th Place`);\n        }\n\n        placeLabel.appendChild(placeLabelText);\n        sortVisualizerContestant.appendChild(placeLabel);\n    }\n\n    createAlgorithmStatsLabel() {\n        let sortVisualizerContestant = document.getElementById(`sort-visualizer-${this.state.contestantNumber}`);\n        let statsLabel = document.createElement(\"DIV\");\n        statsLabel.setAttribute(\"id\", `stats-label-${this.state.contestantNumber}`);\n        statsLabel.setAttribute(\"class\", 'stats-label');\n\n        let placeLabelColor = document.getElementById(`place-label-${this.state.contestantNumber}`).style.backgroundColor;\n        statsLabel.style.borderColor = placeLabelColor;\n\n        let statsLabelText;\n        let swapsOrOverwrites;\n        if(this.state.algorithmType !== 'merge') {\n            swapsOrOverwrites = 'swaps';\n        }\n        else {\n            swapsOrOverwrites = 'overwrites';\n        }\n        if(window.innerWidth >= 700) {\n            statsLabelText = document.createTextNode(\n                `Final Stats: ${this.state.numOfComparisons} comparisons and ${this.state.numOfSwapsOrOverwrites} ${swapsOrOverwrites}`);\n        }\n        else {\n            statsLabelText = document.createTextNode(\n                `${this.state.numOfComparisons} comparisons and ${this.state.numOfSwapsOrOverwrites} ${swapsOrOverwrites}`);\n        }\n        \n        statsLabel.appendChild(statsLabelText);\n        sortVisualizerContestant.appendChild(statsLabel);\n    }\n\n    destructAlgorithmPlaceLabel() {\n        let placeLabel = document.getElementById(`place-label-${this.state.contestantNumber}`);\n        if(placeLabel !== null) {\n            placeLabel.remove();\n        }\n    }\n\n    destructAlgorithmStatsLabel() {\n        let statsLabel = document.getElementById(`stats-label-${this.state.contestantNumber}`);\n        if(statsLabel !== null) {\n            statsLabel.remove();\n        }\n    }\n\n    setAnimationSpeed(animationSpeedMS) {\n        if(animationSpeedMS !== this.state.animationSpeedMS) {\n            this.setState({...this.state, animationSpeedMS: animationSpeedMS});\n        }\n    }\n\n    getAnimationSpeed() {\n        return this.state.animationSpeedMS;\n    }\n\n    updateAlgorithmType(algorithmType) {\n        this.setState({...this.state, algorithmType: algorithmType});\n    }\n\n    getAlgorithmType() {\n        return this.state.algorithmType;\n    }\n\n    setAllAlgorithmStatInfo(numOfAnimationSteps, numOfComparisons, numOfSwapsOrOverwrites) {\n        this.setState({\n            ...this.state,\n            numOfAnimationSteps: numOfAnimationSteps,\n            numOfComparisons: numOfComparisons,\n            numOfSwapsOrOverwrites: numOfSwapsOrOverwrites\n        });\n    }\n\n    getNumOfAnimationsSteps() {\n        return this.state.numOfAnimationSteps;  \n    }\n\n    getNumOfComparisons() {\n        return this.state.numOfComparisons;  \n    }\n\n    getNumOfSwapsOrOverwrites() {\n        return this.state.numOfSwapsOrOverwrites;\n    }\n\n    resetArrayBarsToCorrectHeights() {\n        const arrayBars = document.getElementsByClassName(`array-bar-${this.state.contestantNumber}`);\n        for (var i = 0; i < arrayBars.length; i++) {\n            arrayBars[i].style.height = `${this.state.array[i]}px`;\n        }\n    }\n\n    removeComponent() {\n        document.getElementById(`sort-visualizer-${this.state.contestantNumber}`).style.display = 'none';\n    }\n\n    addComponent() {\n        document.getElementById(`sort-visualizer-${this.state.contestantNumber}`).style.display = 'block';\n    }\n\n    algorithmDropDownButtonOnClick(algorithmType) {\n        this.destructAlgorithmPlaceLabel();\n        this.destructAlgorithmStatsLabel();\n        this.resetVisualizationStyling();\n        this.updateAlgorithmType(algorithmType);\n    }\n\n    render() {\n        return (\n            <div className='sort-visualizer' id={`sort-visualizer-${this.state.contestantNumber}`}>\n                <div className=\"dropdown\">\n                    <div id='algorithm-dropdown-label'>{this.state.algorithmType}<div className='dropdown-arrow'>▼</div></div>\n                    <div className=\"dropdown-content\">\n                        {this.state.allAlgorithmTypes.map((algorithmType) => (\n                        (algorithmType !== this.state.algorithmType) ?\n                            <button\n                                key={algorithmType}\n                                className='algorithm-dropdown-button'\n                                onClick={() => this.algorithmDropDownButtonOnClick(algorithmType)}\n                            >{algorithmType}</button>\n                            : null\n                        ))}\n                    </div>\n                </div>\n                    <div className='array-container' id={`array-container-${this.state.contestantNumber}`}>\n                        {this.state.array.map((value, index) => (\n                        <div className={`array-bar-${this.state.contestantNumber}`}\n                            key={`${index}-${this.contestantNumber}`}\n                            style={{\n                                backgroundColor: PRIMARY_COLOR,\n                                height: `${value}px`,\n                            }}></div>\n                        ))}\n                    </div>\n                    <button id='remove-button' className='remove' onClick={() => this.props.removeMe(this.state.contestantNumber)}>-</button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport SortVisualizerContestant from './SortVisualizerContestant.jsx';\nimport './css/SortContest.css';\n\nconst ARRAY_MIN_VALUE = 5;\nconst ARRAY_MAX_VALUE = 130;\nconst INITIAL_NUM_OF_CONTESTANTS = 7;\nconst MAX_NUM_OF_CONTESTANTS = 10;\nconst COUNTDOWN_DURATION_MS = SortVisualizerContestant.ANIMATION_DELAY_MS;\n\nconst ALGORITHM_TYPES = [\n    'merge',\n    'quick',\n    'heap',\n    'shell',\n    'insertion',\n    'bubble',\n    'selection'\n]\n\nexport default class SortContest extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            numOfContestants: INITIAL_NUM_OF_CONTESTANTS,\n            isPreContest: true,\n            isRandomArray: true,\n        };\n        this.algoContestantRefs = [];\n        this.removeContestant = this.removeContestant.bind(this);\n    }\n\n    setRef = (ref) => {\n        this.algoContestantRefs.push(ref);\n    };\n\n    componentDidMount() {\n        this.removeExtraContestants();\n        this.handlePageResize();\n        this.disableDuringContestControlButtons();\n        this.randomizeArray();\n        window.addEventListener('resize', this.handlePageResize);\n        window.addEventListener('scroll', this.addOrRemoveStickyEffectOnSortContestHeader);\n    }\n    \n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handlePageResize);\n        window.removeEventListener('scroll', this.addOrRemoveStickyEffectOnSortContestHeader);\n    }\n\n    addContestant() {\n        const newNumOfContestants = this.state.numOfContestants + 1;\n        this.algoContestantRefs[this.state.numOfContestants].addComponent();\n        this.algoContestantRefs[this.state.numOfContestants].updateAlgorithmType(ALGORITHM_TYPES[randomIntFromInterval(0,4)]);\n        this.setState({...this.state, numOfContestants: newNumOfContestants}, () => {\n            this.resetSortContestPage();\n            this.enableRemoveContestantButtons();\n        });\n        if(newNumOfContestants === MAX_NUM_OF_CONTESTANTS) {\n            document.getElementById('sort-add-contestant-button').disabled = true;\n            document.getElementById('sort-add-contestant-button').innerText = 'MAX';\n        }\n        else {\n            document.getElementById('sort-add-contestant-button').disabled = false;\n            if(window.innerWidth <= 1195) {\n                document.getElementById('sort-add-contestant-button').innerText = 'Add';\n            }\n            else {\n                document.getElementById('sort-add-contestant-button').innerText = 'Add Contestant';\n            }\n        }\n    }\n\n    removeContestant(contestantNum) {\n        //shift all algorithm types over then removes the last one\n        for(let i = contestantNum - 1; i < this.state.numOfContestants - 1; ++i) {\n            this.algoContestantRefs[i].updateAlgorithmType(this.algoContestantRefs[i+1].getAlgorithmType());\n        }\n        const newNumOfContestants = this.state.numOfContestants - 1;\n        this.algoContestantRefs[this.state.numOfContestants - 1].removeComponent();\n        this.setState({...this.state, numOfContestants: newNumOfContestants}, this.resetSortContestPage());\n        // do remove animation\n        let animationStandIn = document.createElement(\"DIV\");\n        animationStandIn.setAttribute(\"class\", 'remove-element-animation-stand-in');\n        let sortVisualizerContestants = document.getElementById('sort-visualizers');\n        let nextSortVisualizerContestant = document.getElementById(`sort-visualizer-${contestantNum}`);\n        sortVisualizerContestants.insertBefore(animationStandIn, nextSortVisualizerContestant);\n        setTimeout(() => {\n            animationStandIn.remove();\n        }, 800);\n        if(newNumOfContestants === 2) {\n            this.disableRemoveContestantButtons();\n        }\n        //renable the remove contestant since we know we do not have the maximum number of contestants\n        document.getElementById('sort-add-contestant-button').disabled = false;\n        if(window.innerWidth <= 1195) {\n            document.getElementById('sort-add-contestant-button').innerText = 'Add';\n        }\n        else {\n            document.getElementById('sort-add-contestant-button').innerText = 'Add Contestant';\n        }\n        \n    }\n\n    startContest() {\n        this.disablePreContestButtons();\n        this.enableDuringContestControlButtons()\n        this.startCountdown();\n        const allContestantAnimationData = this.getAllContestantAnimationDataAndSetAlgorithmStatInfo();\n        this.runContestAnimations(allContestantAnimationData);\n        this.scheduleContestFinishedCommands(allContestantAnimationData);\n    }\n\n    getAllContestantAnimationDataAndSetAlgorithmStatInfo() {\n        const allContestantAnimationData = [];\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            allContestantAnimationData[i] = this.algoContestantRefs[i].getSortAnimations();\n            let numOfComparisons = 0;\n            let numOfSwapsOrOverwrites = 0;\n            for(let j = 0; j < allContestantAnimationData[i].length; ++j){\n                let animationCode = allContestantAnimationData[i][j][0];\n                if(animationCode === 'c') {\n                    numOfComparisons++;\n                }\n                else if(animationCode === 's' || animationCode === 'o') {\n                    numOfSwapsOrOverwrites++;\n                }\n            }\n            this.algoContestantRefs[i].setAllAlgorithmStatInfo(allContestantAnimationData[i].length / 2, numOfComparisons, numOfSwapsOrOverwrites);\n        }\n\n        return allContestantAnimationData;\n    }\n\n    runContestAnimations(allContestantAnimationData) {\n        let stepCounter = 0;\n        let numOfFinishedContestants = 0;\n        let placeNumber = 0;\n        while(numOfFinishedContestants < this.state.numOfContestants) {\n            let hasContestantFinishedThisStep = false;\n            for(let i = 0; i < this.state.numOfContestants; ++i) {\n                if(stepCounter > allContestantAnimationData[i].length) {\n                    continue;\n                }\n                else if(stepCounter === allContestantAnimationData[i].length) {\n                    numOfFinishedContestants++;\n                    if(hasContestantFinishedThisStep === false) {\n                        placeNumber++;\n                        hasContestantFinishedThisStep = true;\n                        this.algoContestantRefs[i].scheduleAlgorithmIsNowFinishedCommands(stepCounter, placeNumber);\n                    }\n                    else {\n                        this.algoContestantRefs[i].scheduleAlgorithmIsNowFinishedCommands(stepCounter, placeNumber);\n                    }\n                    continue;\n                }\n                else {\n                    this.algoContestantRefs[i].doAnimationNextStep(\n                        allContestantAnimationData[i][stepCounter],\n                        stepCounter\n                    );\n                }\n            }\n            stepCounter++;\n        }\n    }\n\n    scheduleContestFinishedCommands(allContestantAnimationData) {\n        const allContestantMaxAnimationSteps = [];\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            allContestantMaxAnimationSteps.push(allContestantAnimationData[i].length);\n        }\n\n        const maxNumberOfAnimationSteps = Math.max(...allContestantMaxAnimationSteps);\n        setTimeout(() => {\n            this.handleContestIsNowFinished();\n        }, maxNumberOfAnimationSteps * this.algoContestantRefs[0].getAnimationSpeed() + SortVisualizerContestant.ANIMATION_DELAY_MS);\n    }\n\n    handleContestIsNowFinished() {\n        this.enablePreContestSetupButtons();\n        this.disableDuringContestControlButtons();\n        const sortedArray = this.state.array.sort(function(a, b){return a - b});\n        this.setState({ ...this.state, array: sortedArray });\n\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            this.algoContestantRefs[i].createAlgorithmStatsLabel();\n            this.algoContestantRefs[i].setAllAlgorithmStatInfo(-1, -1, -1);\n        }\n    }\n\n    startCountdown() {\n        let numOfCountdownSeconds = COUNTDOWN_DURATION_MS / 1000;\n        for(let i = 0; i < numOfCountdownSeconds; ++i) {\n            setTimeout(() => {\n                document.getElementById(\"sort-start-contest-button\").innerHTML = `${numOfCountdownSeconds - i}`;\n            }, i * 1000);\n        }\n\n        setTimeout(() => {\n            document.getElementById(\"sort-start-contest-button\").innerHTML = 'GO!';\n        }, COUNTDOWN_DURATION_MS); \n    }\n\n    randomizeArray() {\n        let array = [];\n        let fullPageWidthArraySize = this.getFullPageWidthArraySize();\n        for (let i = 0; i < fullPageWidthArraySize; ++i) {\n            array.push(randomIntFromInterval(ARRAY_MIN_VALUE, ARRAY_MAX_VALUE));\n        }\n        this.setState({ ...this.state, array: array });\n    }\n\n    generateNearlySortedArray() {\n        let numOfElements = 0;\n        let array = [];\n        let fullPageWidthArraySize = this.getFullPageWidthArraySize();\n        let numOfRepeatNumbers;\n        if(fullPageWidthArraySize < ARRAY_MAX_VALUE) {\n            numOfRepeatNumbers = 1;\n        }\n        else if(fullPageWidthArraySize < ARRAY_MAX_VALUE*2) {\n            numOfRepeatNumbers = 2;\n        }\n        else {\n            numOfRepeatNumbers = 3;\n        }\n\n        for (let i = ARRAY_MIN_VALUE; i < ARRAY_MAX_VALUE; ++i) {\n            for(let j = 0; j < numOfRepeatNumbers; ++j) {\n                array.push(i);\n                numOfElements++;\n                if(numOfElements >= fullPageWidthArraySize - 1) {\n                    break;\n                }\n            }\n            if(numOfElements >= fullPageWidthArraySize - 1) {\n                break;\n            }\n        }\n        for (let i = numOfElements; i < fullPageWidthArraySize; ++i) {\n            array.push(ARRAY_MAX_VALUE);\n        }\n        for(let i = 0; i < 5; ++i) {\n            let randomIndex1 = Math.ceil(Math.random() * array.length - 1);\n            let randomIndex2 = Math.ceil(Math.random() * array.length - 1);\n            swap(array, randomIndex1, randomIndex2);\n        }\n\n        this.setState({ ...this.state, array: array });\n    }\n\n    resetSortContestPage() {\n        this.enablePreContestSetupButtons();\n        this.clearAllAlgorithmStatsAndPlaceLabels();\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            this.algoContestantRefs[i].resetVisualizationStyling();\n        }\n    }\n\n    disablePreContestButtons() {\n        document.getElementById(\"sort-start-contest-button\").disabled = true;\n        document.getElementById(\"randomize-button\").disabled = true;\n        document.getElementById(\"nearly-sorted-button\").disabled = true;\n        document.getElementById('sort-add-contestant-button').disabled = true;\n\n        const algorithmDropDownButtons = document.getElementsByClassName('algorithm-dropdown-button');\n        for(let i = 0; i < algorithmDropDownButtons.length; ++i) {\n            algorithmDropDownButtons[i].disabled = true;\n        }\n        const algorithmDropDownArrows = document.getElementsByClassName('dropdown-arrow');\n        for(let i = 0; i < algorithmDropDownArrows.length; ++i) {\n            algorithmDropDownArrows[i].style.visibility = 'hidden';\n        }\n        this.disableRemoveContestantButtons();\n    }\n\n    enablePreContestSetupButtons() {\n        document.getElementById(\"sort-start-contest-button\").innerHTML = 'Start';\n        document.getElementById(\"sort-start-contest-button\").disabled = false;\n        document.getElementById(\"randomize-button\").disabled = false;\n        document.getElementById(\"nearly-sorted-button\").disabled = false;\n        if(this.state.numOfContestants < MAX_NUM_OF_CONTESTANTS) {\n            document.getElementById('sort-add-contestant-button').disabled = false;\n        }\n\n        const algorithmDropDownButtons = document.getElementsByClassName('algorithm-dropdown-button');\n        for(let i = 0; i < algorithmDropDownButtons.length; ++i) {\n            algorithmDropDownButtons[i].disabled = false;\n        }\n        const algorithmDropDownArrows = document.getElementsByClassName('dropdown-arrow');\n        for(let i = 0; i < algorithmDropDownArrows.length; ++i) {\n            algorithmDropDownArrows[i].style.visibility = 'visible';\n        }\n    }\n\n    disableDuringContestControlButtons() {\n        document.getElementById('sort-skip-to-finish-button').disabled = true;\n    }\n\n    enableDuringContestControlButtons() {\n        document.getElementById('sort-skip-to-finish-button').disabled = false\n    }\n\n    disableRemoveContestantButtons() {\n        const removeAlgorithmButtons = document.getElementsByClassName('remove');\n        for(let i = 0; i < removeAlgorithmButtons.length; ++i) {\n            removeAlgorithmButtons[i].disabled = true;\n        }\n    }\n\n    enableRemoveContestantButtons() {\n        if(this.state.numOfContestants > 2) {\n            const removeAlgorithmButtons = document.getElementsByClassName('remove');\n            for(let i = 0; i < removeAlgorithmButtons.length; ++i) {\n                removeAlgorithmButtons[i].disabled = false;\n            }\n        }\n    }\n\n    skipToFinishButtonOnClick() {\n        this.clearAllTimeouts();\n        this.clearAllQuicksortPivotBars();\n        this.disableDuringContestControlButtons();\n        this.clearAllAlgorithmStatsAndPlaceLabels();\n\n        let allContestantPlaceInfo = this.findAllPlaceInformation();\n\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            const algorithmPlace = allContestantPlaceInfo[i][2];\n            this.algoContestantRefs[i].handleAlgorithmIsNowFinished(algorithmPlace);\n            this.algoContestantRefs[i].resetArrayBarsToCorrectHeights();\n        }\n        this.handleContestIsNowFinished();\n    }\n\n    removeExtraContestants() {\n        for(let i = INITIAL_NUM_OF_CONTESTANTS; i < MAX_NUM_OF_CONTESTANTS; ++i) {\n            this.algoContestantRefs[i].removeComponent();\n        }\n    }\n\n    findAllPlaceInformation() {\n\n        const allContestantPlaceInfo = [];\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            const contestantNum = i+1;\n            const numOfSteps = this.algoContestantRefs[i].getNumOfAnimationsSteps();\n            allContestantPlaceInfo.push([contestantNum, numOfSteps]);\n        }\n\n        //sort by number of animation steps to get the list in order of place\n        allContestantPlaceInfo.sort(function(a,b) {\n            return a[1]-b[1]\n        });\n\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            if(i > 0) {\n                if(allContestantPlaceInfo[i][1] === allContestantPlaceInfo[i-1][1]) {\n                    let placeNumber = allContestantPlaceInfo[i-1][2];\n                    allContestantPlaceInfo[i][2] = placeNumber;\n                }\n                else {\n                    let placeNumber = allContestantPlaceInfo[i-1][2] + 1;\n                    allContestantPlaceInfo[i][2] = placeNumber;\n                }\n            }\n            else {\n                let placeNumber = 1;\n                allContestantPlaceInfo[i][2] = placeNumber;\n            }\n        }\n\n        //sort by contestant number to get the list in the correct order\n        allContestantPlaceInfo.sort(function(a,b) {\n            return a[0]-b[0]\n        });\n        \n        //final format [contestant number, number of animation steps, place achieved]\n        return allContestantPlaceInfo;\n    }\n\n    clearAllAlgorithmStatsAndPlaceLabels() {\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            this.algoContestantRefs[i].destructAlgorithmPlaceLabel();\n            this.algoContestantRefs[i].destructAlgorithmStatsLabel();\n        }\n    }\n\n    clearAllTimeouts() {\n        // from https://stackoverflow.com/questions/8860188/javascript-clear-all-timeouts\n        // all timeout ids are consecutive integers, so this will clear all of the pending animation timeouts\n        var id = setTimeout(function() {}, 0);\n        while (id--) {\n            clearTimeout(id);\n        }\n    }\n\n    clearAllQuicksortPivotBars() {\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            let pivotLine = document.getElementById(`pivot-line-${i+1}`);\n            if(pivotLine !== null) {\n                pivotLine.remove();\n            }\n        }\n    }\n\n    genearateRandomArrayButtonOnClick() {\n        this.setState({ ...this.state,\n            isPreContest: true,\n            isRandomArray: true }, () => {\n            this.enablePreContestSetupButtons();\n            this.resetSortContestPage();\n            this.randomizeArray();\n            this.enableRemoveContestantButtons();\n        });\n    }\n\n    genearateNearySortedArrayButtonOnClick() {\n        this.setState({ ...this.state,\n            isPreContest: true,\n            isRandomArray: false }, () => {\n            this.enablePreContestSetupButtons();\n            this.resetSortContestPage();\n            this.generateNearlySortedArray();\n            this.enableRemoveContestantButtons();\n        });\n    }\n\n    startContestButtonOnClick() {\n        this.resetSortContestPage();\n        this.startContest();\n        this.setState({ ...this.state, isPreContest: false });\n    }\n\n    addContestantOnClick() {\n        this.addContestant();\n    }\n\n    getFullPageWidthArraySize() {\n        const initialArraySize = Math.floor((window.innerWidth - 22) / 4);\n        return initialArraySize;\n    }\n\n    handlePageResize = () => {\n        if(this.getFullPageWidthArraySize() !== this.state.array.length) {\n            if(this.state.isPreContest === true) {\n                if(this.state.isRandomArray === true) {\n                    this.randomizeArray();\n                }\n                else {\n                    this.generateNearlySortedArray();\n                }\n            }\n        }\n\n        let windowWidthSize = window.innerWidth;\n        if(windowWidthSize <= 1195) {\n            document.querySelector('#randomize-button').textContent = 'Randomize';\n            document.querySelector('#nearly-sorted-button').textContent = 'Nearly Sorted';\n            document.querySelector('#sort-add-contestant-button').textContent = 'Add';\n        }\n        else {\n            document.querySelector('#randomize-button').textContent = 'Generate Random Array';\n            document.querySelector('#nearly-sorted-button').textContent = 'Generate Nearly Sorted Array';\n            document.querySelector('#sort-add-contestant-button').textContent = 'Add Contestant';\n        }\n        \n        if(windowWidthSize <= 700) {\n            document.querySelector('#algo-contest-header-link').textContent = 'AlgoContest';\n        }\n        else {\n            document.querySelector('#algo-contest-header-link').textContent = 'AlgorithmContest';\n        }\n\n        let animationSpeedMS;\n        if(windowWidthSize < 420) {\n            animationSpeedMS = 5;\n        }\n        else if(windowWidthSize < 600) {\n            animationSpeedMS = 4;\n        }\n        else if(windowWidthSize < 800) {\n            animationSpeedMS = 3;\n        }\n        else if(windowWidthSize < 1200) {\n            animationSpeedMS = 1.5;\n        }\n        else {\n            animationSpeedMS = 1;\n        }\n        for(let i = 0; i < MAX_NUM_OF_CONTESTANTS; ++i) {\n            this.algoContestantRefs[i].setAnimationSpeed(animationSpeedMS);\n        }\n    }\n\n    // Referenced https://www.w3schools.com/howto/howto_js_sticky_header.asp\n    addOrRemoveStickyEffectOnSortContestHeader = () => {\n        let header = document.getElementById(\"sort-contest-header\");\n        let sticky = 45; //initial header.offsetTop();\n        if(window.innerWidth <= 480) {\n            sticky = 40; //initial header.offsetTop()\n        }\n\n        if (window.pageYOffset > sticky) {\n            header.classList.add(\"sticky\");\n        } else {\n            header.classList.remove(\"sticky\");\n        }\n    }\n\n    render() {\n        const ContestantNumbers = [];\n        for(let i = 0; i < MAX_NUM_OF_CONTESTANTS; ++i) {\n            ContestantNumbers.push(i+1);\n        }\n\n        return (\n            <div className='sort-contest'>\n                <div id=\"sort-contest-header\">\n                    <button id=\"randomize-button\" onClick={() => this.genearateRandomArrayButtonOnClick()}>\n                        Generate Random Array\n                    </button>\n                    <button id=\"nearly-sorted-button\" onClick={() => this.genearateNearySortedArrayButtonOnClick()}>\n                        Generate Nearly Sorted Array\n                    </button>\n                    <button id='sort-add-contestant-button' onClick={() => this.addContestantOnClick()}>Add Contestant</button>\n                    <div id=\"sort-num-of-contestants-label\">\n                        {this.state.numOfContestants} Contestants\n                    </div>\n                    <button id=\"sort-start-contest-button\" onClick={() => this.startContestButtonOnClick()}>Start</button>\n                    <button id=\"sort-skip-to-finish-button\" onClick={() => this.skipToFinishButtonOnClick()}>Skip To Finish</button>\n                </div>\n                <div className='sort-visualizers' id='sort-visualizers'>\n                    {ContestantNumbers.map(contestantNum => (\n                        <SortVisualizerContestant \n                            key={contestantNum}\n                            ref={this.setRef}\n                            array={this.state.array}\n                            algorithmType={ALGORITHM_TYPES[(contestantNum - 1) % ALGORITHM_TYPES.length]}\n                            algorithmTypes={ALGORITHM_TYPES}\n                            contestantNumber={contestantNum}\n                            removeMe={this.removeContestant}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}","import React, {Component} from 'react';\nimport './node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      contestantNumber,\n      col,\n      row,\n      weight,\n      isFinish,\n      isStart,\n      isWall,\n      isLastRow,\n      isLastColumn,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp\n    } = this.props;\n\n    const extraClassName = isFinish\n      ? ' node-finish'\n      : isStart\n      ? ' node-start'\n      : isWall\n      ? ' node-wall'\n      : '';\n\n    const isLastRowClassName = isLastRow\n        ? ' last-row'\n        : '';\n    \n    const isLastColumnClassName = isLastColumn\n        ? ' last-column'\n        : '';\n\n    return (\n      <div\n        id={`${contestantNumber}-node-${row}-${col}`}\n        className={`node node-${row}-${col}${extraClassName}${isLastRowClassName}${isLastColumnClassName} weight-${weight}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp(row, col)}></div>\n    );\n  }\n}","// From: https://www.digitalocean.com/community/tutorials/js-binary-heaps\n\nexport class PriorityQueue {\n\n    constructor() {\n        this.values = [];\n    }\n\n    enqueue(val, priority) {\n        let newNode = new Node(val, priority);\n        this.values.push(newNode);\n        let index = this.values.length - 1;\n        const current = this.values[index];\n    \n        while (index > 0) {\n            let parentIndex = Math.floor((index - 1) / 2);\n            let parent = this.values[parentIndex];\n    \n            if (parent.priority >= current.priority) {\n                this.values[parentIndex] = current;\n                this.values[index] = parent;\n                index = parentIndex;\n            } else break;\n        }\n    }\n\n    dequeue() {\n        if(this.values.length <= 1) {\n            return this.values.pop();\n        }\n\n        const max = this.values[0];\n        const end = this.values.pop();\n        this.values[0] = end;\n    \n        let index = 0;\n        const length = this.values.length;\n        const current = this.values[0];\n        while (true) {\n            let leftChildIndex = 2 * index + 1;\n            let rightChildIndex = 2 * index + 2;\n            let leftChild, rightChild;\n            let swap = null;\n    \n            if (leftChildIndex < length) {\n                leftChild = this.values[leftChildIndex];\n                if (leftChild.priority < current.priority) swap = leftChildIndex;\n            }\n            if (rightChildIndex < length) {\n                rightChild = this.values[rightChildIndex];\n                if (\n                    (swap === null && rightChild.priority < current.priority) ||\n                    (swap !== null && rightChild.priority < leftChild.priority)\n                )\n                    swap = rightChildIndex;\n            }\n  \n            if (swap === null) break;\n            this.values[index] = this.values[swap];\n            this.values[swap] = current;\n            index = swap;\n        }\n        return max;\n    }\n\n    isEmpty() {\n        if(this.values.length <= 0) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}\n\nclass Node {\n    constructor(val, priority) {\n      this.val = val;\n      this.priority = priority;\n    }\n\n    getValue() {\n        return this.val;\n    }\n}\n  ","export class DijkstraNode {\n\n    constructor(row, col, weight, distance) {\n        this.row = row;\n        this.col = col;\n        this.weight = weight;\n        this.distance = distance;\n        this.previousNode = null;\n        this.isVisited = false;\n    }\n\n    setWeight(weight) {\n        this.weight = weight;\n    }\n\n    getWeight() {\n        return this.weight;\n    }\n\n    setDistance(distance) {\n        this.distance = distance;\n    }\n\n    getDistance() {\n        return this.distance;\n    }\n\n    setPreviousNode(prevNode) {\n        this.previousNode = prevNode;\n    }\n\n    getPreviousNode() {\n        return this.previousNode;\n    }\n\n    setIsVisited(isVisited) {\n        this.isVisited = isVisited;\n    }\n\n    isNodeVisited() {\n        return this.isVisited;\n    }\n\n    getRow() {\n        return this.row;\n    }\n\n    getCol() {\n        return this.col;\n    }\n\n}","import { PriorityQueue } from \"../dataStructures/MinPriorityQueue\";\nimport { DijkstraNode } from \"../dataStructures/DijkstraNode\";\n\nexport function getDijkstraAnimations(grid, startNode, finishNode) {\n    const animations = [];\n    const dijkstraGrid = getDijkstraGrid(grid, startNode.row, startNode.col);\n    dijkstra(dijkstraGrid, startNode, finishNode, animations);\n    findNodesInShortestPathOrder(dijkstraGrid, finishNode, animations);\n    // console.log(animations);\n    // console.log('hey');\n    return animations;\n}\n\nfunction dijkstra(grid, startNode, finishNode, animations) {\n\n    // Animation Codes:\n    //  'v' denotes a visited node at a particular row and column\n    //  'vf' denotes that we have finished visiting a node\n    //  'sp' denotes a node is part of the shortest path\n\n    grid[startNode.row][startNode.col].setDistance(0);\n    let priorityQueue = new PriorityQueue();\n    priorityQueue.enqueue(grid[startNode.row][startNode.col], 0);\n\n    while (!priorityQueue.isEmpty()) {\n        let closestNode = priorityQueue.dequeue().getValue();\n        grid[closestNode.getRow()][closestNode.getCol()].setIsVisited(true);\n        animations.push(['v', closestNode.getRow(), closestNode.getCol()]);\n        animations.push(['vf', closestNode.getRow(), closestNode.getCol()]);\n        if (closestNode.getRow() === finishNode.row && \n            closestNode.getCol() === finishNode.col) return;\n        updateClosestNodeNeighbors(closestNode, grid, priorityQueue);\n    }\n}\n\nfunction updateClosestNodeNeighbors(node, grid, priorityQueue) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        let altDistance = parseInt(node.getDistance()) + parseInt(neighbor.getWeight());\n        if (altDistance < neighbor.getDistance()) {\n            neighbor.setDistance(altDistance);\n            neighbor.setPreviousNode(node);\n            priorityQueue.enqueue(neighbor, neighbor.distance);\n        }\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const row = node.getRow();\n    const col = node.getCol();\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n\n    return neighbors.filter(neighbor => !neighbor.isNodeVisited());\n}\n\nfunction findNodesInShortestPathOrder(grid, finishNode, animations) {\n    // Keep track of next and previous node just for the path animations\n\n    let nextNode = null;\n    let currentNode = grid[finishNode.row][finishNode.col];\n    let previousNode = currentNode.getPreviousNode();\n\n    if(previousNode === null) {\n        return;\n    }\n\n    while (currentNode !== null) {\n        if(nextNode === null) {\n            animations.push(['spf', currentNode.row, currentNode.col, previousNode.row, previousNode.col]);\n        }\n        else if(previousNode === null) {\n            animations.push(['sp', currentNode.row, currentNode.col, nextNode.row, nextNode.col]);\n        }\n        else {\n            animations.push(['sp', currentNode.row, currentNode.col, nextNode.row, nextNode.col]);\n            animations.push(['spf', currentNode.row, currentNode.col, previousNode.row, previousNode.col]);\n        }\n        nextNode = currentNode;\n        currentNode = previousNode;\n        if(previousNode !== null) previousNode = previousNode.getPreviousNode();\n    }\n    return;\n}\n\nfunction getDijkstraGrid(grid) {\n    const numRows = grid.length;\n    const numCols = grid[0].length;\n\n    let nodes = [];\n    for (let row = 0; row < numRows; ++row) {\n        nodes.push([]);\n    }\n\n    for (let row = 0; row < numRows; ++row) {\n        for (let col = 0; col < numCols; ++col) {\n            nodes[row][col] = new DijkstraNode(row, col, grid[row][col].weight, Infinity);\n        }\n    }\n\n    return nodes;\n}","//From \"https://jstutorial.medium.com/how-to-code-your-first-algorithm-draw-a-line-ca121f9a1395\"\n\n/*\n    This algorithm is used to get the grid coordinates\n     between the points a mouse skips when they move\n     too quickly when drawing nodes\n*/\nexport let getLinePixelCoordinates = (x1, y1, x2, y2) => {\n    let pixelLinePairs = [];\n\n    // Iterators, counters required by algorithm\n    let x, y, dx, dy, dx1, dy1, px, py, xe, ye, i;\n    // Calculate line deltas\n    dx = x2 - x1;\n    dy = y2 - y1;\n    // Create a positive copy of deltas (makes iterating easier)\n    dx1 = Math.abs(dx);\n    dy1 = Math.abs(dy);\n    // Calculate error intervals for both axis\n    px = 2 * dy1 - dx1;\n    py = 2 * dx1 - dy1;\n    // The line is X-axis dominant\n    if (dy1 <= dx1) {\n        // Line is drawn left to right\n        if (dx >= 0) {\n            x = x1; y = y1; xe = x2;\n        } else { // Line is drawn right to left (swap ends)\n            x = x2; y = y2; xe = x1;\n        }\n        pixelLinePairs.push([x, y]); // Draw first pixel\n        // Rasterize the line\n        for (i = 0; x < xe; i++) {\n            x = x + 1;\n            // Deal with octants...\n            if (px < 0) {\n                px = px + 2 * dy1;\n            } else {\n                if ((dx < 0 && dy < 0) || (dx > 0 && dy > 0)) {\n                    y = y + 1;\n                } else {\n                    y = y - 1;\n                }\n                px = px + 2 * (dy1 - dx1);\n            }\n            // Draw pixel from line span at\n            // currently rasterized position\n            pixelLinePairs.push([x, y]);\n        }\n    } else { // The line is Y-axis dominant\n        // Line is drawn bottom to top\n        if (dy >= 0) {\n            x = x1; y = y1; ye = y2;\n        } else { // Line is drawn top to bottom\n            x = x2; y = y2; ye = y1;\n        }\n        pixelLinePairs.push([x, y]); // Draw first pixel\n        // Rasterize the line\n        for (i = 0; y < ye; i++) {\n            y = y + 1;\n            // Deal with octants...\n            if (py <= 0) {\n                py = py + 2 * dx1;\n            } else {\n                if ((dx < 0 && dy<0) || (dx > 0 && dy > 0)) {\n                    x = x + 1;\n                } else {\n                    x = x - 1;\n                }\n                py = py + 2 * (dx1 - dy1);\n            }\n            // Draw pixel from line span at\n            // currently rasterized position\n            pixelLinePairs.push([x, y]);\n        }\n    }\n\n    return pixelLinePairs;\n }","import React from 'react';\nimport Node from './Node/Node.jsx';\nimport { getDijkstraAnimations } from './pathfindingAlgorithms/Dijkstra.js';\nimport { getLinePixelCoordinates } from './gridDrawingAlgorithms/BresenhamLineDrawAlgo.js';\nimport './css/PathfindingVisualizerContestant.css';\n\nconst INITIAL_ANIMATION_SPEED = 5;\n\nconst DEFAULT_BACKGROUND_COLOR = '#f7f7f7'; // light grey\nconst FINISHED_PATHFINDING_BACKGROUND_COLOR = '#edfff2'; // light green\n\nexport default class PathfindingVisualizerContestant extends React.Component {\n\n    static ANIMATION_DELAY_MS = 3000;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [],\n            animationSpeedMS: INITIAL_ANIMATION_SPEED,\n            algorithmType: this.props.algorithmType,\n            allAlgorithmTypes: this.props.algorithmTypes,\n            contestantNumber: this.props.contestantNumber,\n            selectedNodeWeight: this.props.selectedNodeWeight,\n            isMousePressed: false,\n            isStartNodeSelected: false,\n            isFinishNodeSelected: false,\n            lastUpdatedNode: [],\n            numOfNodesVisisted: -1,\n            lengthOfPath: -1\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if(props.grid !== state.grid){\n            return{ grid: props.grid };\n        }\n        if(props.selectedNodeWeight !== state.selectedNodeWeight) {\n            return{ selectedNodeWeight: props.selectedNodeWeight }\n        }\n        return null;\n    }\n\n    getPathfindingAnimations(startNode, endNode) {\n        let gridCopy = this.state.grid.map((value) => value);\n\n        switch(this.state.algorithmType) {\n            case 'Dijkstra':\n                return getDijkstraAnimations(gridCopy, startNode, endNode);\n            case 'A* Search':\n                // return getAStarAnimations(gridCopy);\n                return;\n            case 'Greedy Best-first Search':\n                // return getGreedyBestFirstAnimations(gridCopy);\n                return;\n            case 'Breadth-first Search':\n                // return getBreadthFirstAnimations(gridCopy);\n                return;\n            case 'Depth-first Search':\n                // return getDepthFirstAnimations(gridCopy);\n                return;\n            default:\n                console.log(\"Error: Unexpected Algorithm Type\");\n                return null;\n        }\n    }\n\n    doAnimationNextStep(animationStepInfo, currentStepNumber) {\n        switch(this.state.algorithmType) {\n            case 'Dijkstra':\n                this.doNextDijkstraAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'A* Search':\n                // this.doNextAStarAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'Greedy Best-first Search':\n                // this.doNextGreedyBestFirstAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'Breadth-first Search':\n                // this.doNextBreadthFirstAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            case 'Depth-first Search':\n                // this.doNextDepthFirstAnimationStep(animationStepInfo, currentStepNumber);\n                break;\n            default:\n                console.log(\"Error: Unexpected Algorithm Type\");\n        }\n    }\n\n    addShortestPathLineToNode(node, row, col, adjacentPathRow, adjacentPathCol) {\n        let visitedMarker = document.createElement(\"DIV\");\n        if(row === adjacentPathRow) {\n            if(col < adjacentPathCol) {\n                visitedMarker.setAttribute(\"class\", 'shortest-path shortest-path-right');\n            }\n            else {\n                visitedMarker.setAttribute(\"class\", 'shortest-path shortest-path-left');\n            }\n        }\n        else if(col === adjacentPathCol) {\n            if(row < adjacentPathRow) {\n                visitedMarker.setAttribute(\"class\", 'shortest-path shortest-path-bottom');\n            }\n            else {\n                visitedMarker.setAttribute(\"class\", 'shortest-path shortest-path-top');\n            }\n        }\n\n        node.appendChild(visitedMarker);\n    }\n\n    doNextDijkstraAnimationStep(animationStepInfo, currentStepNumber) {\n        const animationCode = animationStepInfo[0];\n        const row = animationStepInfo[1];\n        const col = animationStepInfo[2];\n\n        const currentNode = document.getElementById(\n            `${this.state.contestantNumber}-node-${row}-${col}`\n        );\n\n        // visit node case\n        if (animationCode === 'v') {\n            setTimeout(() => {\n                currentNode.classList.add('visited');\n            }, currentStepNumber * this.state.animationSpeedMS + PathfindingVisualizerContestant.ANIMATION_DELAY_MS);\n            return;\n        }\n        // draw shortest path line cases\n        else if(animationCode === 'sp') {\n            const nextRow = animationStepInfo[3];\n            const nextCol = animationStepInfo[4];\n            setTimeout(() => {\n                this.addShortestPathLineToNode(currentNode, row, col, nextRow, nextCol);\n            }, currentStepNumber * this.state.animationSpeedMS + PathfindingVisualizerContestant.ANIMATION_DELAY_MS);\n            return;\n        }\n        else if(animationCode === 'spf') {\n            setTimeout(() => {\n                const prevRow = animationStepInfo[3];\n                const prevCol = animationStepInfo[4];\n                this.addShortestPathLineToNode(currentNode, row, col, prevRow, prevCol);\n            }, currentStepNumber * this.state.animationSpeedMS + PathfindingVisualizerContestant.ANIMATION_DELAY_MS);\n            return;\n        }\n    }\n\n    scheduleAlgorithmIsNowFinishedCommands(lastAnimationStepNumber, algorithmPlace) {\n        setTimeout(() => {\n            this.handleAlgorithmIsNowFinished(algorithmPlace);\n        }, lastAnimationStepNumber * this.state.animationSpeedMS + PathfindingVisualizerContestant.ANIMATION_DELAY_MS);\n    }\n\n    handleAlgorithmIsNowFinished(algorithmPlace) {\n        this.createAlgorithmPlacelabel(algorithmPlace);\n        document.getElementById(`pathfinding-visualizer-${this.state.contestantNumber}`).style.backgroundColor = FINISHED_PATHFINDING_BACKGROUND_COLOR;\n        document.getElementById(`grid-container-${this.state.contestantNumber}`).style.borderColor = '#0e7424';\n    }\n\n    resetVisualizationStyling() {\n        document.getElementById(`pathfinding-visualizer-${this.state.contestantNumber}`).style.backgroundColor = DEFAULT_BACKGROUND_COLOR;\n        document.getElementById(`grid-container-${this.state.contestantNumber}`).style.borderColor = '#3b3b3b';\n    }\n\n    createAlgorithmPlacelabel(algorithmPlace) {\n        let pathfindingVisualizerContestant = document.getElementById(`pathfinding-visualizer-${this.state.contestantNumber}`);\n        let placeLabel = document.createElement(\"DIV\");\n        placeLabel.setAttribute(\"id\", `path-place-label-${this.state.contestantNumber}`);\n        placeLabel.setAttribute(\"class\", 'path-place-label');\n\n        let placeLabelText;\n        if(algorithmPlace === 1) {\n            const GOLD = '#c7b620';\n            placeLabel.style.backgroundColor = GOLD;\n            placeLabelText = document.createTextNode('1st Place');\n        }\n        else if(algorithmPlace === 2) {\n            const SILVER = '#929292';\n            placeLabel.style.backgroundColor = SILVER;\n            placeLabelText = document.createTextNode('2nd Place');\n        }\n        else if(algorithmPlace === 3) {\n            const BRONZE = '#ab7627';\n            placeLabel.style.backgroundColor = BRONZE;\n            placeLabelText = document.createTextNode('3rd Place');\n        }\n        else {\n            const DEFAULT = '#636363';\n            placeLabel.style.backgroundColor = DEFAULT;\n            placeLabelText = document.createTextNode(`${algorithmPlace}th Place`);\n        }\n\n        placeLabel.appendChild(placeLabelText);\n        pathfindingVisualizerContestant.appendChild(placeLabel);\n    }\n\n    destructAlgorithmPlaceLabel() {\n        let placeLabel = document.getElementById(`path-place-label-${this.state.contestantNumber}`);\n        if(placeLabel !== null) {\n            placeLabel.remove();\n        }\n    }\n\n    createAlgorithmStatsLabel() {\n        let sortVisualizerContestant = document.getElementById(`pathfinding-visualizer-${this.state.contestantNumber}`);\n        let statsLabel = document.createElement(\"DIV\");\n        statsLabel.setAttribute(\"id\", `path-stats-label-${this.state.contestantNumber}`);\n        statsLabel.setAttribute(\"class\", 'path-stats-label');\n\n        let placeLabelColor = document.getElementById(`path-place-label-${this.state.contestantNumber}`).style.backgroundColor;\n        statsLabel.style.borderColor = placeLabelColor;\n\n        let statsLabelText;\n        if(this.state.lengthOfPath !== 0) {\n            statsLabelText = document.createTextNode(\n                `Final Stats: ${this.state.numOfNodesVisisted} Nodes Visited and A ${this.state.lengthOfPath} Path Length Found`\n            );\n        }\n        else {\n            statsLabelText = document.createTextNode(\n                `Final Stats: ${this.state.numOfNodesVisisted} Nodes Visited and No Path Found`\n            );\n        }\n        \n        statsLabel.appendChild(statsLabelText);\n        sortVisualizerContestant.appendChild(statsLabel);\n    }\n\n    destructAlgorithmStatsLabel() {\n        let statsLabel = document.getElementById(`path-stats-label-${this.state.contestantNumber}`);\n        if(statsLabel !== null) {\n            statsLabel.remove();\n        }\n    }\n\n    handleMouseDown(row, col) {\n        if(!this.isStartOrFinishNode(row, col)) {\n            this.updateGridNodeWithSelectedWeight(row, col);\n        }\n        else {\n            if(this.state.grid[row][col].isStart) {\n                this.selectStartNode(row, col);\n            }\n            else {\n                this.selectFinishNode(row, col);\n            }\n        }\n    }\n\n    handleMouseEnter(row, col) {\n        if(this.state.isMousePressed === true) {\n            if(this.state.isStartNodeSelected) {\n                this.addHoverStylingToAllGridNodes(row, col, 'selected-start');\n            }\n            else if(this.state.isFinishNodeSelected) {\n                this.addHoverStylingToAllGridNodes(row, col, 'selected-finish');\n            }\n            else {\n                if(!this.isStartOrFinishNode(row, col)) {\n                    this.updateGridNodeWithSelectedWeight(row, col);\n                    if(!this.isLastUpdatedNodeAdjacentToCurrentNode(row, col)) {\n                        this.fillInSkippedNodes(row, col);\n                    }\n                }\n            }\n            this.setState({...this.state, lastUpdatedNode: [row, col]});\n        }\n    }\n\n    handleMouseUp(row, col) {\n        if(this.state.isStartNodeSelected) {\n            this.placeStartNode(row, col);\n        }\n        else if(this.state.isFinishNodeSelected) {\n            this.placeFinishNode(row, col);\n        }\n        this.setState({...this.state, lastUpdatedNode: [row, col]});\n    }\n\n    placeStartNode(row, col) {\n        if(!this.state.grid[row][col].isFinish) {\n            this.props.updateStartNode(row, col);\n            const allStartNodes = document.getElementsByClassName(`node-${row}-${col}`);\n            for(let i = 0; i < allStartNodes.length; ++i) {\n                allStartNodes[i].classList.add('node-start');\n            }\n            this.removeHoverStylingFromLastUpdatedNode('selected-start'); \n        }\n        else {\n            let finNodeCol = col;\n            if(col > 1) { finNodeCol-- }\n            else { finNodeCol++ }\n            setTimeout(() => {\n                this.props.updateFinishNode(row, finNodeCol)\n            }, 100);\n            setTimeout( () => {\n                this.props.updateStartNode(row, col);\n            }, 200);\n        }\n    }\n\n    placeFinishNode(row, col) {\n        if(!this.state.grid[row][col].isStart) {\n            this.props.updateFinishNode(row, col);\n            const allFinishNodes = document.getElementsByClassName(`node-${row}-${col}`);\n            for(let i = 0; i < allFinishNodes.length; ++i) {\n                allFinishNodes[i].classList.add('node-finish');\n            }\n            this.removeHoverStylingFromLastUpdatedNode('selected-finish');\n        }\n        else {\n            let startNodeCol = col;\n            if(col > 0) { startNodeCol-- }\n            else { startNodeCol++ }\n            setTimeout(() => {\n                this.props.updateStartNode(row, startNodeCol);\n            }, 100);\n            setTimeout(() => {\n                this.props.updateFinishNode(row, col);\n            }, 200);\n        }\n    }\n\n    isStartOrFinishNode(row, col) {\n        const node = this.state.grid[row][col];\n        return (node.isStart || node.isFinish);\n    }\n\n    isLastUpdatedNodeAdjacentToCurrentNode(currentRow, currentCol) {\n        return (Math.abs(currentRow - this.state.lastUpdatedNode[0]) <= 1)\n                    && (Math.abs(currentCol - this.state.lastUpdatedNode[1]) <= 1);\n    }\n\n    updateGridNodeWithSelectedWeight(row, col) {\n        this.props.updateGridNodeWeight(row, col, this.state.selectedNodeWeight);\n        this.setState({\n            ...this.state,\n            isMousePressed: true,\n            lastUpdatedNode: [row, col]\n        });\n    }\n\n    selectStartNode(row, col) {\n        this.setState({\n            ...this.state,\n            isStartNodeSelected: true,\n            isMousePressed: true,\n            lastUpdatedNode: [row, col]\n        });\n        const allStartNodes = document.getElementsByClassName(`node-${row}-${col}`);\n        for(let i = 0; i < allStartNodes.length; ++i) {\n            allStartNodes[i].classList.remove('node-start');\n        }\n        this.addHoverStylingToAllGridNodes(row, col, 'selected-start');\n    }\n\n    selectFinishNode(row, col) {\n        this.setState({\n            ...this.state,\n            isFinishNodeSelected: true,\n            isMousePressed: true,\n            lastUpdatedNode: [row, col]\n        });\n        const allFinishNodes = document.getElementsByClassName(`node-${row}-${col}`);\n        for(let i = 0; i < allFinishNodes.length; ++i) {\n            allFinishNodes[i].classList.remove('node-finish');\n        }\n        this.addHoverStylingToAllGridNodes(row, col, 'selected-finish');\n    }\n\n    fillInSkippedNodes(currRow, currCol) {\n\n        const updatedNodesCoordinates = [];\n\n        const x1 = this.state.lastUpdatedNode[1];\n        const y1 = this.state.lastUpdatedNode[0];\n        const x2 = currCol;\n        const y2 = currRow;\n\n        //draw a line between the skipped nodes in our grid\n        const lineCoordinates = getLinePixelCoordinates(x1, y1, x2, y2);\n        for(let i = 0; i < lineCoordinates.length; ++i) {\n            const row = lineCoordinates[i][1];\n            const col = lineCoordinates[i][0];\n            if(!this.isStartOrFinishNode(row, col)) {\n                updatedNodesCoordinates.push([row, col]);\n            }\n        }\n\n        this.props.updateMultipleNodeWeights(updatedNodesCoordinates, this.state.selectedNodeWeight);\n    }\n\n    updateAlgorithmType(algorithmType) {\n        this.setState({...this.state, algorithmType: algorithmType});\n    }\n\n    algorithmDropDownButtonOnClick(algorithmType) {\n        this.updateAlgorithmType(algorithmType);\n    }\n\n    resetMouseEvents() {\n        if(this.state.isStartNodeSelected) {\n            this.removeHoverStylingFromLastUpdatedNode('selected-start');\n            this.setStartNodeAtLastUpdatedNode();\n        }\n        if(this.state.isFinishNodeSelected) {\n            this.removeHoverStylingFromLastUpdatedNode('selected-finish');\n            this.setFinishNodeAtLastUpdatedNode();\n        }\n        this.setState({\n            ...this.state,\n            isMousePressed: false,\n            isStartNodeSelected: false,\n            isFinishNodeSelected: false\n        });\n    }\n\n    render() {\n        return (\n            <>\n            <div className='pathfinding-visualizer-contestant' id={`pathfinding-visualizer-${this.state.contestantNumber}`}\n                onMouseEnter={() => this.resetMouseEvents()} onMouseUp={() => this.resetMouseEvents()}>\n                <div className=\"path-dropdown\">\n                    <div id='path-algorithm-dropdown-label'>{this.state.algorithmType}<div className='dropdown-arrow'>▼</div></div>\n                    <div className=\"path-dropdown-content\">\n                        {this.state.allAlgorithmTypes.map((algorithmType) => (\n                        (algorithmType !== this.state.algorithmType) ?\n                            <button\n                                key={algorithmType}\n                                className='path-algorithm-dropdown-button'\n                                onClick={() => this.algorithmDropDownButtonOnClick(algorithmType)}\n                            >{algorithmType}</button>\n                            : null\n                        ))}\n                    </div>\n                </div>\n                <div className='grid-container' id={`grid-container-${this.state.contestantNumber}`}>\n                    {this.state.grid.map((row, rowIdx) => {\n                        return (\n                        <div className='grid-row' key={rowIdx}>\n                            {row.map((node, nodeIdx) => {\n                                const {row, col, weight, isFinish, isStart, isWall, isLastRow, isLastColumn} = node;\n                                return (\n                                    <Node\n                                    key={nodeIdx}\n                                    contestantNumber={this.state.contestantNumber}\n                                    row={row}\n                                    col={col}\n                                    weight={weight}\n                                    isFinish={isFinish}\n                                    isStart={isStart}\n                                    isWall={isWall}\n                                    isLastRow={isLastRow}\n                                    isLastColumn={isLastColumn}\n                                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                    onMouseEnter={(row, col) =>\n                                        this.handleMouseEnter(row, col)\n                                    }\n                                    onMouseUp={(row, col) => this.handleMouseUp(row, col)}></Node>\n                                );\n                            })}\n                        </div>\n                        );\n                    })}\n                </div>\n                {/* <button id='remove-button' className='remove' onClick={() => this.props.removeMe(this.state.contestantNumber)}>-</button> */}\n                </div>\n            </>\n        );\n    }\n\n    setAllAlgorithmStatInfo(numOfNodesVisisted, lengthOfPath) {\n        this.setState({\n            ...this.state,\n            numOfNodesVisisted: numOfNodesVisisted,\n            lengthOfPath: lengthOfPath\n        });\n    }\n\n    getAnimationSpeed() {\n        return this.state.animationSpeedMS;\n    }\n\n    addHoverStylingToAllGridNodes(row, col, hoverType) {\n        this.removeHoverStylingFromLastUpdatedNode(hoverType);\n        const allStartSelectedNodes = document.getElementsByClassName(`node-${row}-${col}`);\n        for(let i = 0; i < allStartSelectedNodes.length; ++i) {\n            allStartSelectedNodes[i].classList.add(`${hoverType}-hover`);\n        }\n    }\n\n    removeHoverStylingFromLastUpdatedNode(hoverType) {\n        const prevNodeRow = this.state.lastUpdatedNode[0];\n        const prevNodeCol = this.state.lastUpdatedNode[1];\n        const allPrevStartSelectedNodes = document.getElementsByClassName(`node-${prevNodeRow}-${prevNodeCol}`);\n        for(let i = 0; i < allPrevStartSelectedNodes.length; ++i) {\n            allPrevStartSelectedNodes[i].classList.remove(`${hoverType}-hover`);\n        }\n    }\n\n    setStartNodeAtLastUpdatedNode() {\n        const prevNodeRow = this.state.lastUpdatedNode[0];\n        const prevNodeCol = this.state.lastUpdatedNode[1];\n        this.props.updateStartNode(prevNodeRow, prevNodeCol);\n    }\n\n    setFinishNodeAtLastUpdatedNode() {\n        const prevNodeRow = this.state.lastUpdatedNode[0];\n        const prevNodeCol = this.state.lastUpdatedNode[1];\n        this.props.updateFinishNode(prevNodeRow, prevNodeCol);\n    }\n}","import React from 'react';\nimport PathfindingVisualizerContestant from './PathfindingVisualizerContestant';\nimport './css/PathfindingContest.css';\n\nconst GRID_NUM_ROWS = 15;\nconst COUNTDOWN_DURATION_MS = PathfindingVisualizerContestant.ANIMATION_DELAY_MS;\n\nconst INITIAL_NUM_OF_CONTESTANTS = 3;\nconst MAX_NUM_OF_CONTESTANTS = 3;\n\nconst EMPTY_GRID_START_NODE_ROW = 5;\nconst EMPTY_GRID_START_NODE_COL = 5;\n\nconst ALGORITHM_TYPES = [\n    'Dijkstra',\n    'A* Search',\n    'Greedy Best-first Search',\n    'Breadth-first Search',\n    'Depth-first Search',\n]\n\nconst NODE_TYPES = [\n    ['Empty','Weight-1'],\n    ['Path','Weight-2'],\n    ['Grass','Weight-5'],\n    ['Sand','Weight-10'],\n    ['Water','Weight-15'],\n    ['Wall','Weight-Inf']\n]\n\nexport default class PathfindingContest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [],\n            gridNumRows: GRID_NUM_ROWS,\n            gridNumCols: -1,\n            numOfContestants: INITIAL_NUM_OF_CONTESTANTS,\n            isPreContest: true,\n            isEmptyGrid: true,\n            selectedNodeType: 'Weight-Inf',\n            selectedNodeWeight: Infinity,\n            startNodeRow: -1,\n            startNodeColumn: -1,\n            finishNodeRow: -1,\n            finishNodeColumn: -1\n        };\n        this.setNewGridWithNodeWeightUpdated = this.setNewGridWithNodeWeightUpdated.bind(this);\n        this.setNewGridWithStartNodeUpdated = this.setNewGridWithStartNodeUpdated.bind(this);\n        this.setNewGridWithFinishNodeUpdated = this.setNewGridWithFinishNodeUpdated.bind(this);\n        this.setNewGridWithMultipleWeightNodesUpdated = this.setNewGridWithMultipleWeightNodesUpdated.bind(this);\n        this.algoContestantRefs = [];\n    }\n\n    setRef = (ref) => {\n        this.algoContestantRefs.push(ref);\n    };\n\n    componentDidMount() {\n        this.setEmptyGrid();\n        this.resetPathfindingContestPage();\n        window.addEventListener('resize', this.handlePageResize);\n    }\n    \n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handlePageResize);\n    }\n\n    startContest() {\n        this.setState({...this.state, isPreContest: false});\n        this.disablePreContestButtons();\n        this.disableGrids();\n        this.enableDuringContestControlButtons();\n        this.clearPathAndVisitedNodes();\n        this.startCountdown();\n        const allContestantAnimationData = this.getAllContestantAnimationDataAndSetAlgorithmStatInfo();\n        this.runContestAnimations(allContestantAnimationData);\n        this.scheduleContestFinishedCommands(allContestantAnimationData);\n    }\n\n    scheduleContestFinishedCommands(allContestantAnimationData) {\n\n        const allContestantMaxAnimationSteps = [];\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            allContestantMaxAnimationSteps.push(allContestantAnimationData[i].length);\n        }\n\n        const maxNumberOfAnimationSteps = Math.max(...allContestantMaxAnimationSteps);\n        setTimeout(() => {\n            this.handleContestIsNowFinished();\n        }, maxNumberOfAnimationSteps * this.algoContestantRefs[0].getAnimationSpeed() + PathfindingVisualizerContestant.ANIMATION_DELAY_MS);\n    }\n\n    handleContestIsNowFinished() {\n        this.setState({...this.state, isPreContest: true});\n        this.enablePreContestSetupButtons();\n        this.disableDuringContestControlButtons();\n        this.enableGrids();\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            this.algoContestantRefs[i].createAlgorithmStatsLabel();\n            this.algoContestantRefs[i].setAllAlgorithmStatInfo(-1, -1, -1);\n        }\n    }\n\n    startCountdown() {\n        let numOfCountdownSeconds = COUNTDOWN_DURATION_MS / 1000;\n        for(let i = 0; i < numOfCountdownSeconds; ++i) {\n            setTimeout(() => {\n                document.getElementById(\"path-start-contest-button\").innerHTML = `${numOfCountdownSeconds - i}`;\n            }, i * 1000);\n        }\n\n        setTimeout(() => {\n            document.getElementById(\"path-start-contest-button\").innerHTML = 'GO!';\n        }, COUNTDOWN_DURATION_MS); \n    }\n\n    getAllContestantAnimationDataAndSetAlgorithmStatInfo() {\n        const allContestantAnimationData = [];\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            allContestantAnimationData[i] = this.algoContestantRefs[i].getPathfindingAnimations(\n                this.state.grid[this.state.startNodeRow][this.state.startNodeColumn],\n                this.state.grid[this.state.finishNodeRow][this.state.finishNodeColumn]\n            );\n\n            let numOfNodesVisisted = 0;\n            let lengthOfPath = 0;\n            for(let j = 0; j < allContestantAnimationData[i].length; ++j){\n                const animationCode = allContestantAnimationData[i][j][0];\n                if(animationCode === 'v') {\n                    numOfNodesVisisted++;\n                }\n                else if(animationCode === 'spf') {\n                    const row = allContestantAnimationData[i][j][1];\n                    const col = allContestantAnimationData[i][j][2];\n                    lengthOfPath += parseInt(this.state.grid[row][col].weight);\n                }\n            }\n            this.algoContestantRefs[i].setAllAlgorithmStatInfo(numOfNodesVisisted, lengthOfPath);\n        }\n\n        return allContestantAnimationData;\n    }\n\n    runContestAnimations(allContestantAnimationData) {\n        let stepCounter = 0;\n        let numOfFinishedContestants = 0;\n        let placeNumber = 0;\n        while(numOfFinishedContestants < this.state.numOfContestants) {\n            let hasContestantFinishedThisStep = false;\n            for(let i = 0; i < this.state.numOfContestants; ++i) {\n                if(stepCounter > allContestantAnimationData[i].length) {\n                    continue;\n                }\n                else if(stepCounter === allContestantAnimationData[i].length) {\n                    numOfFinishedContestants++;\n                    if(hasContestantFinishedThisStep === false) {\n                        placeNumber++;\n                        hasContestantFinishedThisStep = true;\n                        this.algoContestantRefs[i].scheduleAlgorithmIsNowFinishedCommands(stepCounter, placeNumber);\n                    }\n                    else {\n                        this.algoContestantRefs[i].scheduleAlgorithmIsNowFinishedCommands(stepCounter, placeNumber);\n                    }\n                    console.log('contestant finished');\n                    continue;\n                }\n                else {\n                    this.algoContestantRefs[i].doAnimationNextStep(\n                        allContestantAnimationData[i][stepCounter], stepCounter\n                    );\n                }\n            }\n            stepCounter++;\n        }\n    }\n\n    setEmptyGrid() {\n        const emptyGrid = getEmptyGrid();\n        const totCols = getFullPageWidthGridNumCols();\n        const totRows = GRID_NUM_ROWS;\n        const startRow = EMPTY_GRID_START_NODE_ROW;\n        const startCol = EMPTY_GRID_START_NODE_COL;\n        const finRow = totRows - 6;\n        const finCol = totCols - 6;\n        this.setState({\n            ...this.state,\n            grid: emptyGrid,\n            gridNumCols: totCols,\n            startNodeRow: startRow,\n            startNodeColumn: startCol,\n            finishNodeRow: finRow,\n            finishNodeColumn: finCol,\n            isEmptyGrid: true\n        });\n    }\n\n    setResizedGridWithUpdatedNodesCopied() {\n        const grid = this.state.grid;\n        const startRow = this.state.startNodeRow;\n        const startCol = this.state.startNodeColumn;\n        const finRow = this.state.finishNodeRow;\n        const finCol = this.state.finishNodeColumn;\n        const totCols = getFullPageWidthGridNumCols();\n        let resizedGrid = getResizedGridWithUpdatedNodesCopied(grid);\n\n        //move start and end nodes to be in grid if necessary\n        const lastResizedGridIndex = resizedGrid[0].length - 1;\n        if(startCol > lastResizedGridIndex) {\n            resizedGrid = this.moveStartNodeToBeInGrid(resizedGrid, startRow);\n        }\n        if(finCol > lastResizedGridIndex) {\n            resizedGrid = this.moveFinishNodeToBeInGrid(resizedGrid, finRow);\n        }\n\n        this.setState({\n            ...this.state,\n            grid: resizedGrid,\n            gridNumCols: totCols,\n            isEmptyGrid: false\n        });\n    }\n\n    moveStartNodeToBeInGrid(resizedGrid, startRow) {\n        let grid = resizedGrid.slice();\n        let lastResizedGridCol = resizedGrid[0].length - 1;\n        const node = grid[startRow][lastResizedGridCol];\n        const newStartNode = {\n            ...node,\n            weight: 1,\n            isStart: true\n        };\n        grid[startRow][lastResizedGridCol] = newStartNode;\n\n        this.setState({\n            ...this.state,\n            startNodeRow: startRow,\n            startNodeColumn: lastResizedGridCol\n        });\n\n        return grid;\n    }\n\n    moveFinishNodeToBeInGrid(resizedGrid, finRow) {\n        let grid = resizedGrid.slice();\n        let lastResizedGridCol = resizedGrid[0].length - 1;\n        const node = grid[finRow][lastResizedGridCol];\n        const newFinishNode = {\n            ...node,\n            weight: 1,\n            isFinish: true\n        };\n        grid[finRow][lastResizedGridCol] = newFinishNode;\n\n        this.setState({\n            ...this.state,\n            finishNodeRow: finRow,\n            finishNodeColumn: lastResizedGridCol\n        });\n\n        return grid;\n    }\n\n    setNewGridWithNodeWeightUpdated(row, col, newWeight) {\n        const newGrid = getNewGridWithNodeWeightUpdated(this.state.grid, row, col, newWeight);\n        this.setState({\n            ...this.state,\n            grid: newGrid,\n            isEmptyGrid: false\n        });\n    }\n\n    setNewGridWithMultipleWeightNodesUpdated(updatedNodesCoordinates, newWeight) {\n        const newGrid = getNewGridWithMultipleNodeWeightsUpdated(this.state.grid, updatedNodesCoordinates, newWeight);\n        this.setState({\n            ...this.state,\n            grid: newGrid,\n            isEmptyGrid: false\n        });\n    }\n\n\n    setNewGridWithStartNodeUpdated(row, col) {\n        const prevStartNodeRow = this.state.startNodeRow;\n        const prevStartNodeCol = this.state.startNodeColumn;\n        const newGrid = getNewGridWithStartNodeUpdated(this.state.grid, row, col, prevStartNodeRow, prevStartNodeCol);\n        this.setState({\n            ...this.state,\n            grid: newGrid,\n            isEmptyGrid: false,\n            startNodeRow: row,\n            startNodeColumn: col    \n        });\n    }\n\n    setNewGridWithFinishNodeUpdated(row, col) {\n        const prevFinishNodeRow = this.state.finishNodeRow;\n        const prevFinishNodeCol = this.state.finishNodeColumn;\n        const newGrid = getNewGridWithFinishNodeUpdated(this.state.grid, row, col, prevFinishNodeRow, prevFinishNodeCol);\n        this.setState({\n            ...this.state,\n            grid: newGrid,\n            isEmptyGrid: false,\n            finishNodeRow: row,\n            finishNodeColumn: col \n        });\n    }\n\n    handlePageResize = () => {\n        if(getFullPageWidthGridNumCols() !== this.state.numCols) {\n            if(this.state.isPreContest) {\n                if(this.state.isEmptyGrid) {\n                    this.resetPathfindingContestPage();\n                    this.setEmptyGrid();\n                }\n                else {\n                    this.resetPathfindingContestPage();\n                    this.setResizedGridWithUpdatedNodesCopied();\n                }\n            }\n        }\n\n        let windowWidthSize = window.innerWidth;\n        if(windowWidthSize <= 700) {\n            document.querySelector('#algo-contest-header-link').textContent = 'AlgoContest';\n        }\n        else {\n            document.querySelector('#algo-contest-header-link').textContent = 'AlgorithmContest';\n        }\n    }\n\n    clearPathAndVisitedNodes() {\n        const visitedNodes = document.querySelectorAll('.visited');\n        for(let i = 0; i < visitedNodes.length; ++i) {\n            visitedNodes[i].classList.remove('visited');\n        }\n        const shortestPathLines = document.querySelectorAll('.shortest-path');\n        for(let i = 0; i < shortestPathLines.length; ++i) {\n            shortestPathLines[i].remove();\n        }\n    }\n\n    startContestButtonOnClick() {\n        this.resetPathfindingContestPage();\n        this.startContest();\n    }\n\n    resetButtonOnClick() {\n        if(document.getElementById('reset-grid-button').disabled !== true) {\n            toggleResetGridDropdownButtons();\n        }\n    }\n\n    clearPathButtonOnClick() {\n        toggleResetGridDropdownButtons();\n        this.resetPathfindingContestPage();\n    }\n\n    resetGridButtonOnClick() {\n        toggleResetGridDropdownButtons();\n        this.resetPathfindingContestPage();\n        this.setEmptyGrid();\n\n    }\n\n    skipToFinishButtonOnClick() {\n        console.log(\"Contest Being Skipped\");\n    }\n\n    selectNodeTypeDropdownOnClick() {\n        if(document.getElementById('select-node-type-dropdown-button').disabled !== true) {\n            toggleSelectNodeTypeDropdownButtons();\n        }\n    }\n\n    nodeSelectionDropdownButtonOnClick(nodeType) {\n        const nodeTypeInfo = nodeType.split('-');\n        let nodeTypeWeight = nodeTypeInfo[1];\n        if(nodeTypeWeight === 'Inf') {\n            nodeTypeWeight = 'Infinity';\n        }\n        this.setState({...this.state, selectedNodeType: nodeType, selectedNodeWeight: nodeTypeWeight});\n        toggleSelectNodeTypeDropdownButtons();\n    }\n\n    mazesAndMapsButtonOnClick() {\n        if(document.getElementById(\"mazes-and-maps-button\").disabled !== true) {\n            toggleSelectMazesAndMapsDropdownButtons();\n        }\n    }\n\n    addContestantOnClick() {\n        console.log('add contestant button has been clicked');\n        this.resetPathfindingContestPage();\n    }\n\n    render() {\n        const ContestantNumbers = [];\n        for(let i = 0; i < MAX_NUM_OF_CONTESTANTS; ++i) {\n            ContestantNumbers.push(i+1);\n        }\n\n        return (\n            <div className='pathfinding-contest'>\n                <div id=\"pathfinding-contest-header\">\n                    <button id=\"path-start-contest-button\" onClick={() => this.startContestButtonOnClick()}>Start</button>\n                    <div id=\"reset-grid-dropdown\">\n                        <button id=\"reset-grid-button\" onClick={() => this.resetButtonOnClick()}>\n                            <div id='reset-grid-button-text'>Reset</div>\n                            <div id='reset-grid-dropdown-arrow'>▼</div>\n                        </button>\n                        <div id=\"reset-grid-dropdown-content\">\n                            <button className='reset-grid-dropdown-button' onClick={() => this.clearPathButtonOnClick()}>Clear Path</button>\n                            <button className='reset-grid-dropdown-button' onClick={() => this.resetGridButtonOnClick()}>Reset Grid</button>\n                        </div>\n                    </div>\n                    <div id=\"mazes-and-maps-dropdown\">\n                        <button id=\"mazes-and-maps-button\" onClick={() => this.mazesAndMapsButtonOnClick()}>\n                            <div id='mazes-and-maps-button-text'>Mazes & Maps</div>\n                            <div id='mazes-and-maps-dropdown-arrow'>▼</div>\n                        </button>\n                        <div id=\"mazes-and-maps-dropdown-content\">\n                            <button className='mazes-and-maps-dropdown-button'>Recursive Maze</button>\n                            <button className='mazes-and-maps-dropdown-button'>Random Walls</button>\n                            <button className='mazes-and-maps-dropdown-button'>Map 1</button>\n                            <button className='mazes-and-maps-dropdown-button'>Map 2</button>\n                            <button className='mazes-and-maps-dropdown-button'>Map 3</button>\n                        </div>\n                    </div>\n                    <div id=\"select-node-type-dropdown\">\n                        <button id=\"select-node-type-dropdown-button\" onClick={() => this.selectNodeTypeDropdownOnClick()}>\n                            <div id=\"selected-node-display-container\">\n                                <div id=\"selected-node-display\" className={`display-node-${this.state.selectedNodeType}`}></div>\n                            </div>\n                            <div id=\"select-node-type-button-text\">Select Node Type</div>\n                            <div id=\"node-selection-dropdown-arrow\">▼</div>\n                        </button>\n                            <div id=\"node-selection-dropdown-content\">\n                                {NODE_TYPES.map((nodeType) => (\n                                (nodeType[1] !== this.state.selectedNodeType) ?\n                                    <button\n                                        key={nodeType[1]}\n                                        id='node-selection-dropdown-button'\n                                        onClick={() => this.nodeSelectionDropdownButtonOnClick(nodeType[1])}\n                                    ><div id=\"selected-node-display\" className={`display-node-${nodeType[1]}`}></div>\n                                    <div id='node-selection-dropdown-button-node-type-name'>{nodeType[0]}</div>\n                                    <div id='node-selection-dropdown-button-node-type-weight'>{nodeType[1]}</div>\n                                    </button>\n                                    : null\n                                ))}\n                            </div>\n                    </div>\n                    <button id='path-add-contestant-button' onClick={() => this.addContestantOnClick()}>Add Contestant</button>\n                    <div id=\"path-num-of-contestants-label\">{this.state.numOfContestants}</div>\n                    <button id=\"path-skip-to-finish-button\" onClick={() => this.skipToFinishButtonOnClick()}>Skip To Finish</button>\n                </div>\n                <div className='pathfinding-visualizers'>\n                    {ContestantNumbers.map(contestantNum => (\n                        <PathfindingVisualizerContestant\n                            key={contestantNum}\n                            ref={this.setRef}\n                            grid={this.state.grid}\n                            selectedNodeWeight={this.state.selectedNodeWeight}\n                            algorithmType={ALGORITHM_TYPES[(contestantNum - 1) % ALGORITHM_TYPES.length]}\n                            algorithmTypes={ALGORITHM_TYPES}\n                            contestantNumber={contestantNum}\n                            updateGridNodeWeight={this.setNewGridWithNodeWeightUpdated}\n                            updateMultipleNodeWeights={this.setNewGridWithMultipleWeightNodesUpdated}\n                            updateStartNode={this.setNewGridWithStartNodeUpdated}\n                            updateFinishNode={this.setNewGridWithFinishNodeUpdated}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n\n    resetPathfindingContestPage() {\n        this.enablePreContestSetupButtons();\n        this.disableDuringContestControlButtons();\n        this.clearAllAlgorithmStatsAndPlaceLabels();\n        this.clearPathAndVisitedNodes();\n        document.getElementById('node-selection-dropdown-content').style.display = 'none';\n        document.getElementById('mazes-and-maps-dropdown-content').style.display = 'none';\n        document.getElementById('reset-grid-dropdown-content').style.display = 'none';\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            this.algoContestantRefs[i].resetVisualizationStyling();\n        }\n    }\n\n    clearAllAlgorithmStatsAndPlaceLabels() {\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            this.algoContestantRefs[i].destructAlgorithmPlaceLabel();\n            this.algoContestantRefs[i].destructAlgorithmStatsLabel();\n        }\n    }\n\n    disableGrids() {\n        const gridContainers = document.getElementsByClassName('grid-container');\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            gridContainers[i].style.pointerEvents = 'none';\n        }\n    }\n\n    enableGrids() {\n        const gridContainers = document.getElementsByClassName('grid-container');\n        for(let i = 0; i < this.state.numOfContestants; ++i) {\n            gridContainers[i].style.pointerEvents = 'all';\n        }\n    }\n\n    disablePreContestButtons() {\n        document.getElementById(\"path-start-contest-button\").disabled = true;\n        document.getElementById(\"reset-grid-button\").disabled = true;\n        document.getElementById(\"mazes-and-maps-button\").disabled = true;\n        document.getElementById('select-node-type-dropdown-button').disabled = true;\n        document.getElementById('path-add-contestant-button').disabled = true;\n\n        const algorithmDropDownButtons = document.getElementsByClassName('path-algorithm-dropdown-button');\n        for(let i = 0; i < algorithmDropDownButtons.length; ++i) {\n            algorithmDropDownButtons[i].disabled = true;\n        }\n        const algorithmDropDownArrows = document.getElementsByClassName('dropdown-arrow');\n        for(let i = 0; i < algorithmDropDownArrows.length; ++i) {\n            algorithmDropDownArrows[i].style.visibility = 'hidden';\n        }\n    }\n\n    enablePreContestSetupButtons() {\n        document.getElementById(\"path-start-contest-button\").innerHTML = 'Start';\n        document.getElementById(\"path-start-contest-button\").disabled = false;\n        document.getElementById(\"reset-grid-button\").disabled = false;\n        document.getElementById(\"mazes-and-maps-button\").disabled = false;\n        document.getElementById('select-node-type-dropdown-button').disabled = false;\n        document.getElementById('path-add-contestant-button').disabled = false;\n\n        const algorithmDropDownButtons = document.getElementsByClassName('path-algorithm-dropdown-button');\n        for(let i = 0; i < algorithmDropDownButtons.length; ++i) {\n            algorithmDropDownButtons[i].disabled = false;\n        }\n        const algorithmDropDownArrows = document.getElementsByClassName('dropdown-arrow');\n        for(let i = 0; i < algorithmDropDownArrows.length; ++i) {\n            algorithmDropDownArrows[i].style.visibility = 'visible';\n        }\n    }\n\n    disableDuringContestControlButtons() {\n        document.getElementById('path-skip-to-finish-button').disabled = true;\n    }\n\n    enableDuringContestControlButtons() {\n        document.getElementById('path-skip-to-finish-button').disabled = false\n    }\n}\n\nconst toggleSelectNodeTypeDropdownButtons = () => {\n    const selectNodeTypeDropdownButtonContainer = document.getElementById('node-selection-dropdown-content');\n    if(selectNodeTypeDropdownButtonContainer.style.display === 'none') {\n        selectNodeTypeDropdownButtonContainer.style.display = 'block';\n    }\n    else {\n        selectNodeTypeDropdownButtonContainer.style.display = 'none';\n    }\n}\n\nconst toggleSelectMazesAndMapsDropdownButtons = () => {\n    const mazesAndMapsDropdownButtonContainer = document.getElementById('mazes-and-maps-dropdown-content');\n    if(mazesAndMapsDropdownButtonContainer.style.display === 'none') {\n        mazesAndMapsDropdownButtonContainer.style.display = 'block';\n    }\n    else {\n        mazesAndMapsDropdownButtonContainer.style.display = 'none';\n    }\n}\n\nconst toggleResetGridDropdownButtons = () => {\n    const mazesAndMapsDropdownButtonContainer = document.getElementById('reset-grid-dropdown-content');\n    if(mazesAndMapsDropdownButtonContainer.style.display === 'none') {\n        mazesAndMapsDropdownButtonContainer.style.display = 'block';\n    }\n    else {\n        mazesAndMapsDropdownButtonContainer.style.display = 'none';\n    }\n}\n\nconst getFullPageWidthGridNumCols = () => {\n    return Math.floor((window.innerWidth - (window.innerWidth * 0.1)) / 10);\n}\n\nconst getEmptyGrid = () => {\n    const grid = [];\n    const totCols = getFullPageWidthGridNumCols();\n    const totRows = GRID_NUM_ROWS;\n    const startRow = EMPTY_GRID_START_NODE_ROW;\n    const startCol = EMPTY_GRID_START_NODE_COL;\n    const finRow = totRows - 6;\n    const finCol = totCols - 6;\n\n    //empty, start, and finish nodes all have weight of one\n    const initialNodeWeight = 1;\n\n    for (let row = 0; row < totRows; row++) {\n        const currentRow = [];\n        for (let col = 0; col < totCols; col++) {\n            currentRow.push(createInitialNode(row, col, totRows, totCols, startRow, startCol, finRow, finCol, initialNodeWeight));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst createInitialNode = (row, col, totRows, totCols, startRow, startCol, finRow, finCol, weight) => {\n    return {\n        row,\n        col,\n        weight,\n        isStart: row === startRow && col === startCol,\n        isFinish: row === finRow && col === finCol,\n        isLastRow: row === totRows - 1,\n        isLastColumn: col === totCols - 1\n    };\n};\n\nconst createNode = (row, col, totRows, totCols, weight) => {\n    return {\n        row,\n        col,\n        weight,\n        isStart: false,\n        isFinish: false,\n        isLastRow: row === totRows - 1,\n        isLastColumn: col === totCols - 1\n    };\n}\n\nconst getNewGridWithNodeWeightUpdated = (grid, row, col, newWeight) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      row: row,\n      col: col,\n      isStart: false,\n      isFinish: false,\n      weight: newWeight,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};\n\nconst getNewGridWithMultipleNodeWeightsUpdated = (grid, updatedNodesCoordinates, newWeight) => {\n    const newGrid = grid.slice();\n    for(let i = 0; i < updatedNodesCoordinates.length; ++i) {\n        const row = updatedNodesCoordinates[i][0];\n        const col = updatedNodesCoordinates[i][1]\n        const node = newGrid[row][col];\n        const newNode = {\n          ...node,\n          row: row,\n          col: col,\n          isStart: false,\n          isFinish: false,\n          weight: newWeight,\n        };\n        newGrid[row][col] = newNode;\n    }\n    return newGrid;\n};\n\nconst getNewGridWithStartNodeUpdated = (grid, row, col, prevRow, prevCol) => {\n    const newGrid = grid.slice();\n    const totRows = grid.length;\n    const totCols = grid[0].length;\n    const startNodeWeight = 1;\n    const emptyNodeWeight = 1;\n    const prevNode = newGrid[prevRow][prevCol];\n    const node = newGrid[row][col];\n    const prevStartNode = {\n        ...prevNode,\n        row: prevRow,\n        col: prevCol,\n        weight: emptyNodeWeight,\n        isStart: false,\n        isFinish: false,\n        isLastRow: prevRow === totRows - 1,\n        isLastColumn: prevCol === totCols - 1\n    }\n    const newStartNode = {\n        ...node,\n        row: row,\n        col: col,\n        weight: startNodeWeight,\n        isStart: true,\n        isFinish: false,\n        isLastRow: row === totRows - 1,\n        isLastColumn: col === totCols - 1\n    };\n    newGrid[prevRow][prevCol] = prevStartNode;\n    newGrid[row][col] = newStartNode;\n    return newGrid;\n}\n\nconst getNewGridWithFinishNodeUpdated = (grid, row, col, prevRow, prevCol) => {\n    const newGrid = grid.slice();\n    const totRows = grid.length;\n    const totCols = grid[0].length;\n    const finishNodeWeight = 1;\n    const emptyNodeWeight = 1;\n    const prevNode = newGrid[prevRow][prevCol];\n    const node = newGrid[row][col];\n    const prevFinishNode = {\n        ...prevNode,\n        row: prevRow,\n        col: prevCol,\n        weight: emptyNodeWeight,\n        isStart: false,\n        isFinish: false,\n        isLastRow: prevRow === totRows - 1,\n        isLastColumn: prevCol === totCols - 1\n    }\n    const newFinishNode = {\n        ...node,\n        row: row,\n        col: col,\n        weight: finishNodeWeight,\n        isStart: false,\n        isFinish: true,\n        isLastRow: row === totRows - 1,\n        isLastColumn: col === totCols - 1\n    };\n    newGrid[prevRow][prevCol] = prevFinishNode;\n    newGrid[row][col] = newFinishNode;\n    return newGrid;\n}\n\nconst getResizedGridWithUpdatedNodesCopied = (grid) => {\n    const resizedGrid = [];\n    const totCols = getFullPageWidthGridNumCols();\n    const totRows = GRID_NUM_ROWS;\n    const prevLastColIndex = grid[0].length - 1;\n    const initialNodeWeight = 1;\n\n    for (let row = 0; row < totRows; row++) {\n        const currentRow = [];\n        for (let col = 0; col < totCols; col++) {\n            if(col < grid[row].length) {\n                if(col === prevLastColIndex) {\n                    const node = grid[row][col];\n                    const updatedNode = {\n                      ...node,\n                      isLastColumn: false,\n                    };\n                    currentRow.push(updatedNode);\n                }\n                else {\n                    currentRow.push(grid[row][col]);\n                }\n            }\n            else {\n                currentRow.push(createNode(row, col, totRows, totCols, initialNodeWeight));\n            }\n        }\n        resizedGrid.push(currentRow);\n    }\n\n    return resizedGrid;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SortContest from './SortContest/SortContest.jsx';\nimport PathfindingContest from './PathfindingContest/PathfindingContest.jsx';\nimport './AlgoContest.css';\n\nexport default class AlgoContest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            algorithmType: ''\n        };\n    }\n\n    componentDidMount() {\n        this.changePageContentToSortContest();\n    }\n\n    changePageContentToSortContest() {\n        this.setState({ algorithmType: 'sort' });\n\n        document.querySelector('#sort-contest-button').style.backgroundColor = '#6c757d';\n        document.querySelector('#pathfinding-contest-button').style.backgroundColor = 'transparent';\n\n        ReactDOM.render(<SortContest />, document.getElementById('main-content'));\n    }\n\n    changePageContentToPathfindingContest() {\n        this.setState({ algorithmType: 'pathfinding' });\n\n        document.querySelector('#sort-contest-button').style.backgroundColor = 'transparent';\n        document.querySelector('#pathfinding-contest-button').style.backgroundColor = '#6c757d';\n        \n        ReactDOM.render(<PathfindingContest />, document.getElementById('main-content'));\n\n        //Github pages early deploy message\n        setTimeout(() => {\n            alert(\"Pathfinding page is still very incomplete. Selecting and drawing nodes on the graph is supported. Moving start and end nodes is supported. Reset Buttons Work. And only Dijkstra's algorithm is supported.\");\n        }, 200);\n    }\n\n    render() {\n        return (\n            <div id='algo-contest'>\n                <div id='algo-contest-header'>\n                    <a href=\"http://benshinnick.github.io/algorithm-contest\" id='algo-contest-header-link'>AlgorithmContest</a>\n                    <button id='sort-contest-button' onClick={() => this.changePageContentToSortContest()}>Sorting</button>\n                    <button id='pathfinding-contest-button' onClick={() => this.changePageContentToPathfindingContest()}>Pathfinding</button>\n                </div>\n                <div id='main-content'></div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport AlgoContest from './AlgoContest/AlgoContest.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AlgoContest></AlgoContest>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}